var sd=e=>{throw TypeError(e)};var As=(e,t,n)=>t.has(e)||sd("Cannot "+n);var D=(e,t,n)=>(As(e,t,"read from private field"),n?n.call(e):t.get(e)),te=(e,t,n)=>t.has(e)?sd("Cannot add the same private member more than once"):t instanceof WeakSet?t.add(e):t.set(e,n),G=(e,t,n,o)=>(As(e,t,"write to private field"),o?o.call(e,n):t.set(e,n),n),Ae=(e,t,n)=>(As(e,t,"access private method"),n);var Pa=(e,t,n,o)=>({set _(r){G(e,t,r,n)},get _(){return D(e,t,o)}});function Q0(e,t){for(var n=0;n<t.length;n++){const o=t[n];if(typeof o!="string"&&!Array.isArray(o)){for(const r in o)if(r!=="default"&&!(r in e)){const a=Object.getOwnPropertyDescriptor(o,r);a&&Object.defineProperty(e,r,a.get?a:{enumerable:!0,get:()=>o[r]})}}}return Object.freeze(Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}))}(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))o(r);new MutationObserver(r=>{for(const a of r)if(a.type==="childList")for(const i of a.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&o(i)}).observe(document,{childList:!0,subtree:!0});function n(r){const a={};return r.integrity&&(a.integrity=r.integrity),r.referrerPolicy&&(a.referrerPolicy=r.referrerPolicy),r.crossOrigin==="use-credentials"?a.credentials="include":r.crossOrigin==="anonymous"?a.credentials="omit":a.credentials="same-origin",a}function o(r){if(r.ep)return;r.ep=!0;const a=n(r);fetch(r.href,a)}})();function wp(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var Sp={exports:{}},Gi={},Cp={exports:{}},q={};/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var va=Symbol.for("react.element"),Y0=Symbol.for("react.portal"),G0=Symbol.for("react.fragment"),X0=Symbol.for("react.strict_mode"),q0=Symbol.for("react.profiler"),Z0=Symbol.for("react.provider"),J0=Symbol.for("react.context"),ey=Symbol.for("react.forward_ref"),ty=Symbol.for("react.suspense"),ny=Symbol.for("react.memo"),oy=Symbol.for("react.lazy"),ld=Symbol.iterator;function ry(e){return e===null||typeof e!="object"?null:(e=ld&&e[ld]||e["@@iterator"],typeof e=="function"?e:null)}var Ep={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},Pp=Object.assign,bp={};function pr(e,t,n){this.props=e,this.context=t,this.refs=bp,this.updater=n||Ep}pr.prototype.isReactComponent={};pr.prototype.setState=function(e,t){if(typeof e!="object"&&typeof e!="function"&&e!=null)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")};pr.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")};function kp(){}kp.prototype=pr.prototype;function Rc(e,t,n){this.props=e,this.context=t,this.refs=bp,this.updater=n||Ep}var Ic=Rc.prototype=new kp;Ic.constructor=Rc;Pp(Ic,pr.prototype);Ic.isPureReactComponent=!0;var cd=Array.isArray,Np=Object.prototype.hasOwnProperty,_c={current:null},Tp={key:!0,ref:!0,__self:!0,__source:!0};function Dp(e,t,n){var o,r={},a=null,i=null;if(t!=null)for(o in t.ref!==void 0&&(i=t.ref),t.key!==void 0&&(a=""+t.key),t)Np.call(t,o)&&!Tp.hasOwnProperty(o)&&(r[o]=t[o]);var s=arguments.length-2;if(s===1)r.children=n;else if(1<s){for(var l=Array(s),c=0;c<s;c++)l[c]=arguments[c+2];r.children=l}if(e&&e.defaultProps)for(o in s=e.defaultProps,s)r[o]===void 0&&(r[o]=s[o]);return{$$typeof:va,type:e,key:a,ref:i,props:r,_owner:_c.current}}function ay(e,t){return{$$typeof:va,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}function Oc(e){return typeof e=="object"&&e!==null&&e.$$typeof===va}function iy(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,function(n){return t[n]})}var ud=/\/+/g;function Rs(e,t){return typeof e=="object"&&e!==null&&e.key!=null?iy(""+e.key):t.toString(36)}function qa(e,t,n,o,r){var a=typeof e;(a==="undefined"||a==="boolean")&&(e=null);var i=!1;if(e===null)i=!0;else switch(a){case"string":case"number":i=!0;break;case"object":switch(e.$$typeof){case va:case Y0:i=!0}}if(i)return i=e,r=r(i),e=o===""?"."+Rs(i,0):o,cd(r)?(n="",e!=null&&(n=e.replace(ud,"$&/")+"/"),qa(r,t,n,"",function(c){return c})):r!=null&&(Oc(r)&&(r=ay(r,n+(!r.key||i&&i.key===r.key?"":(""+r.key).replace(ud,"$&/")+"/")+e)),t.push(r)),1;if(i=0,o=o===""?".":o+":",cd(e))for(var s=0;s<e.length;s++){a=e[s];var l=o+Rs(a,s);i+=qa(a,t,n,l,r)}else if(l=ry(e),typeof l=="function")for(e=l.call(e),s=0;!(a=e.next()).done;)a=a.value,l=o+Rs(a,s++),i+=qa(a,t,n,l,r);else if(a==="object")throw t=String(e),Error("Objects are not valid as a React child (found: "+(t==="[object Object]"?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return i}function ba(e,t,n){if(e==null)return e;var o=[],r=0;return qa(e,o,"","",function(a){return t.call(n,a,r++)}),o}function sy(e){if(e._status===-1){var t=e._result;t=t(),t.then(function(n){(e._status===0||e._status===-1)&&(e._status=1,e._result=n)},function(n){(e._status===0||e._status===-1)&&(e._status=2,e._result=n)}),e._status===-1&&(e._status=0,e._result=t)}if(e._status===1)return e._result.default;throw e._result}var $e={current:null},Za={transition:null},ly={ReactCurrentDispatcher:$e,ReactCurrentBatchConfig:Za,ReactCurrentOwner:_c};function Ap(){throw Error("act(...) is not supported in production builds of React.")}q.Children={map:ba,forEach:function(e,t,n){ba(e,function(){t.apply(this,arguments)},n)},count:function(e){var t=0;return ba(e,function(){t++}),t},toArray:function(e){return ba(e,function(t){return t})||[]},only:function(e){if(!Oc(e))throw Error("React.Children.only expected to receive a single React element child.");return e}};q.Component=pr;q.Fragment=G0;q.Profiler=q0;q.PureComponent=Rc;q.StrictMode=X0;q.Suspense=ty;q.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ly;q.act=Ap;q.cloneElement=function(e,t,n){if(e==null)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=Pp({},e.props),r=e.key,a=e.ref,i=e._owner;if(t!=null){if(t.ref!==void 0&&(a=t.ref,i=_c.current),t.key!==void 0&&(r=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(l in t)Np.call(t,l)&&!Tp.hasOwnProperty(l)&&(o[l]=t[l]===void 0&&s!==void 0?s[l]:t[l])}var l=arguments.length-2;if(l===1)o.children=n;else if(1<l){s=Array(l);for(var c=0;c<l;c++)s[c]=arguments[c+2];o.children=s}return{$$typeof:va,type:e.type,key:r,ref:a,props:o,_owner:i}};q.createContext=function(e){return e={$$typeof:J0,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null},e.Provider={$$typeof:Z0,_context:e},e.Consumer=e};q.createElement=Dp;q.createFactory=function(e){var t=Dp.bind(null,e);return t.type=e,t};q.createRef=function(){return{current:null}};q.forwardRef=function(e){return{$$typeof:ey,render:e}};q.isValidElement=Oc;q.lazy=function(e){return{$$typeof:oy,_payload:{_status:-1,_result:e},_init:sy}};q.memo=function(e,t){return{$$typeof:ny,type:e,compare:t===void 0?null:t}};q.startTransition=function(e){var t=Za.transition;Za.transition={};try{e()}finally{Za.transition=t}};q.unstable_act=Ap;q.useCallback=function(e,t){return $e.current.useCallback(e,t)};q.useContext=function(e){return $e.current.useContext(e)};q.useDebugValue=function(){};q.useDeferredValue=function(e){return $e.current.useDeferredValue(e)};q.useEffect=function(e,t){return $e.current.useEffect(e,t)};q.useId=function(){return $e.current.useId()};q.useImperativeHandle=function(e,t,n){return $e.current.useImperativeHandle(e,t,n)};q.useInsertionEffect=function(e,t){return $e.current.useInsertionEffect(e,t)};q.useLayoutEffect=function(e,t){return $e.current.useLayoutEffect(e,t)};q.useMemo=function(e,t){return $e.current.useMemo(e,t)};q.useReducer=function(e,t,n){return $e.current.useReducer(e,t,n)};q.useRef=function(e){return $e.current.useRef(e)};q.useState=function(e){return $e.current.useState(e)};q.useSyncExternalStore=function(e,t,n){return $e.current.useSyncExternalStore(e,t,n)};q.useTransition=function(){return $e.current.useTransition()};q.version="18.3.1";Cp.exports=q;var p=Cp.exports;const O=wp(p),Rp=Q0({__proto__:null,default:O},[p]);/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var cy=p,uy=Symbol.for("react.element"),dy=Symbol.for("react.fragment"),fy=Object.prototype.hasOwnProperty,py=cy.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,my={key:!0,ref:!0,__self:!0,__source:!0};function Ip(e,t,n){var o,r={},a=null,i=null;n!==void 0&&(a=""+n),t.key!==void 0&&(a=""+t.key),t.ref!==void 0&&(i=t.ref);for(o in t)fy.call(t,o)&&!my.hasOwnProperty(o)&&(r[o]=t[o]);if(e&&e.defaultProps)for(o in t=e.defaultProps,t)r[o]===void 0&&(r[o]=t[o]);return{$$typeof:uy,type:e,key:a,ref:i,props:r,_owner:py.current}}Gi.Fragment=dy;Gi.jsx=Ip;Gi.jsxs=Ip;Sp.exports=Gi;var w=Sp.exports,_p={exports:{}},at={},Op={exports:{}},Mp={};/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */(function(e){function t(b,R){var $=b.length;b.push(R);e:for(;0<$;){var L=$-1>>>1,V=b[L];if(0<r(V,R))b[L]=R,b[$]=V,$=L;else break e}}function n(b){return b.length===0?null:b[0]}function o(b){if(b.length===0)return null;var R=b[0],$=b.pop();if($!==R){b[0]=$;e:for(var L=0,V=b.length,X=V>>>1;L<X;){var le=2*(L+1)-1,je=b[le],J=le+1,Xe=b[J];if(0>r(je,$))J<V&&0>r(Xe,je)?(b[L]=Xe,b[J]=$,L=J):(b[L]=je,b[le]=$,L=le);else if(J<V&&0>r(Xe,$))b[L]=Xe,b[J]=$,L=J;else break e}}return R}function r(b,R){var $=b.sortIndex-R.sortIndex;return $!==0?$:b.id-R.id}if(typeof performance=="object"&&typeof performance.now=="function"){var a=performance;e.unstable_now=function(){return a.now()}}else{var i=Date,s=i.now();e.unstable_now=function(){return i.now()-s}}var l=[],c=[],f=1,d=null,u=3,y=!1,S=!1,h=!1,x=typeof setTimeout=="function"?setTimeout:null,m=typeof clearTimeout=="function"?clearTimeout:null,v=typeof setImmediate<"u"?setImmediate:null;typeof navigator<"u"&&navigator.scheduling!==void 0&&navigator.scheduling.isInputPending!==void 0&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function g(b){for(var R=n(c);R!==null;){if(R.callback===null)o(c);else if(R.startTime<=b)o(c),R.sortIndex=R.expirationTime,t(l,R);else break;R=n(c)}}function C(b){if(h=!1,g(b),!S)if(n(l)!==null)S=!0,U(E);else{var R=n(c);R!==null&&H(C,R.startTime-b)}}function E(b,R){S=!1,h&&(h=!1,m(N),N=-1),y=!0;var $=u;try{for(g(R),d=n(l);d!==null&&(!(d.expirationTime>R)||b&&!I());){var L=d.callback;if(typeof L=="function"){d.callback=null,u=d.priorityLevel;var V=L(d.expirationTime<=R);R=e.unstable_now(),typeof V=="function"?d.callback=V:d===n(l)&&o(l),g(R)}else o(l);d=n(l)}if(d!==null)var X=!0;else{var le=n(c);le!==null&&H(C,le.startTime-R),X=!1}return X}finally{d=null,u=$,y=!1}}var P=!1,k=null,N=-1,j=5,M=-1;function I(){return!(e.unstable_now()-M<j)}function T(){if(k!==null){var b=e.unstable_now();M=b;var R=!0;try{R=k(!0,b)}finally{R?F():(P=!1,k=null)}}else P=!1}var F;if(typeof v=="function")F=function(){v(T)};else if(typeof MessageChannel<"u"){var _=new MessageChannel,K=_.port2;_.port1.onmessage=T,F=function(){K.postMessage(null)}}else F=function(){x(T,0)};function U(b){k=b,P||(P=!0,F())}function H(b,R){N=x(function(){b(e.unstable_now())},R)}e.unstable_IdlePriority=5,e.unstable_ImmediatePriority=1,e.unstable_LowPriority=4,e.unstable_NormalPriority=3,e.unstable_Profiling=null,e.unstable_UserBlockingPriority=2,e.unstable_cancelCallback=function(b){b.callback=null},e.unstable_continueExecution=function(){S||y||(S=!0,U(E))},e.unstable_forceFrameRate=function(b){0>b||125<b?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):j=0<b?Math.floor(1e3/b):5},e.unstable_getCurrentPriorityLevel=function(){return u},e.unstable_getFirstCallbackNode=function(){return n(l)},e.unstable_next=function(b){switch(u){case 1:case 2:case 3:var R=3;break;default:R=u}var $=u;u=R;try{return b()}finally{u=$}},e.unstable_pauseExecution=function(){},e.unstable_requestPaint=function(){},e.unstable_runWithPriority=function(b,R){switch(b){case 1:case 2:case 3:case 4:case 5:break;default:b=3}var $=u;u=b;try{return R()}finally{u=$}},e.unstable_scheduleCallback=function(b,R,$){var L=e.unstable_now();switch(typeof $=="object"&&$!==null?($=$.delay,$=typeof $=="number"&&0<$?L+$:L):$=L,b){case 1:var V=-1;break;case 2:V=250;break;case 5:V=1073741823;break;case 4:V=1e4;break;default:V=5e3}return V=$+V,b={id:f++,callback:R,priorityLevel:b,startTime:$,expirationTime:V,sortIndex:-1},$>L?(b.sortIndex=$,t(c,b),n(l)===null&&b===n(c)&&(h?(m(N),N=-1):h=!0,H(C,$-L))):(b.sortIndex=V,t(l,b),S||y||(S=!0,U(E))),b},e.unstable_shouldYield=I,e.unstable_wrapCallback=function(b){var R=u;return function(){var $=u;u=R;try{return b.apply(this,arguments)}finally{u=$}}}})(Mp);Op.exports=Mp;var hy=Op.exports;/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var vy=p,rt=hy;function A(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var jp=new Set,Qr={};function po(e,t){or(e,t),or(e+"Capture",t)}function or(e,t){for(Qr[e]=t,e=0;e<t.length;e++)jp.add(t[e])}var Jt=!(typeof window>"u"||typeof window.document>"u"||typeof window.document.createElement>"u"),yl=Object.prototype.hasOwnProperty,gy=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,dd={},fd={};function yy(e){return yl.call(fd,e)?!0:yl.call(dd,e)?!1:gy.test(e)?fd[e]=!0:(dd[e]=!0,!1)}function xy(e,t,n,o){if(n!==null&&n.type===0)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return o?!1:n!==null?!n.acceptsBooleans:(e=e.toLowerCase().slice(0,5),e!=="data-"&&e!=="aria-");default:return!1}}function wy(e,t,n,o){if(t===null||typeof t>"u"||xy(e,t,n,o))return!0;if(o)return!1;if(n!==null)switch(n.type){case 3:return!t;case 4:return t===!1;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}function Ue(e,t,n,o,r,a,i){this.acceptsBooleans=t===2||t===3||t===4,this.attributeName=o,this.attributeNamespace=r,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var Te={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){Te[e]=new Ue(e,0,!1,e,null,!1,!1)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];Te[t]=new Ue(t,1,!1,e[1],null,!1,!1)});["contentEditable","draggable","spellCheck","value"].forEach(function(e){Te[e]=new Ue(e,2,!1,e.toLowerCase(),null,!1,!1)});["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){Te[e]=new Ue(e,2,!1,e,null,!1,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){Te[e]=new Ue(e,3,!1,e.toLowerCase(),null,!1,!1)});["checked","multiple","muted","selected"].forEach(function(e){Te[e]=new Ue(e,3,!0,e,null,!1,!1)});["capture","download"].forEach(function(e){Te[e]=new Ue(e,4,!1,e,null,!1,!1)});["cols","rows","size","span"].forEach(function(e){Te[e]=new Ue(e,6,!1,e,null,!1,!1)});["rowSpan","start"].forEach(function(e){Te[e]=new Ue(e,5,!1,e.toLowerCase(),null,!1,!1)});var Mc=/[\-:]([a-z])/g;function jc(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(Mc,jc);Te[t]=new Ue(t,1,!1,e,null,!1,!1)});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(Mc,jc);Te[t]=new Ue(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)});["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(Mc,jc);Te[t]=new Ue(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)});["tabIndex","crossOrigin"].forEach(function(e){Te[e]=new Ue(e,1,!1,e.toLowerCase(),null,!1,!1)});Te.xlinkHref=new Ue("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1);["src","href","action","formAction"].forEach(function(e){Te[e]=new Ue(e,1,!1,e.toLowerCase(),null,!0,!0)});function Lc(e,t,n,o){var r=Te.hasOwnProperty(t)?Te[t]:null;(r!==null?r.type!==0:o||!(2<t.length)||t[0]!=="o"&&t[0]!=="O"||t[1]!=="n"&&t[1]!=="N")&&(wy(t,n,r,o)&&(n=null),o||r===null?yy(t)&&(n===null?e.removeAttribute(t):e.setAttribute(t,""+n)):r.mustUseProperty?e[r.propertyName]=n===null?r.type===3?!1:"":n:(t=r.attributeName,o=r.attributeNamespace,n===null?e.removeAttribute(t):(r=r.type,n=r===3||r===4&&n===!0?"":""+n,o?e.setAttributeNS(o,t,n):e.setAttribute(t,n))))}var an=vy.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,ka=Symbol.for("react.element"),bo=Symbol.for("react.portal"),ko=Symbol.for("react.fragment"),Fc=Symbol.for("react.strict_mode"),xl=Symbol.for("react.profiler"),Lp=Symbol.for("react.provider"),Fp=Symbol.for("react.context"),Bc=Symbol.for("react.forward_ref"),wl=Symbol.for("react.suspense"),Sl=Symbol.for("react.suspense_list"),zc=Symbol.for("react.memo"),vn=Symbol.for("react.lazy"),Bp=Symbol.for("react.offscreen"),pd=Symbol.iterator;function Er(e){return e===null||typeof e!="object"?null:(e=pd&&e[pd]||e["@@iterator"],typeof e=="function"?e:null)}var ve=Object.assign,Is;function _r(e){if(Is===void 0)try{throw Error()}catch(n){var t=n.stack.trim().match(/\n( *(at )?)/);Is=t&&t[1]||""}return`
`+Is+e}var _s=!1;function Os(e,t){if(!e||_s)return"";_s=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),typeof Reflect=="object"&&Reflect.construct){try{Reflect.construct(t,[])}catch(c){var o=c}Reflect.construct(e,[],t)}else{try{t.call()}catch(c){o=c}e.call(t.prototype)}else{try{throw Error()}catch(c){o=c}e()}}catch(c){if(c&&o&&typeof c.stack=="string"){for(var r=c.stack.split(`
`),a=o.stack.split(`
`),i=r.length-1,s=a.length-1;1<=i&&0<=s&&r[i]!==a[s];)s--;for(;1<=i&&0<=s;i--,s--)if(r[i]!==a[s]){if(i!==1||s!==1)do if(i--,s--,0>s||r[i]!==a[s]){var l=`
`+r[i].replace(" at new "," at ");return e.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",e.displayName)),l}while(1<=i&&0<=s);break}}}finally{_s=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?_r(e):""}function Sy(e){switch(e.tag){case 5:return _r(e.type);case 16:return _r("Lazy");case 13:return _r("Suspense");case 19:return _r("SuspenseList");case 0:case 2:case 15:return e=Os(e.type,!1),e;case 11:return e=Os(e.type.render,!1),e;case 1:return e=Os(e.type,!0),e;default:return""}}function Cl(e){if(e==null)return null;if(typeof e=="function")return e.displayName||e.name||null;if(typeof e=="string")return e;switch(e){case ko:return"Fragment";case bo:return"Portal";case xl:return"Profiler";case Fc:return"StrictMode";case wl:return"Suspense";case Sl:return"SuspenseList"}if(typeof e=="object")switch(e.$$typeof){case Fp:return(e.displayName||"Context")+".Consumer";case Lp:return(e._context.displayName||"Context")+".Provider";case Bc:var t=e.render;return e=e.displayName,e||(e=t.displayName||t.name||"",e=e!==""?"ForwardRef("+e+")":"ForwardRef"),e;case zc:return t=e.displayName||null,t!==null?t:Cl(e.type)||"Memo";case vn:t=e._payload,e=e._init;try{return Cl(e(t))}catch{}}return null}function Cy(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=t.render,e=e.displayName||e.name||"",t.displayName||(e!==""?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return Cl(t);case 8:return t===Fc?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if(typeof t=="function")return t.displayName||t.name||null;if(typeof t=="string")return t}return null}function Ln(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":return e;case"object":return e;default:return""}}function zp(e){var t=e.type;return(e=e.nodeName)&&e.toLowerCase()==="input"&&(t==="checkbox"||t==="radio")}function Ey(e){var t=zp(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),o=""+e[t];if(!e.hasOwnProperty(t)&&typeof n<"u"&&typeof n.get=="function"&&typeof n.set=="function"){var r=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return r.call(this)},set:function(i){o=""+i,a.call(this,i)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return o},setValue:function(i){o=""+i},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}function Na(e){e._valueTracker||(e._valueTracker=Ey(e))}function $p(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),o="";return e&&(o=zp(e)?e.checked?"true":"false":e.value),e=o,e!==n?(t.setValue(e),!0):!1}function gi(e){if(e=e||(typeof document<"u"?document:void 0),typeof e>"u")return null;try{return e.activeElement||e.body}catch{return e.body}}function El(e,t){var n=t.checked;return ve({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:n??e._wrapperState.initialChecked})}function md(e,t){var n=t.defaultValue==null?"":t.defaultValue,o=t.checked!=null?t.checked:t.defaultChecked;n=Ln(t.value!=null?t.value:n),e._wrapperState={initialChecked:o,initialValue:n,controlled:t.type==="checkbox"||t.type==="radio"?t.checked!=null:t.value!=null}}function Up(e,t){t=t.checked,t!=null&&Lc(e,"checked",t,!1)}function Pl(e,t){Up(e,t);var n=Ln(t.value),o=t.type;if(n!=null)o==="number"?(n===0&&e.value===""||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if(o==="submit"||o==="reset"){e.removeAttribute("value");return}t.hasOwnProperty("value")?bl(e,t.type,n):t.hasOwnProperty("defaultValue")&&bl(e,t.type,Ln(t.defaultValue)),t.checked==null&&t.defaultChecked!=null&&(e.defaultChecked=!!t.defaultChecked)}function hd(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var o=t.type;if(!(o!=="submit"&&o!=="reset"||t.value!==void 0&&t.value!==null))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}n=e.name,n!==""&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,n!==""&&(e.name=n)}function bl(e,t,n){(t!=="number"||gi(e.ownerDocument)!==e)&&(n==null?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var Or=Array.isArray;function Lo(e,t,n,o){if(e=e.options,t){t={};for(var r=0;r<n.length;r++)t["$"+n[r]]=!0;for(n=0;n<e.length;n++)r=t.hasOwnProperty("$"+e[n].value),e[n].selected!==r&&(e[n].selected=r),r&&o&&(e[n].defaultSelected=!0)}else{for(n=""+Ln(n),t=null,r=0;r<e.length;r++){if(e[r].value===n){e[r].selected=!0,o&&(e[r].defaultSelected=!0);return}t!==null||e[r].disabled||(t=e[r])}t!==null&&(t.selected=!0)}}function kl(e,t){if(t.dangerouslySetInnerHTML!=null)throw Error(A(91));return ve({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function vd(e,t){var n=t.value;if(n==null){if(n=t.children,t=t.defaultValue,n!=null){if(t!=null)throw Error(A(92));if(Or(n)){if(1<n.length)throw Error(A(93));n=n[0]}t=n}t==null&&(t=""),n=t}e._wrapperState={initialValue:Ln(n)}}function Vp(e,t){var n=Ln(t.value),o=Ln(t.defaultValue);n!=null&&(n=""+n,n!==e.value&&(e.value=n),t.defaultValue==null&&e.defaultValue!==n&&(e.defaultValue=n)),o!=null&&(e.defaultValue=""+o)}function gd(e){var t=e.textContent;t===e._wrapperState.initialValue&&t!==""&&t!==null&&(e.value=t)}function Wp(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Nl(e,t){return e==null||e==="http://www.w3.org/1999/xhtml"?Wp(t):e==="http://www.w3.org/2000/svg"&&t==="foreignObject"?"http://www.w3.org/1999/xhtml":e}var Ta,Hp=function(e){return typeof MSApp<"u"&&MSApp.execUnsafeLocalFunction?function(t,n,o,r){MSApp.execUnsafeLocalFunction(function(){return e(t,n,o,r)})}:e}(function(e,t){if(e.namespaceURI!=="http://www.w3.org/2000/svg"||"innerHTML"in e)e.innerHTML=t;else{for(Ta=Ta||document.createElement("div"),Ta.innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=Ta.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}});function Yr(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&n.nodeType===3){n.nodeValue=t;return}}e.textContent=t}var Lr={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Py=["Webkit","ms","Moz","O"];Object.keys(Lr).forEach(function(e){Py.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Lr[t]=Lr[e]})});function Kp(e,t,n){return t==null||typeof t=="boolean"||t===""?"":n||typeof t!="number"||t===0||Lr.hasOwnProperty(e)&&Lr[e]?(""+t).trim():t+"px"}function Qp(e,t){e=e.style;for(var n in t)if(t.hasOwnProperty(n)){var o=n.indexOf("--")===0,r=Kp(n,t[n],o);n==="float"&&(n="cssFloat"),o?e.setProperty(n,r):e[n]=r}}var by=ve({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Tl(e,t){if(t){if(by[e]&&(t.children!=null||t.dangerouslySetInnerHTML!=null))throw Error(A(137,e));if(t.dangerouslySetInnerHTML!=null){if(t.children!=null)throw Error(A(60));if(typeof t.dangerouslySetInnerHTML!="object"||!("__html"in t.dangerouslySetInnerHTML))throw Error(A(61))}if(t.style!=null&&typeof t.style!="object")throw Error(A(62))}}function Dl(e,t){if(e.indexOf("-")===-1)return typeof t.is=="string";switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Al=null;function $c(e){return e=e.target||e.srcElement||window,e.correspondingUseElement&&(e=e.correspondingUseElement),e.nodeType===3?e.parentNode:e}var Rl=null,Fo=null,Bo=null;function yd(e){if(e=xa(e)){if(typeof Rl!="function")throw Error(A(280));var t=e.stateNode;t&&(t=es(t),Rl(e.stateNode,e.type,t))}}function Yp(e){Fo?Bo?Bo.push(e):Bo=[e]:Fo=e}function Gp(){if(Fo){var e=Fo,t=Bo;if(Bo=Fo=null,yd(e),t)for(e=0;e<t.length;e++)yd(t[e])}}function Xp(e,t){return e(t)}function qp(){}var Ms=!1;function Zp(e,t,n){if(Ms)return e(t,n);Ms=!0;try{return Xp(e,t,n)}finally{Ms=!1,(Fo!==null||Bo!==null)&&(qp(),Gp())}}function Gr(e,t){var n=e.stateNode;if(n===null)return null;var o=es(n);if(o===null)return null;n=o[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(o=!o.disabled)||(e=e.type,o=!(e==="button"||e==="input"||e==="select"||e==="textarea")),e=!o;break e;default:e=!1}if(e)return null;if(n&&typeof n!="function")throw Error(A(231,t,typeof n));return n}var Il=!1;if(Jt)try{var Pr={};Object.defineProperty(Pr,"passive",{get:function(){Il=!0}}),window.addEventListener("test",Pr,Pr),window.removeEventListener("test",Pr,Pr)}catch{Il=!1}function ky(e,t,n,o,r,a,i,s,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(f){this.onError(f)}}var Fr=!1,yi=null,xi=!1,_l=null,Ny={onError:function(e){Fr=!0,yi=e}};function Ty(e,t,n,o,r,a,i,s,l){Fr=!1,yi=null,ky.apply(Ny,arguments)}function Dy(e,t,n,o,r,a,i,s,l){if(Ty.apply(this,arguments),Fr){if(Fr){var c=yi;Fr=!1,yi=null}else throw Error(A(198));xi||(xi=!0,_l=c)}}function mo(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do t=e,t.flags&4098&&(n=t.return),e=t.return;while(e)}return t.tag===3?n:null}function Jp(e){if(e.tag===13){var t=e.memoizedState;if(t===null&&(e=e.alternate,e!==null&&(t=e.memoizedState)),t!==null)return t.dehydrated}return null}function xd(e){if(mo(e)!==e)throw Error(A(188))}function Ay(e){var t=e.alternate;if(!t){if(t=mo(e),t===null)throw Error(A(188));return t!==e?null:e}for(var n=e,o=t;;){var r=n.return;if(r===null)break;var a=r.alternate;if(a===null){if(o=r.return,o!==null){n=o;continue}break}if(r.child===a.child){for(a=r.child;a;){if(a===n)return xd(r),e;if(a===o)return xd(r),t;a=a.sibling}throw Error(A(188))}if(n.return!==o.return)n=r,o=a;else{for(var i=!1,s=r.child;s;){if(s===n){i=!0,n=r,o=a;break}if(s===o){i=!0,o=r,n=a;break}s=s.sibling}if(!i){for(s=a.child;s;){if(s===n){i=!0,n=a,o=r;break}if(s===o){i=!0,o=a,n=r;break}s=s.sibling}if(!i)throw Error(A(189))}}if(n.alternate!==o)throw Error(A(190))}if(n.tag!==3)throw Error(A(188));return n.stateNode.current===n?e:t}function em(e){return e=Ay(e),e!==null?tm(e):null}function tm(e){if(e.tag===5||e.tag===6)return e;for(e=e.child;e!==null;){var t=tm(e);if(t!==null)return t;e=e.sibling}return null}var nm=rt.unstable_scheduleCallback,wd=rt.unstable_cancelCallback,Ry=rt.unstable_shouldYield,Iy=rt.unstable_requestPaint,we=rt.unstable_now,_y=rt.unstable_getCurrentPriorityLevel,Uc=rt.unstable_ImmediatePriority,om=rt.unstable_UserBlockingPriority,wi=rt.unstable_NormalPriority,Oy=rt.unstable_LowPriority,rm=rt.unstable_IdlePriority,Xi=null,$t=null;function My(e){if($t&&typeof $t.onCommitFiberRoot=="function")try{$t.onCommitFiberRoot(Xi,e,void 0,(e.current.flags&128)===128)}catch{}}var Ct=Math.clz32?Math.clz32:Fy,jy=Math.log,Ly=Math.LN2;function Fy(e){return e>>>=0,e===0?32:31-(jy(e)/Ly|0)|0}var Da=64,Aa=4194304;function Mr(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return e&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return e&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function Si(e,t){var n=e.pendingLanes;if(n===0)return 0;var o=0,r=e.suspendedLanes,a=e.pingedLanes,i=n&268435455;if(i!==0){var s=i&~r;s!==0?o=Mr(s):(a&=i,a!==0&&(o=Mr(a)))}else i=n&~r,i!==0?o=Mr(i):a!==0&&(o=Mr(a));if(o===0)return 0;if(t!==0&&t!==o&&!(t&r)&&(r=o&-o,a=t&-t,r>=a||r===16&&(a&4194240)!==0))return t;if(o&4&&(o|=n&16),t=e.entangledLanes,t!==0)for(e=e.entanglements,t&=o;0<t;)n=31-Ct(t),r=1<<n,o|=e[n],t&=~r;return o}function By(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}function zy(e,t){for(var n=e.suspendedLanes,o=e.pingedLanes,r=e.expirationTimes,a=e.pendingLanes;0<a;){var i=31-Ct(a),s=1<<i,l=r[i];l===-1?(!(s&n)||s&o)&&(r[i]=By(s,t)):l<=t&&(e.expiredLanes|=s),a&=~s}}function Ol(e){return e=e.pendingLanes&-1073741825,e!==0?e:e&1073741824?1073741824:0}function am(){var e=Da;return Da<<=1,!(Da&4194240)&&(Da=64),e}function js(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function ga(e,t,n){e.pendingLanes|=t,t!==536870912&&(e.suspendedLanes=0,e.pingedLanes=0),e=e.eventTimes,t=31-Ct(t),e[t]=n}function $y(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var o=e.eventTimes;for(e=e.expirationTimes;0<n;){var r=31-Ct(n),a=1<<r;t[r]=0,o[r]=-1,e[r]=-1,n&=~a}}function Vc(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var o=31-Ct(n),r=1<<o;r&t|e[o]&t&&(e[o]|=t),n&=~r}}var ne=0;function im(e){return e&=-e,1<e?4<e?e&268435455?16:536870912:4:1}var sm,Wc,lm,cm,um,Ml=!1,Ra=[],Dn=null,An=null,Rn=null,Xr=new Map,qr=new Map,yn=[],Uy="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Sd(e,t){switch(e){case"focusin":case"focusout":Dn=null;break;case"dragenter":case"dragleave":An=null;break;case"mouseover":case"mouseout":Rn=null;break;case"pointerover":case"pointerout":Xr.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":qr.delete(t.pointerId)}}function br(e,t,n,o,r,a){return e===null||e.nativeEvent!==a?(e={blockedOn:t,domEventName:n,eventSystemFlags:o,nativeEvent:a,targetContainers:[r]},t!==null&&(t=xa(t),t!==null&&Wc(t)),e):(e.eventSystemFlags|=o,t=e.targetContainers,r!==null&&t.indexOf(r)===-1&&t.push(r),e)}function Vy(e,t,n,o,r){switch(t){case"focusin":return Dn=br(Dn,e,t,n,o,r),!0;case"dragenter":return An=br(An,e,t,n,o,r),!0;case"mouseover":return Rn=br(Rn,e,t,n,o,r),!0;case"pointerover":var a=r.pointerId;return Xr.set(a,br(Xr.get(a)||null,e,t,n,o,r)),!0;case"gotpointercapture":return a=r.pointerId,qr.set(a,br(qr.get(a)||null,e,t,n,o,r)),!0}return!1}function dm(e){var t=Xn(e.target);if(t!==null){var n=mo(t);if(n!==null){if(t=n.tag,t===13){if(t=Jp(n),t!==null){e.blockedOn=t,um(e.priority,function(){lm(n)});return}}else if(t===3&&n.stateNode.current.memoizedState.isDehydrated){e.blockedOn=n.tag===3?n.stateNode.containerInfo:null;return}}}e.blockedOn=null}function Ja(e){if(e.blockedOn!==null)return!1;for(var t=e.targetContainers;0<t.length;){var n=jl(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(n===null){n=e.nativeEvent;var o=new n.constructor(n.type,n);Al=o,n.target.dispatchEvent(o),Al=null}else return t=xa(n),t!==null&&Wc(t),e.blockedOn=n,!1;t.shift()}return!0}function Cd(e,t,n){Ja(e)&&n.delete(t)}function Wy(){Ml=!1,Dn!==null&&Ja(Dn)&&(Dn=null),An!==null&&Ja(An)&&(An=null),Rn!==null&&Ja(Rn)&&(Rn=null),Xr.forEach(Cd),qr.forEach(Cd)}function kr(e,t){e.blockedOn===t&&(e.blockedOn=null,Ml||(Ml=!0,rt.unstable_scheduleCallback(rt.unstable_NormalPriority,Wy)))}function Zr(e){function t(r){return kr(r,e)}if(0<Ra.length){kr(Ra[0],e);for(var n=1;n<Ra.length;n++){var o=Ra[n];o.blockedOn===e&&(o.blockedOn=null)}}for(Dn!==null&&kr(Dn,e),An!==null&&kr(An,e),Rn!==null&&kr(Rn,e),Xr.forEach(t),qr.forEach(t),n=0;n<yn.length;n++)o=yn[n],o.blockedOn===e&&(o.blockedOn=null);for(;0<yn.length&&(n=yn[0],n.blockedOn===null);)dm(n),n.blockedOn===null&&yn.shift()}var zo=an.ReactCurrentBatchConfig,Ci=!0;function Hy(e,t,n,o){var r=ne,a=zo.transition;zo.transition=null;try{ne=1,Hc(e,t,n,o)}finally{ne=r,zo.transition=a}}function Ky(e,t,n,o){var r=ne,a=zo.transition;zo.transition=null;try{ne=4,Hc(e,t,n,o)}finally{ne=r,zo.transition=a}}function Hc(e,t,n,o){if(Ci){var r=jl(e,t,n,o);if(r===null)Ks(e,t,o,Ei,n),Sd(e,o);else if(Vy(r,e,t,n,o))o.stopPropagation();else if(Sd(e,o),t&4&&-1<Uy.indexOf(e)){for(;r!==null;){var a=xa(r);if(a!==null&&sm(a),a=jl(e,t,n,o),a===null&&Ks(e,t,o,Ei,n),a===r)break;r=a}r!==null&&o.stopPropagation()}else Ks(e,t,o,null,n)}}var Ei=null;function jl(e,t,n,o){if(Ei=null,e=$c(o),e=Xn(e),e!==null)if(t=mo(e),t===null)e=null;else if(n=t.tag,n===13){if(e=Jp(t),e!==null)return e;e=null}else if(n===3){if(t.stateNode.current.memoizedState.isDehydrated)return t.tag===3?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Ei=e,null}function fm(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(_y()){case Uc:return 1;case om:return 4;case wi:case Oy:return 16;case rm:return 536870912;default:return 16}default:return 16}}var bn=null,Kc=null,ei=null;function pm(){if(ei)return ei;var e,t=Kc,n=t.length,o,r="value"in bn?bn.value:bn.textContent,a=r.length;for(e=0;e<n&&t[e]===r[e];e++);var i=n-e;for(o=1;o<=i&&t[n-o]===r[a-o];o++);return ei=r.slice(e,1<o?1-o:void 0)}function ti(e){var t=e.keyCode;return"charCode"in e?(e=e.charCode,e===0&&t===13&&(e=13)):e=t,e===10&&(e=13),32<=e||e===13?e:0}function Ia(){return!0}function Ed(){return!1}function it(e){function t(n,o,r,a,i){this._reactName=n,this._targetInst=r,this.type=o,this.nativeEvent=a,this.target=i,this.currentTarget=null;for(var s in e)e.hasOwnProperty(s)&&(n=e[s],this[s]=n?n(a):a[s]);return this.isDefaultPrevented=(a.defaultPrevented!=null?a.defaultPrevented:a.returnValue===!1)?Ia:Ed,this.isPropagationStopped=Ed,this}return ve(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var n=this.nativeEvent;n&&(n.preventDefault?n.preventDefault():typeof n.returnValue!="unknown"&&(n.returnValue=!1),this.isDefaultPrevented=Ia)},stopPropagation:function(){var n=this.nativeEvent;n&&(n.stopPropagation?n.stopPropagation():typeof n.cancelBubble!="unknown"&&(n.cancelBubble=!0),this.isPropagationStopped=Ia)},persist:function(){},isPersistent:Ia}),t}var mr={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},Qc=it(mr),ya=ve({},mr,{view:0,detail:0}),Qy=it(ya),Ls,Fs,Nr,qi=ve({},ya,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Yc,button:0,buttons:0,relatedTarget:function(e){return e.relatedTarget===void 0?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==Nr&&(Nr&&e.type==="mousemove"?(Ls=e.screenX-Nr.screenX,Fs=e.screenY-Nr.screenY):Fs=Ls=0,Nr=e),Ls)},movementY:function(e){return"movementY"in e?e.movementY:Fs}}),Pd=it(qi),Yy=ve({},qi,{dataTransfer:0}),Gy=it(Yy),Xy=ve({},ya,{relatedTarget:0}),Bs=it(Xy),qy=ve({},mr,{animationName:0,elapsedTime:0,pseudoElement:0}),Zy=it(qy),Jy=ve({},mr,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),ex=it(Jy),tx=ve({},mr,{data:0}),bd=it(tx),nx={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},ox={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},rx={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function ax(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):(e=rx[e])?!!t[e]:!1}function Yc(){return ax}var ix=ve({},ya,{key:function(e){if(e.key){var t=nx[e.key]||e.key;if(t!=="Unidentified")return t}return e.type==="keypress"?(e=ti(e),e===13?"Enter":String.fromCharCode(e)):e.type==="keydown"||e.type==="keyup"?ox[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Yc,charCode:function(e){return e.type==="keypress"?ti(e):0},keyCode:function(e){return e.type==="keydown"||e.type==="keyup"?e.keyCode:0},which:function(e){return e.type==="keypress"?ti(e):e.type==="keydown"||e.type==="keyup"?e.keyCode:0}}),sx=it(ix),lx=ve({},qi,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),kd=it(lx),cx=ve({},ya,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Yc}),ux=it(cx),dx=ve({},mr,{propertyName:0,elapsedTime:0,pseudoElement:0}),fx=it(dx),px=ve({},qi,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),mx=it(px),hx=[9,13,27,32],Gc=Jt&&"CompositionEvent"in window,Br=null;Jt&&"documentMode"in document&&(Br=document.documentMode);var vx=Jt&&"TextEvent"in window&&!Br,mm=Jt&&(!Gc||Br&&8<Br&&11>=Br),Nd=" ",Td=!1;function hm(e,t){switch(e){case"keyup":return hx.indexOf(t.keyCode)!==-1;case"keydown":return t.keyCode!==229;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function vm(e){return e=e.detail,typeof e=="object"&&"data"in e?e.data:null}var No=!1;function gx(e,t){switch(e){case"compositionend":return vm(t);case"keypress":return t.which!==32?null:(Td=!0,Nd);case"textInput":return e=t.data,e===Nd&&Td?null:e;default:return null}}function yx(e,t){if(No)return e==="compositionend"||!Gc&&hm(e,t)?(e=pm(),ei=Kc=bn=null,No=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return mm&&t.locale!=="ko"?null:t.data;default:return null}}var xx={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Dd(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t==="input"?!!xx[e.type]:t==="textarea"}function gm(e,t,n,o){Yp(o),t=Pi(t,"onChange"),0<t.length&&(n=new Qc("onChange","change",null,n,o),e.push({event:n,listeners:t}))}var zr=null,Jr=null;function wx(e){Tm(e,0)}function Zi(e){var t=Ao(e);if($p(t))return e}function Sx(e,t){if(e==="change")return t}var ym=!1;if(Jt){var zs;if(Jt){var $s="oninput"in document;if(!$s){var Ad=document.createElement("div");Ad.setAttribute("oninput","return;"),$s=typeof Ad.oninput=="function"}zs=$s}else zs=!1;ym=zs&&(!document.documentMode||9<document.documentMode)}function Rd(){zr&&(zr.detachEvent("onpropertychange",xm),Jr=zr=null)}function xm(e){if(e.propertyName==="value"&&Zi(Jr)){var t=[];gm(t,Jr,e,$c(e)),Zp(wx,t)}}function Cx(e,t,n){e==="focusin"?(Rd(),zr=t,Jr=n,zr.attachEvent("onpropertychange",xm)):e==="focusout"&&Rd()}function Ex(e){if(e==="selectionchange"||e==="keyup"||e==="keydown")return Zi(Jr)}function Px(e,t){if(e==="click")return Zi(t)}function bx(e,t){if(e==="input"||e==="change")return Zi(t)}function kx(e,t){return e===t&&(e!==0||1/e===1/t)||e!==e&&t!==t}var Pt=typeof Object.is=="function"?Object.is:kx;function ea(e,t){if(Pt(e,t))return!0;if(typeof e!="object"||e===null||typeof t!="object"||t===null)return!1;var n=Object.keys(e),o=Object.keys(t);if(n.length!==o.length)return!1;for(o=0;o<n.length;o++){var r=n[o];if(!yl.call(t,r)||!Pt(e[r],t[r]))return!1}return!0}function Id(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function _d(e,t){var n=Id(e);e=0;for(var o;n;){if(n.nodeType===3){if(o=e+n.textContent.length,e<=t&&o>=t)return{node:n,offset:t-e};e=o}e:{for(;n;){if(n.nextSibling){n=n.nextSibling;break e}n=n.parentNode}n=void 0}n=Id(n)}}function wm(e,t){return e&&t?e===t?!0:e&&e.nodeType===3?!1:t&&t.nodeType===3?wm(e,t.parentNode):"contains"in e?e.contains(t):e.compareDocumentPosition?!!(e.compareDocumentPosition(t)&16):!1:!1}function Sm(){for(var e=window,t=gi();t instanceof e.HTMLIFrameElement;){try{var n=typeof t.contentWindow.location.href=="string"}catch{n=!1}if(n)e=t.contentWindow;else break;t=gi(e.document)}return t}function Xc(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&(t==="input"&&(e.type==="text"||e.type==="search"||e.type==="tel"||e.type==="url"||e.type==="password")||t==="textarea"||e.contentEditable==="true")}function Nx(e){var t=Sm(),n=e.focusedElem,o=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&wm(n.ownerDocument.documentElement,n)){if(o!==null&&Xc(n)){if(t=o.start,e=o.end,e===void 0&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if(e=(t=n.ownerDocument||document)&&t.defaultView||window,e.getSelection){e=e.getSelection();var r=n.textContent.length,a=Math.min(o.start,r);o=o.end===void 0?a:Math.min(o.end,r),!e.extend&&a>o&&(r=o,o=a,a=r),r=_d(n,a);var i=_d(n,o);r&&i&&(e.rangeCount!==1||e.anchorNode!==r.node||e.anchorOffset!==r.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&(t=t.createRange(),t.setStart(r.node,r.offset),e.removeAllRanges(),a>o?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}}for(t=[],e=n;e=e.parentNode;)e.nodeType===1&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(typeof n.focus=="function"&&n.focus(),n=0;n<t.length;n++)e=t[n],e.element.scrollLeft=e.left,e.element.scrollTop=e.top}}var Tx=Jt&&"documentMode"in document&&11>=document.documentMode,To=null,Ll=null,$r=null,Fl=!1;function Od(e,t,n){var o=n.window===n?n.document:n.nodeType===9?n:n.ownerDocument;Fl||To==null||To!==gi(o)||(o=To,"selectionStart"in o&&Xc(o)?o={start:o.selectionStart,end:o.selectionEnd}:(o=(o.ownerDocument&&o.ownerDocument.defaultView||window).getSelection(),o={anchorNode:o.anchorNode,anchorOffset:o.anchorOffset,focusNode:o.focusNode,focusOffset:o.focusOffset}),$r&&ea($r,o)||($r=o,o=Pi(Ll,"onSelect"),0<o.length&&(t=new Qc("onSelect","select",null,t,n),e.push({event:t,listeners:o}),t.target=To)))}function _a(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Do={animationend:_a("Animation","AnimationEnd"),animationiteration:_a("Animation","AnimationIteration"),animationstart:_a("Animation","AnimationStart"),transitionend:_a("Transition","TransitionEnd")},Us={},Cm={};Jt&&(Cm=document.createElement("div").style,"AnimationEvent"in window||(delete Do.animationend.animation,delete Do.animationiteration.animation,delete Do.animationstart.animation),"TransitionEvent"in window||delete Do.transitionend.transition);function Ji(e){if(Us[e])return Us[e];if(!Do[e])return e;var t=Do[e],n;for(n in t)if(t.hasOwnProperty(n)&&n in Cm)return Us[e]=t[n];return e}var Em=Ji("animationend"),Pm=Ji("animationiteration"),bm=Ji("animationstart"),km=Ji("transitionend"),Nm=new Map,Md="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Wn(e,t){Nm.set(e,t),po(t,[e])}for(var Vs=0;Vs<Md.length;Vs++){var Ws=Md[Vs],Dx=Ws.toLowerCase(),Ax=Ws[0].toUpperCase()+Ws.slice(1);Wn(Dx,"on"+Ax)}Wn(Em,"onAnimationEnd");Wn(Pm,"onAnimationIteration");Wn(bm,"onAnimationStart");Wn("dblclick","onDoubleClick");Wn("focusin","onFocus");Wn("focusout","onBlur");Wn(km,"onTransitionEnd");or("onMouseEnter",["mouseout","mouseover"]);or("onMouseLeave",["mouseout","mouseover"]);or("onPointerEnter",["pointerout","pointerover"]);or("onPointerLeave",["pointerout","pointerover"]);po("onChange","change click focusin focusout input keydown keyup selectionchange".split(" "));po("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));po("onBeforeInput",["compositionend","keypress","textInput","paste"]);po("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" "));po("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" "));po("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var jr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Rx=new Set("cancel close invalid load scroll toggle".split(" ").concat(jr));function jd(e,t,n){var o=e.type||"unknown-event";e.currentTarget=n,Dy(o,t,void 0,e),e.currentTarget=null}function Tm(e,t){t=(t&4)!==0;for(var n=0;n<e.length;n++){var o=e[n],r=o.event;o=o.listeners;e:{var a=void 0;if(t)for(var i=o.length-1;0<=i;i--){var s=o[i],l=s.instance,c=s.currentTarget;if(s=s.listener,l!==a&&r.isPropagationStopped())break e;jd(r,s,c),a=l}else for(i=0;i<o.length;i++){if(s=o[i],l=s.instance,c=s.currentTarget,s=s.listener,l!==a&&r.isPropagationStopped())break e;jd(r,s,c),a=l}}}if(xi)throw e=_l,xi=!1,_l=null,e}function de(e,t){var n=t[Vl];n===void 0&&(n=t[Vl]=new Set);var o=e+"__bubble";n.has(o)||(Dm(t,e,2,!1),n.add(o))}function Hs(e,t,n){var o=0;t&&(o|=4),Dm(n,e,o,t)}var Oa="_reactListening"+Math.random().toString(36).slice(2);function ta(e){if(!e[Oa]){e[Oa]=!0,jp.forEach(function(n){n!=="selectionchange"&&(Rx.has(n)||Hs(n,!1,e),Hs(n,!0,e))});var t=e.nodeType===9?e:e.ownerDocument;t===null||t[Oa]||(t[Oa]=!0,Hs("selectionchange",!1,t))}}function Dm(e,t,n,o){switch(fm(t)){case 1:var r=Hy;break;case 4:r=Ky;break;default:r=Hc}n=r.bind(null,t,n,e),r=void 0,!Il||t!=="touchstart"&&t!=="touchmove"&&t!=="wheel"||(r=!0),o?r!==void 0?e.addEventListener(t,n,{capture:!0,passive:r}):e.addEventListener(t,n,!0):r!==void 0?e.addEventListener(t,n,{passive:r}):e.addEventListener(t,n,!1)}function Ks(e,t,n,o,r){var a=o;if(!(t&1)&&!(t&2)&&o!==null)e:for(;;){if(o===null)return;var i=o.tag;if(i===3||i===4){var s=o.stateNode.containerInfo;if(s===r||s.nodeType===8&&s.parentNode===r)break;if(i===4)for(i=o.return;i!==null;){var l=i.tag;if((l===3||l===4)&&(l=i.stateNode.containerInfo,l===r||l.nodeType===8&&l.parentNode===r))return;i=i.return}for(;s!==null;){if(i=Xn(s),i===null)return;if(l=i.tag,l===5||l===6){o=a=i;continue e}s=s.parentNode}}o=o.return}Zp(function(){var c=a,f=$c(n),d=[];e:{var u=Nm.get(e);if(u!==void 0){var y=Qc,S=e;switch(e){case"keypress":if(ti(n)===0)break e;case"keydown":case"keyup":y=sx;break;case"focusin":S="focus",y=Bs;break;case"focusout":S="blur",y=Bs;break;case"beforeblur":case"afterblur":y=Bs;break;case"click":if(n.button===2)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":y=Pd;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":y=Gy;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":y=ux;break;case Em:case Pm:case bm:y=Zy;break;case km:y=fx;break;case"scroll":y=Qy;break;case"wheel":y=mx;break;case"copy":case"cut":case"paste":y=ex;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":y=kd}var h=(t&4)!==0,x=!h&&e==="scroll",m=h?u!==null?u+"Capture":null:u;h=[];for(var v=c,g;v!==null;){g=v;var C=g.stateNode;if(g.tag===5&&C!==null&&(g=C,m!==null&&(C=Gr(v,m),C!=null&&h.push(na(v,C,g)))),x)break;v=v.return}0<h.length&&(u=new y(u,S,null,n,f),d.push({event:u,listeners:h}))}}if(!(t&7)){e:{if(u=e==="mouseover"||e==="pointerover",y=e==="mouseout"||e==="pointerout",u&&n!==Al&&(S=n.relatedTarget||n.fromElement)&&(Xn(S)||S[en]))break e;if((y||u)&&(u=f.window===f?f:(u=f.ownerDocument)?u.defaultView||u.parentWindow:window,y?(S=n.relatedTarget||n.toElement,y=c,S=S?Xn(S):null,S!==null&&(x=mo(S),S!==x||S.tag!==5&&S.tag!==6)&&(S=null)):(y=null,S=c),y!==S)){if(h=Pd,C="onMouseLeave",m="onMouseEnter",v="mouse",(e==="pointerout"||e==="pointerover")&&(h=kd,C="onPointerLeave",m="onPointerEnter",v="pointer"),x=y==null?u:Ao(y),g=S==null?u:Ao(S),u=new h(C,v+"leave",y,n,f),u.target=x,u.relatedTarget=g,C=null,Xn(f)===c&&(h=new h(m,v+"enter",S,n,f),h.target=g,h.relatedTarget=x,C=h),x=C,y&&S)t:{for(h=y,m=S,v=0,g=h;g;g=wo(g))v++;for(g=0,C=m;C;C=wo(C))g++;for(;0<v-g;)h=wo(h),v--;for(;0<g-v;)m=wo(m),g--;for(;v--;){if(h===m||m!==null&&h===m.alternate)break t;h=wo(h),m=wo(m)}h=null}else h=null;y!==null&&Ld(d,u,y,h,!1),S!==null&&x!==null&&Ld(d,x,S,h,!0)}}e:{if(u=c?Ao(c):window,y=u.nodeName&&u.nodeName.toLowerCase(),y==="select"||y==="input"&&u.type==="file")var E=Sx;else if(Dd(u))if(ym)E=bx;else{E=Ex;var P=Cx}else(y=u.nodeName)&&y.toLowerCase()==="input"&&(u.type==="checkbox"||u.type==="radio")&&(E=Px);if(E&&(E=E(e,c))){gm(d,E,n,f);break e}P&&P(e,u,c),e==="focusout"&&(P=u._wrapperState)&&P.controlled&&u.type==="number"&&bl(u,"number",u.value)}switch(P=c?Ao(c):window,e){case"focusin":(Dd(P)||P.contentEditable==="true")&&(To=P,Ll=c,$r=null);break;case"focusout":$r=Ll=To=null;break;case"mousedown":Fl=!0;break;case"contextmenu":case"mouseup":case"dragend":Fl=!1,Od(d,n,f);break;case"selectionchange":if(Tx)break;case"keydown":case"keyup":Od(d,n,f)}var k;if(Gc)e:{switch(e){case"compositionstart":var N="onCompositionStart";break e;case"compositionend":N="onCompositionEnd";break e;case"compositionupdate":N="onCompositionUpdate";break e}N=void 0}else No?hm(e,n)&&(N="onCompositionEnd"):e==="keydown"&&n.keyCode===229&&(N="onCompositionStart");N&&(mm&&n.locale!=="ko"&&(No||N!=="onCompositionStart"?N==="onCompositionEnd"&&No&&(k=pm()):(bn=f,Kc="value"in bn?bn.value:bn.textContent,No=!0)),P=Pi(c,N),0<P.length&&(N=new bd(N,e,null,n,f),d.push({event:N,listeners:P}),k?N.data=k:(k=vm(n),k!==null&&(N.data=k)))),(k=vx?gx(e,n):yx(e,n))&&(c=Pi(c,"onBeforeInput"),0<c.length&&(f=new bd("onBeforeInput","beforeinput",null,n,f),d.push({event:f,listeners:c}),f.data=k))}Tm(d,t)})}function na(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Pi(e,t){for(var n=t+"Capture",o=[];e!==null;){var r=e,a=r.stateNode;r.tag===5&&a!==null&&(r=a,a=Gr(e,n),a!=null&&o.unshift(na(e,a,r)),a=Gr(e,t),a!=null&&o.push(na(e,a,r))),e=e.return}return o}function wo(e){if(e===null)return null;do e=e.return;while(e&&e.tag!==5);return e||null}function Ld(e,t,n,o,r){for(var a=t._reactName,i=[];n!==null&&n!==o;){var s=n,l=s.alternate,c=s.stateNode;if(l!==null&&l===o)break;s.tag===5&&c!==null&&(s=c,r?(l=Gr(n,a),l!=null&&i.unshift(na(n,l,s))):r||(l=Gr(n,a),l!=null&&i.push(na(n,l,s)))),n=n.return}i.length!==0&&e.push({event:t,listeners:i})}var Ix=/\r\n?/g,_x=/\u0000|\uFFFD/g;function Fd(e){return(typeof e=="string"?e:""+e).replace(Ix,`
`).replace(_x,"")}function Ma(e,t,n){if(t=Fd(t),Fd(e)!==t&&n)throw Error(A(425))}function bi(){}var Bl=null,zl=null;function $l(e,t){return e==="textarea"||e==="noscript"||typeof t.children=="string"||typeof t.children=="number"||typeof t.dangerouslySetInnerHTML=="object"&&t.dangerouslySetInnerHTML!==null&&t.dangerouslySetInnerHTML.__html!=null}var Ul=typeof setTimeout=="function"?setTimeout:void 0,Ox=typeof clearTimeout=="function"?clearTimeout:void 0,Bd=typeof Promise=="function"?Promise:void 0,Mx=typeof queueMicrotask=="function"?queueMicrotask:typeof Bd<"u"?function(e){return Bd.resolve(null).then(e).catch(jx)}:Ul;function jx(e){setTimeout(function(){throw e})}function Qs(e,t){var n=t,o=0;do{var r=n.nextSibling;if(e.removeChild(n),r&&r.nodeType===8)if(n=r.data,n==="/$"){if(o===0){e.removeChild(r),Zr(t);return}o--}else n!=="$"&&n!=="$?"&&n!=="$!"||o++;n=r}while(n);Zr(t)}function In(e){for(;e!=null;e=e.nextSibling){var t=e.nodeType;if(t===1||t===3)break;if(t===8){if(t=e.data,t==="$"||t==="$!"||t==="$?")break;if(t==="/$")return null}}return e}function zd(e){e=e.previousSibling;for(var t=0;e;){if(e.nodeType===8){var n=e.data;if(n==="$"||n==="$!"||n==="$?"){if(t===0)return e;t--}else n==="/$"&&t++}e=e.previousSibling}return null}var hr=Math.random().toString(36).slice(2),Bt="__reactFiber$"+hr,oa="__reactProps$"+hr,en="__reactContainer$"+hr,Vl="__reactEvents$"+hr,Lx="__reactListeners$"+hr,Fx="__reactHandles$"+hr;function Xn(e){var t=e[Bt];if(t)return t;for(var n=e.parentNode;n;){if(t=n[en]||n[Bt]){if(n=t.alternate,t.child!==null||n!==null&&n.child!==null)for(e=zd(e);e!==null;){if(n=e[Bt])return n;e=zd(e)}return t}e=n,n=e.parentNode}return null}function xa(e){return e=e[Bt]||e[en],!e||e.tag!==5&&e.tag!==6&&e.tag!==13&&e.tag!==3?null:e}function Ao(e){if(e.tag===5||e.tag===6)return e.stateNode;throw Error(A(33))}function es(e){return e[oa]||null}var Wl=[],Ro=-1;function Hn(e){return{current:e}}function fe(e){0>Ro||(e.current=Wl[Ro],Wl[Ro]=null,Ro--)}function se(e,t){Ro++,Wl[Ro]=e.current,e.current=t}var Fn={},Me=Hn(Fn),Ke=Hn(!1),ao=Fn;function rr(e,t){var n=e.type.contextTypes;if(!n)return Fn;var o=e.stateNode;if(o&&o.__reactInternalMemoizedUnmaskedChildContext===t)return o.__reactInternalMemoizedMaskedChildContext;var r={},a;for(a in n)r[a]=t[a];return o&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=r),r}function Qe(e){return e=e.childContextTypes,e!=null}function ki(){fe(Ke),fe(Me)}function $d(e,t,n){if(Me.current!==Fn)throw Error(A(168));se(Me,t),se(Ke,n)}function Am(e,t,n){var o=e.stateNode;if(t=t.childContextTypes,typeof o.getChildContext!="function")return n;o=o.getChildContext();for(var r in o)if(!(r in t))throw Error(A(108,Cy(e)||"Unknown",r));return ve({},n,o)}function Ni(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Fn,ao=Me.current,se(Me,e),se(Ke,Ke.current),!0}function Ud(e,t,n){var o=e.stateNode;if(!o)throw Error(A(169));n?(e=Am(e,t,ao),o.__reactInternalMemoizedMergedChildContext=e,fe(Ke),fe(Me),se(Me,e)):fe(Ke),se(Ke,n)}var Gt=null,ts=!1,Ys=!1;function Rm(e){Gt===null?Gt=[e]:Gt.push(e)}function Bx(e){ts=!0,Rm(e)}function Kn(){if(!Ys&&Gt!==null){Ys=!0;var e=0,t=ne;try{var n=Gt;for(ne=1;e<n.length;e++){var o=n[e];do o=o(!0);while(o!==null)}Gt=null,ts=!1}catch(r){throw Gt!==null&&(Gt=Gt.slice(e+1)),nm(Uc,Kn),r}finally{ne=t,Ys=!1}}return null}var Io=[],_o=0,Ti=null,Di=0,lt=[],ct=0,io=null,Xt=1,qt="";function Yn(e,t){Io[_o++]=Di,Io[_o++]=Ti,Ti=e,Di=t}function Im(e,t,n){lt[ct++]=Xt,lt[ct++]=qt,lt[ct++]=io,io=e;var o=Xt;e=qt;var r=32-Ct(o)-1;o&=~(1<<r),n+=1;var a=32-Ct(t)+r;if(30<a){var i=r-r%5;a=(o&(1<<i)-1).toString(32),o>>=i,r-=i,Xt=1<<32-Ct(t)+r|n<<r|o,qt=a+e}else Xt=1<<a|n<<r|o,qt=e}function qc(e){e.return!==null&&(Yn(e,1),Im(e,1,0))}function Zc(e){for(;e===Ti;)Ti=Io[--_o],Io[_o]=null,Di=Io[--_o],Io[_o]=null;for(;e===io;)io=lt[--ct],lt[ct]=null,qt=lt[--ct],lt[ct]=null,Xt=lt[--ct],lt[ct]=null}var nt=null,tt=null,pe=!1,St=null;function _m(e,t){var n=ut(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,t=e.deletions,t===null?(e.deletions=[n],e.flags|=16):t.push(n)}function Vd(e,t){switch(e.tag){case 5:var n=e.type;return t=t.nodeType!==1||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t,t!==null?(e.stateNode=t,nt=e,tt=In(t.firstChild),!0):!1;case 6:return t=e.pendingProps===""||t.nodeType!==3?null:t,t!==null?(e.stateNode=t,nt=e,tt=null,!0):!1;case 13:return t=t.nodeType!==8?null:t,t!==null?(n=io!==null?{id:Xt,overflow:qt}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},n=ut(18,null,null,0),n.stateNode=t,n.return=e,e.child=n,nt=e,tt=null,!0):!1;default:return!1}}function Hl(e){return(e.mode&1)!==0&&(e.flags&128)===0}function Kl(e){if(pe){var t=tt;if(t){var n=t;if(!Vd(e,t)){if(Hl(e))throw Error(A(418));t=In(n.nextSibling);var o=nt;t&&Vd(e,t)?_m(o,n):(e.flags=e.flags&-4097|2,pe=!1,nt=e)}}else{if(Hl(e))throw Error(A(418));e.flags=e.flags&-4097|2,pe=!1,nt=e}}}function Wd(e){for(e=e.return;e!==null&&e.tag!==5&&e.tag!==3&&e.tag!==13;)e=e.return;nt=e}function ja(e){if(e!==nt)return!1;if(!pe)return Wd(e),pe=!0,!1;var t;if((t=e.tag!==3)&&!(t=e.tag!==5)&&(t=e.type,t=t!=="head"&&t!=="body"&&!$l(e.type,e.memoizedProps)),t&&(t=tt)){if(Hl(e))throw Om(),Error(A(418));for(;t;)_m(e,t),t=In(t.nextSibling)}if(Wd(e),e.tag===13){if(e=e.memoizedState,e=e!==null?e.dehydrated:null,!e)throw Error(A(317));e:{for(e=e.nextSibling,t=0;e;){if(e.nodeType===8){var n=e.data;if(n==="/$"){if(t===0){tt=In(e.nextSibling);break e}t--}else n!=="$"&&n!=="$!"&&n!=="$?"||t++}e=e.nextSibling}tt=null}}else tt=nt?In(e.stateNode.nextSibling):null;return!0}function Om(){for(var e=tt;e;)e=In(e.nextSibling)}function ar(){tt=nt=null,pe=!1}function Jc(e){St===null?St=[e]:St.push(e)}var zx=an.ReactCurrentBatchConfig;function Tr(e,t,n){if(e=n.ref,e!==null&&typeof e!="function"&&typeof e!="object"){if(n._owner){if(n=n._owner,n){if(n.tag!==1)throw Error(A(309));var o=n.stateNode}if(!o)throw Error(A(147,e));var r=o,a=""+e;return t!==null&&t.ref!==null&&typeof t.ref=="function"&&t.ref._stringRef===a?t.ref:(t=function(i){var s=r.refs;i===null?delete s[a]:s[a]=i},t._stringRef=a,t)}if(typeof e!="string")throw Error(A(284));if(!n._owner)throw Error(A(290,e))}return e}function La(e,t){throw e=Object.prototype.toString.call(t),Error(A(31,e==="[object Object]"?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Hd(e){var t=e._init;return t(e._payload)}function Mm(e){function t(m,v){if(e){var g=m.deletions;g===null?(m.deletions=[v],m.flags|=16):g.push(v)}}function n(m,v){if(!e)return null;for(;v!==null;)t(m,v),v=v.sibling;return null}function o(m,v){for(m=new Map;v!==null;)v.key!==null?m.set(v.key,v):m.set(v.index,v),v=v.sibling;return m}function r(m,v){return m=jn(m,v),m.index=0,m.sibling=null,m}function a(m,v,g){return m.index=g,e?(g=m.alternate,g!==null?(g=g.index,g<v?(m.flags|=2,v):g):(m.flags|=2,v)):(m.flags|=1048576,v)}function i(m){return e&&m.alternate===null&&(m.flags|=2),m}function s(m,v,g,C){return v===null||v.tag!==6?(v=tl(g,m.mode,C),v.return=m,v):(v=r(v,g),v.return=m,v)}function l(m,v,g,C){var E=g.type;return E===ko?f(m,v,g.props.children,C,g.key):v!==null&&(v.elementType===E||typeof E=="object"&&E!==null&&E.$$typeof===vn&&Hd(E)===v.type)?(C=r(v,g.props),C.ref=Tr(m,v,g),C.return=m,C):(C=li(g.type,g.key,g.props,null,m.mode,C),C.ref=Tr(m,v,g),C.return=m,C)}function c(m,v,g,C){return v===null||v.tag!==4||v.stateNode.containerInfo!==g.containerInfo||v.stateNode.implementation!==g.implementation?(v=nl(g,m.mode,C),v.return=m,v):(v=r(v,g.children||[]),v.return=m,v)}function f(m,v,g,C,E){return v===null||v.tag!==7?(v=ro(g,m.mode,C,E),v.return=m,v):(v=r(v,g),v.return=m,v)}function d(m,v,g){if(typeof v=="string"&&v!==""||typeof v=="number")return v=tl(""+v,m.mode,g),v.return=m,v;if(typeof v=="object"&&v!==null){switch(v.$$typeof){case ka:return g=li(v.type,v.key,v.props,null,m.mode,g),g.ref=Tr(m,null,v),g.return=m,g;case bo:return v=nl(v,m.mode,g),v.return=m,v;case vn:var C=v._init;return d(m,C(v._payload),g)}if(Or(v)||Er(v))return v=ro(v,m.mode,g,null),v.return=m,v;La(m,v)}return null}function u(m,v,g,C){var E=v!==null?v.key:null;if(typeof g=="string"&&g!==""||typeof g=="number")return E!==null?null:s(m,v,""+g,C);if(typeof g=="object"&&g!==null){switch(g.$$typeof){case ka:return g.key===E?l(m,v,g,C):null;case bo:return g.key===E?c(m,v,g,C):null;case vn:return E=g._init,u(m,v,E(g._payload),C)}if(Or(g)||Er(g))return E!==null?null:f(m,v,g,C,null);La(m,g)}return null}function y(m,v,g,C,E){if(typeof C=="string"&&C!==""||typeof C=="number")return m=m.get(g)||null,s(v,m,""+C,E);if(typeof C=="object"&&C!==null){switch(C.$$typeof){case ka:return m=m.get(C.key===null?g:C.key)||null,l(v,m,C,E);case bo:return m=m.get(C.key===null?g:C.key)||null,c(v,m,C,E);case vn:var P=C._init;return y(m,v,g,P(C._payload),E)}if(Or(C)||Er(C))return m=m.get(g)||null,f(v,m,C,E,null);La(v,C)}return null}function S(m,v,g,C){for(var E=null,P=null,k=v,N=v=0,j=null;k!==null&&N<g.length;N++){k.index>N?(j=k,k=null):j=k.sibling;var M=u(m,k,g[N],C);if(M===null){k===null&&(k=j);break}e&&k&&M.alternate===null&&t(m,k),v=a(M,v,N),P===null?E=M:P.sibling=M,P=M,k=j}if(N===g.length)return n(m,k),pe&&Yn(m,N),E;if(k===null){for(;N<g.length;N++)k=d(m,g[N],C),k!==null&&(v=a(k,v,N),P===null?E=k:P.sibling=k,P=k);return pe&&Yn(m,N),E}for(k=o(m,k);N<g.length;N++)j=y(k,m,N,g[N],C),j!==null&&(e&&j.alternate!==null&&k.delete(j.key===null?N:j.key),v=a(j,v,N),P===null?E=j:P.sibling=j,P=j);return e&&k.forEach(function(I){return t(m,I)}),pe&&Yn(m,N),E}function h(m,v,g,C){var E=Er(g);if(typeof E!="function")throw Error(A(150));if(g=E.call(g),g==null)throw Error(A(151));for(var P=E=null,k=v,N=v=0,j=null,M=g.next();k!==null&&!M.done;N++,M=g.next()){k.index>N?(j=k,k=null):j=k.sibling;var I=u(m,k,M.value,C);if(I===null){k===null&&(k=j);break}e&&k&&I.alternate===null&&t(m,k),v=a(I,v,N),P===null?E=I:P.sibling=I,P=I,k=j}if(M.done)return n(m,k),pe&&Yn(m,N),E;if(k===null){for(;!M.done;N++,M=g.next())M=d(m,M.value,C),M!==null&&(v=a(M,v,N),P===null?E=M:P.sibling=M,P=M);return pe&&Yn(m,N),E}for(k=o(m,k);!M.done;N++,M=g.next())M=y(k,m,N,M.value,C),M!==null&&(e&&M.alternate!==null&&k.delete(M.key===null?N:M.key),v=a(M,v,N),P===null?E=M:P.sibling=M,P=M);return e&&k.forEach(function(T){return t(m,T)}),pe&&Yn(m,N),E}function x(m,v,g,C){if(typeof g=="object"&&g!==null&&g.type===ko&&g.key===null&&(g=g.props.children),typeof g=="object"&&g!==null){switch(g.$$typeof){case ka:e:{for(var E=g.key,P=v;P!==null;){if(P.key===E){if(E=g.type,E===ko){if(P.tag===7){n(m,P.sibling),v=r(P,g.props.children),v.return=m,m=v;break e}}else if(P.elementType===E||typeof E=="object"&&E!==null&&E.$$typeof===vn&&Hd(E)===P.type){n(m,P.sibling),v=r(P,g.props),v.ref=Tr(m,P,g),v.return=m,m=v;break e}n(m,P);break}else t(m,P);P=P.sibling}g.type===ko?(v=ro(g.props.children,m.mode,C,g.key),v.return=m,m=v):(C=li(g.type,g.key,g.props,null,m.mode,C),C.ref=Tr(m,v,g),C.return=m,m=C)}return i(m);case bo:e:{for(P=g.key;v!==null;){if(v.key===P)if(v.tag===4&&v.stateNode.containerInfo===g.containerInfo&&v.stateNode.implementation===g.implementation){n(m,v.sibling),v=r(v,g.children||[]),v.return=m,m=v;break e}else{n(m,v);break}else t(m,v);v=v.sibling}v=nl(g,m.mode,C),v.return=m,m=v}return i(m);case vn:return P=g._init,x(m,v,P(g._payload),C)}if(Or(g))return S(m,v,g,C);if(Er(g))return h(m,v,g,C);La(m,g)}return typeof g=="string"&&g!==""||typeof g=="number"?(g=""+g,v!==null&&v.tag===6?(n(m,v.sibling),v=r(v,g),v.return=m,m=v):(n(m,v),v=tl(g,m.mode,C),v.return=m,m=v),i(m)):n(m,v)}return x}var ir=Mm(!0),jm=Mm(!1),Ai=Hn(null),Ri=null,Oo=null,eu=null;function tu(){eu=Oo=Ri=null}function nu(e){var t=Ai.current;fe(Ai),e._currentValue=t}function Ql(e,t,n){for(;e!==null;){var o=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,o!==null&&(o.childLanes|=t)):o!==null&&(o.childLanes&t)!==t&&(o.childLanes|=t),e===n)break;e=e.return}}function $o(e,t){Ri=e,eu=Oo=null,e=e.dependencies,e!==null&&e.firstContext!==null&&(e.lanes&t&&(He=!0),e.firstContext=null)}function ft(e){var t=e._currentValue;if(eu!==e)if(e={context:e,memoizedValue:t,next:null},Oo===null){if(Ri===null)throw Error(A(308));Oo=e,Ri.dependencies={lanes:0,firstContext:e}}else Oo=Oo.next=e;return t}var qn=null;function ou(e){qn===null?qn=[e]:qn.push(e)}function Lm(e,t,n,o){var r=t.interleaved;return r===null?(n.next=n,ou(t)):(n.next=r.next,r.next=n),t.interleaved=n,tn(e,o)}function tn(e,t){e.lanes|=t;var n=e.alternate;for(n!==null&&(n.lanes|=t),n=e,e=e.return;e!==null;)e.childLanes|=t,n=e.alternate,n!==null&&(n.childLanes|=t),n=e,e=e.return;return n.tag===3?n.stateNode:null}var gn=!1;function ru(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Fm(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Zt(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function _n(e,t,n){var o=e.updateQueue;if(o===null)return null;if(o=o.shared,Z&2){var r=o.pending;return r===null?t.next=t:(t.next=r.next,r.next=t),o.pending=t,tn(e,n)}return r=o.interleaved,r===null?(t.next=t,ou(o)):(t.next=r.next,r.next=t),o.interleaved=t,tn(e,n)}function ni(e,t,n){if(t=t.updateQueue,t!==null&&(t=t.shared,(n&4194240)!==0)){var o=t.lanes;o&=e.pendingLanes,n|=o,t.lanes=n,Vc(e,n)}}function Kd(e,t){var n=e.updateQueue,o=e.alternate;if(o!==null&&(o=o.updateQueue,n===o)){var r=null,a=null;if(n=n.firstBaseUpdate,n!==null){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};a===null?r=a=i:a=a.next=i,n=n.next}while(n!==null);a===null?r=a=t:a=a.next=t}else r=a=t;n={baseState:o.baseState,firstBaseUpdate:r,lastBaseUpdate:a,shared:o.shared,effects:o.effects},e.updateQueue=n;return}e=n.lastBaseUpdate,e===null?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Ii(e,t,n,o){var r=e.updateQueue;gn=!1;var a=r.firstBaseUpdate,i=r.lastBaseUpdate,s=r.shared.pending;if(s!==null){r.shared.pending=null;var l=s,c=l.next;l.next=null,i===null?a=c:i.next=c,i=l;var f=e.alternate;f!==null&&(f=f.updateQueue,s=f.lastBaseUpdate,s!==i&&(s===null?f.firstBaseUpdate=c:s.next=c,f.lastBaseUpdate=l))}if(a!==null){var d=r.baseState;i=0,f=c=l=null,s=a;do{var u=s.lane,y=s.eventTime;if((o&u)===u){f!==null&&(f=f.next={eventTime:y,lane:0,tag:s.tag,payload:s.payload,callback:s.callback,next:null});e:{var S=e,h=s;switch(u=t,y=n,h.tag){case 1:if(S=h.payload,typeof S=="function"){d=S.call(y,d,u);break e}d=S;break e;case 3:S.flags=S.flags&-65537|128;case 0:if(S=h.payload,u=typeof S=="function"?S.call(y,d,u):S,u==null)break e;d=ve({},d,u);break e;case 2:gn=!0}}s.callback!==null&&s.lane!==0&&(e.flags|=64,u=r.effects,u===null?r.effects=[s]:u.push(s))}else y={eventTime:y,lane:u,tag:s.tag,payload:s.payload,callback:s.callback,next:null},f===null?(c=f=y,l=d):f=f.next=y,i|=u;if(s=s.next,s===null){if(s=r.shared.pending,s===null)break;u=s,s=u.next,u.next=null,r.lastBaseUpdate=u,r.shared.pending=null}}while(!0);if(f===null&&(l=d),r.baseState=l,r.firstBaseUpdate=c,r.lastBaseUpdate=f,t=r.shared.interleaved,t!==null){r=t;do i|=r.lane,r=r.next;while(r!==t)}else a===null&&(r.shared.lanes=0);lo|=i,e.lanes=i,e.memoizedState=d}}function Qd(e,t,n){if(e=t.effects,t.effects=null,e!==null)for(t=0;t<e.length;t++){var o=e[t],r=o.callback;if(r!==null){if(o.callback=null,o=n,typeof r!="function")throw Error(A(191,r));r.call(o)}}}var wa={},Ut=Hn(wa),ra=Hn(wa),aa=Hn(wa);function Zn(e){if(e===wa)throw Error(A(174));return e}function au(e,t){switch(se(aa,t),se(ra,e),se(Ut,wa),e=t.nodeType,e){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Nl(null,"");break;default:e=e===8?t.parentNode:t,t=e.namespaceURI||null,e=e.tagName,t=Nl(t,e)}fe(Ut),se(Ut,t)}function sr(){fe(Ut),fe(ra),fe(aa)}function Bm(e){Zn(aa.current);var t=Zn(Ut.current),n=Nl(t,e.type);t!==n&&(se(ra,e),se(Ut,n))}function iu(e){ra.current===e&&(fe(Ut),fe(ra))}var me=Hn(0);function _i(e){for(var t=e;t!==null;){if(t.tag===13){var n=t.memoizedState;if(n!==null&&(n=n.dehydrated,n===null||n.data==="$?"||n.data==="$!"))return t}else if(t.tag===19&&t.memoizedProps.revealOrder!==void 0){if(t.flags&128)return t}else if(t.child!==null){t.child.return=t,t=t.child;continue}if(t===e)break;for(;t.sibling===null;){if(t.return===null||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Gs=[];function su(){for(var e=0;e<Gs.length;e++)Gs[e]._workInProgressVersionPrimary=null;Gs.length=0}var oi=an.ReactCurrentDispatcher,Xs=an.ReactCurrentBatchConfig,so=0,he=null,Ce=null,Pe=null,Oi=!1,Ur=!1,ia=0,$x=0;function Re(){throw Error(A(321))}function lu(e,t){if(t===null)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Pt(e[n],t[n]))return!1;return!0}function cu(e,t,n,o,r,a){if(so=a,he=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,oi.current=e===null||e.memoizedState===null?Hx:Kx,e=n(o,r),Ur){a=0;do{if(Ur=!1,ia=0,25<=a)throw Error(A(301));a+=1,Pe=Ce=null,t.updateQueue=null,oi.current=Qx,e=n(o,r)}while(Ur)}if(oi.current=Mi,t=Ce!==null&&Ce.next!==null,so=0,Pe=Ce=he=null,Oi=!1,t)throw Error(A(300));return e}function uu(){var e=ia!==0;return ia=0,e}function Ot(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return Pe===null?he.memoizedState=Pe=e:Pe=Pe.next=e,Pe}function pt(){if(Ce===null){var e=he.alternate;e=e!==null?e.memoizedState:null}else e=Ce.next;var t=Pe===null?he.memoizedState:Pe.next;if(t!==null)Pe=t,Ce=e;else{if(e===null)throw Error(A(310));Ce=e,e={memoizedState:Ce.memoizedState,baseState:Ce.baseState,baseQueue:Ce.baseQueue,queue:Ce.queue,next:null},Pe===null?he.memoizedState=Pe=e:Pe=Pe.next=e}return Pe}function sa(e,t){return typeof t=="function"?t(e):t}function qs(e){var t=pt(),n=t.queue;if(n===null)throw Error(A(311));n.lastRenderedReducer=e;var o=Ce,r=o.baseQueue,a=n.pending;if(a!==null){if(r!==null){var i=r.next;r.next=a.next,a.next=i}o.baseQueue=r=a,n.pending=null}if(r!==null){a=r.next,o=o.baseState;var s=i=null,l=null,c=a;do{var f=c.lane;if((so&f)===f)l!==null&&(l=l.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),o=c.hasEagerState?c.eagerState:e(o,c.action);else{var d={lane:f,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};l===null?(s=l=d,i=o):l=l.next=d,he.lanes|=f,lo|=f}c=c.next}while(c!==null&&c!==a);l===null?i=o:l.next=s,Pt(o,t.memoizedState)||(He=!0),t.memoizedState=o,t.baseState=i,t.baseQueue=l,n.lastRenderedState=o}if(e=n.interleaved,e!==null){r=e;do a=r.lane,he.lanes|=a,lo|=a,r=r.next;while(r!==e)}else r===null&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Zs(e){var t=pt(),n=t.queue;if(n===null)throw Error(A(311));n.lastRenderedReducer=e;var o=n.dispatch,r=n.pending,a=t.memoizedState;if(r!==null){n.pending=null;var i=r=r.next;do a=e(a,i.action),i=i.next;while(i!==r);Pt(a,t.memoizedState)||(He=!0),t.memoizedState=a,t.baseQueue===null&&(t.baseState=a),n.lastRenderedState=a}return[a,o]}function zm(){}function $m(e,t){var n=he,o=pt(),r=t(),a=!Pt(o.memoizedState,r);if(a&&(o.memoizedState=r,He=!0),o=o.queue,du(Wm.bind(null,n,o,e),[e]),o.getSnapshot!==t||a||Pe!==null&&Pe.memoizedState.tag&1){if(n.flags|=2048,la(9,Vm.bind(null,n,o,r,t),void 0,null),be===null)throw Error(A(349));so&30||Um(n,t,r)}return r}function Um(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},t=he.updateQueue,t===null?(t={lastEffect:null,stores:null},he.updateQueue=t,t.stores=[e]):(n=t.stores,n===null?t.stores=[e]:n.push(e))}function Vm(e,t,n,o){t.value=n,t.getSnapshot=o,Hm(t)&&Km(e)}function Wm(e,t,n){return n(function(){Hm(t)&&Km(e)})}function Hm(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!Pt(e,n)}catch{return!0}}function Km(e){var t=tn(e,1);t!==null&&Et(t,e,1,-1)}function Yd(e){var t=Ot();return typeof e=="function"&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:sa,lastRenderedState:e},t.queue=e,e=e.dispatch=Wx.bind(null,he,e),[t.memoizedState,e]}function la(e,t,n,o){return e={tag:e,create:t,destroy:n,deps:o,next:null},t=he.updateQueue,t===null?(t={lastEffect:null,stores:null},he.updateQueue=t,t.lastEffect=e.next=e):(n=t.lastEffect,n===null?t.lastEffect=e.next=e:(o=n.next,n.next=e,e.next=o,t.lastEffect=e)),e}function Qm(){return pt().memoizedState}function ri(e,t,n,o){var r=Ot();he.flags|=e,r.memoizedState=la(1|t,n,void 0,o===void 0?null:o)}function ns(e,t,n,o){var r=pt();o=o===void 0?null:o;var a=void 0;if(Ce!==null){var i=Ce.memoizedState;if(a=i.destroy,o!==null&&lu(o,i.deps)){r.memoizedState=la(t,n,a,o);return}}he.flags|=e,r.memoizedState=la(1|t,n,a,o)}function Gd(e,t){return ri(8390656,8,e,t)}function du(e,t){return ns(2048,8,e,t)}function Ym(e,t){return ns(4,2,e,t)}function Gm(e,t){return ns(4,4,e,t)}function Xm(e,t){if(typeof t=="function")return e=e(),t(e),function(){t(null)};if(t!=null)return e=e(),t.current=e,function(){t.current=null}}function qm(e,t,n){return n=n!=null?n.concat([e]):null,ns(4,4,Xm.bind(null,t,e),n)}function fu(){}function Zm(e,t){var n=pt();t=t===void 0?null:t;var o=n.memoizedState;return o!==null&&t!==null&&lu(t,o[1])?o[0]:(n.memoizedState=[e,t],e)}function Jm(e,t){var n=pt();t=t===void 0?null:t;var o=n.memoizedState;return o!==null&&t!==null&&lu(t,o[1])?o[0]:(e=e(),n.memoizedState=[e,t],e)}function eh(e,t,n){return so&21?(Pt(n,t)||(n=am(),he.lanes|=n,lo|=n,e.baseState=!0),t):(e.baseState&&(e.baseState=!1,He=!0),e.memoizedState=n)}function Ux(e,t){var n=ne;ne=n!==0&&4>n?n:4,e(!0);var o=Xs.transition;Xs.transition={};try{e(!1),t()}finally{ne=n,Xs.transition=o}}function th(){return pt().memoizedState}function Vx(e,t,n){var o=Mn(e);if(n={lane:o,action:n,hasEagerState:!1,eagerState:null,next:null},nh(e))oh(t,n);else if(n=Lm(e,t,n,o),n!==null){var r=ze();Et(n,e,o,r),rh(n,t,o)}}function Wx(e,t,n){var o=Mn(e),r={lane:o,action:n,hasEagerState:!1,eagerState:null,next:null};if(nh(e))oh(t,r);else{var a=e.alternate;if(e.lanes===0&&(a===null||a.lanes===0)&&(a=t.lastRenderedReducer,a!==null))try{var i=t.lastRenderedState,s=a(i,n);if(r.hasEagerState=!0,r.eagerState=s,Pt(s,i)){var l=t.interleaved;l===null?(r.next=r,ou(t)):(r.next=l.next,l.next=r),t.interleaved=r;return}}catch{}finally{}n=Lm(e,t,r,o),n!==null&&(r=ze(),Et(n,e,o,r),rh(n,t,o))}}function nh(e){var t=e.alternate;return e===he||t!==null&&t===he}function oh(e,t){Ur=Oi=!0;var n=e.pending;n===null?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function rh(e,t,n){if(n&4194240){var o=t.lanes;o&=e.pendingLanes,n|=o,t.lanes=n,Vc(e,n)}}var Mi={readContext:ft,useCallback:Re,useContext:Re,useEffect:Re,useImperativeHandle:Re,useInsertionEffect:Re,useLayoutEffect:Re,useMemo:Re,useReducer:Re,useRef:Re,useState:Re,useDebugValue:Re,useDeferredValue:Re,useTransition:Re,useMutableSource:Re,useSyncExternalStore:Re,useId:Re,unstable_isNewReconciler:!1},Hx={readContext:ft,useCallback:function(e,t){return Ot().memoizedState=[e,t===void 0?null:t],e},useContext:ft,useEffect:Gd,useImperativeHandle:function(e,t,n){return n=n!=null?n.concat([e]):null,ri(4194308,4,Xm.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ri(4194308,4,e,t)},useInsertionEffect:function(e,t){return ri(4,2,e,t)},useMemo:function(e,t){var n=Ot();return t=t===void 0?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var o=Ot();return t=n!==void 0?n(t):t,o.memoizedState=o.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},o.queue=e,e=e.dispatch=Vx.bind(null,he,e),[o.memoizedState,e]},useRef:function(e){var t=Ot();return e={current:e},t.memoizedState=e},useState:Yd,useDebugValue:fu,useDeferredValue:function(e){return Ot().memoizedState=e},useTransition:function(){var e=Yd(!1),t=e[0];return e=Ux.bind(null,e[1]),Ot().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var o=he,r=Ot();if(pe){if(n===void 0)throw Error(A(407));n=n()}else{if(n=t(),be===null)throw Error(A(349));so&30||Um(o,t,n)}r.memoizedState=n;var a={value:n,getSnapshot:t};return r.queue=a,Gd(Wm.bind(null,o,a,e),[e]),o.flags|=2048,la(9,Vm.bind(null,o,a,n,t),void 0,null),n},useId:function(){var e=Ot(),t=be.identifierPrefix;if(pe){var n=qt,o=Xt;n=(o&~(1<<32-Ct(o)-1)).toString(32)+n,t=":"+t+"R"+n,n=ia++,0<n&&(t+="H"+n.toString(32)),t+=":"}else n=$x++,t=":"+t+"r"+n.toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},Kx={readContext:ft,useCallback:Zm,useContext:ft,useEffect:du,useImperativeHandle:qm,useInsertionEffect:Ym,useLayoutEffect:Gm,useMemo:Jm,useReducer:qs,useRef:Qm,useState:function(){return qs(sa)},useDebugValue:fu,useDeferredValue:function(e){var t=pt();return eh(t,Ce.memoizedState,e)},useTransition:function(){var e=qs(sa)[0],t=pt().memoizedState;return[e,t]},useMutableSource:zm,useSyncExternalStore:$m,useId:th,unstable_isNewReconciler:!1},Qx={readContext:ft,useCallback:Zm,useContext:ft,useEffect:du,useImperativeHandle:qm,useInsertionEffect:Ym,useLayoutEffect:Gm,useMemo:Jm,useReducer:Zs,useRef:Qm,useState:function(){return Zs(sa)},useDebugValue:fu,useDeferredValue:function(e){var t=pt();return Ce===null?t.memoizedState=e:eh(t,Ce.memoizedState,e)},useTransition:function(){var e=Zs(sa)[0],t=pt().memoizedState;return[e,t]},useMutableSource:zm,useSyncExternalStore:$m,useId:th,unstable_isNewReconciler:!1};function gt(e,t){if(e&&e.defaultProps){t=ve({},t),e=e.defaultProps;for(var n in e)t[n]===void 0&&(t[n]=e[n]);return t}return t}function Yl(e,t,n,o){t=e.memoizedState,n=n(o,t),n=n==null?t:ve({},t,n),e.memoizedState=n,e.lanes===0&&(e.updateQueue.baseState=n)}var os={isMounted:function(e){return(e=e._reactInternals)?mo(e)===e:!1},enqueueSetState:function(e,t,n){e=e._reactInternals;var o=ze(),r=Mn(e),a=Zt(o,r);a.payload=t,n!=null&&(a.callback=n),t=_n(e,a,r),t!==null&&(Et(t,e,r,o),ni(t,e,r))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var o=ze(),r=Mn(e),a=Zt(o,r);a.tag=1,a.payload=t,n!=null&&(a.callback=n),t=_n(e,a,r),t!==null&&(Et(t,e,r,o),ni(t,e,r))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=ze(),o=Mn(e),r=Zt(n,o);r.tag=2,t!=null&&(r.callback=t),t=_n(e,r,o),t!==null&&(Et(t,e,o,n),ni(t,e,o))}};function Xd(e,t,n,o,r,a,i){return e=e.stateNode,typeof e.shouldComponentUpdate=="function"?e.shouldComponentUpdate(o,a,i):t.prototype&&t.prototype.isPureReactComponent?!ea(n,o)||!ea(r,a):!0}function ah(e,t,n){var o=!1,r=Fn,a=t.contextType;return typeof a=="object"&&a!==null?a=ft(a):(r=Qe(t)?ao:Me.current,o=t.contextTypes,a=(o=o!=null)?rr(e,r):Fn),t=new t(n,a),e.memoizedState=t.state!==null&&t.state!==void 0?t.state:null,t.updater=os,e.stateNode=t,t._reactInternals=e,o&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=r,e.__reactInternalMemoizedMaskedChildContext=a),t}function qd(e,t,n,o){e=t.state,typeof t.componentWillReceiveProps=="function"&&t.componentWillReceiveProps(n,o),typeof t.UNSAFE_componentWillReceiveProps=="function"&&t.UNSAFE_componentWillReceiveProps(n,o),t.state!==e&&os.enqueueReplaceState(t,t.state,null)}function Gl(e,t,n,o){var r=e.stateNode;r.props=n,r.state=e.memoizedState,r.refs={},ru(e);var a=t.contextType;typeof a=="object"&&a!==null?r.context=ft(a):(a=Qe(t)?ao:Me.current,r.context=rr(e,a)),r.state=e.memoizedState,a=t.getDerivedStateFromProps,typeof a=="function"&&(Yl(e,t,a,n),r.state=e.memoizedState),typeof t.getDerivedStateFromProps=="function"||typeof r.getSnapshotBeforeUpdate=="function"||typeof r.UNSAFE_componentWillMount!="function"&&typeof r.componentWillMount!="function"||(t=r.state,typeof r.componentWillMount=="function"&&r.componentWillMount(),typeof r.UNSAFE_componentWillMount=="function"&&r.UNSAFE_componentWillMount(),t!==r.state&&os.enqueueReplaceState(r,r.state,null),Ii(e,n,r,o),r.state=e.memoizedState),typeof r.componentDidMount=="function"&&(e.flags|=4194308)}function lr(e,t){try{var n="",o=t;do n+=Sy(o),o=o.return;while(o);var r=n}catch(a){r=`
Error generating stack: `+a.message+`
`+a.stack}return{value:e,source:t,stack:r,digest:null}}function Js(e,t,n){return{value:e,source:null,stack:n??null,digest:t??null}}function Xl(e,t){try{console.error(t.value)}catch(n){setTimeout(function(){throw n})}}var Yx=typeof WeakMap=="function"?WeakMap:Map;function ih(e,t,n){n=Zt(-1,n),n.tag=3,n.payload={element:null};var o=t.value;return n.callback=function(){Li||(Li=!0,ic=o),Xl(e,t)},n}function sh(e,t,n){n=Zt(-1,n),n.tag=3;var o=e.type.getDerivedStateFromError;if(typeof o=="function"){var r=t.value;n.payload=function(){return o(r)},n.callback=function(){Xl(e,t)}}var a=e.stateNode;return a!==null&&typeof a.componentDidCatch=="function"&&(n.callback=function(){Xl(e,t),typeof o!="function"&&(On===null?On=new Set([this]):On.add(this));var i=t.stack;this.componentDidCatch(t.value,{componentStack:i!==null?i:""})}),n}function Zd(e,t,n){var o=e.pingCache;if(o===null){o=e.pingCache=new Yx;var r=new Set;o.set(t,r)}else r=o.get(t),r===void 0&&(r=new Set,o.set(t,r));r.has(n)||(r.add(n),e=l2.bind(null,e,t,n),t.then(e,e))}function Jd(e){do{var t;if((t=e.tag===13)&&(t=e.memoizedState,t=t!==null?t.dehydrated!==null:!0),t)return e;e=e.return}while(e!==null);return null}function ef(e,t,n,o,r){return e.mode&1?(e.flags|=65536,e.lanes=r,e):(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,n.tag===1&&(n.alternate===null?n.tag=17:(t=Zt(-1,1),t.tag=2,_n(n,t,1))),n.lanes|=1),e)}var Gx=an.ReactCurrentOwner,He=!1;function Fe(e,t,n,o){t.child=e===null?jm(t,null,n,o):ir(t,e.child,n,o)}function tf(e,t,n,o,r){n=n.render;var a=t.ref;return $o(t,r),o=cu(e,t,n,o,a,r),n=uu(),e!==null&&!He?(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~r,nn(e,t,r)):(pe&&n&&qc(t),t.flags|=1,Fe(e,t,o,r),t.child)}function nf(e,t,n,o,r){if(e===null){var a=n.type;return typeof a=="function"&&!wu(a)&&a.defaultProps===void 0&&n.compare===null&&n.defaultProps===void 0?(t.tag=15,t.type=a,lh(e,t,a,o,r)):(e=li(n.type,null,o,t,t.mode,r),e.ref=t.ref,e.return=t,t.child=e)}if(a=e.child,!(e.lanes&r)){var i=a.memoizedProps;if(n=n.compare,n=n!==null?n:ea,n(i,o)&&e.ref===t.ref)return nn(e,t,r)}return t.flags|=1,e=jn(a,o),e.ref=t.ref,e.return=t,t.child=e}function lh(e,t,n,o,r){if(e!==null){var a=e.memoizedProps;if(ea(a,o)&&e.ref===t.ref)if(He=!1,t.pendingProps=o=a,(e.lanes&r)!==0)e.flags&131072&&(He=!0);else return t.lanes=e.lanes,nn(e,t,r)}return ql(e,t,n,o,r)}function ch(e,t,n){var o=t.pendingProps,r=o.children,a=e!==null?e.memoizedState:null;if(o.mode==="hidden")if(!(t.mode&1))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},se(jo,Je),Je|=n;else{if(!(n&1073741824))return e=a!==null?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,se(jo,Je),Je|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},o=a!==null?a.baseLanes:n,se(jo,Je),Je|=o}else a!==null?(o=a.baseLanes|n,t.memoizedState=null):o=n,se(jo,Je),Je|=o;return Fe(e,t,r,n),t.child}function uh(e,t){var n=t.ref;(e===null&&n!==null||e!==null&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function ql(e,t,n,o,r){var a=Qe(n)?ao:Me.current;return a=rr(t,a),$o(t,r),n=cu(e,t,n,o,a,r),o=uu(),e!==null&&!He?(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~r,nn(e,t,r)):(pe&&o&&qc(t),t.flags|=1,Fe(e,t,n,r),t.child)}function of(e,t,n,o,r){if(Qe(n)){var a=!0;Ni(t)}else a=!1;if($o(t,r),t.stateNode===null)ai(e,t),ah(t,n,o),Gl(t,n,o,r),o=!0;else if(e===null){var i=t.stateNode,s=t.memoizedProps;i.props=s;var l=i.context,c=n.contextType;typeof c=="object"&&c!==null?c=ft(c):(c=Qe(n)?ao:Me.current,c=rr(t,c));var f=n.getDerivedStateFromProps,d=typeof f=="function"||typeof i.getSnapshotBeforeUpdate=="function";d||typeof i.UNSAFE_componentWillReceiveProps!="function"&&typeof i.componentWillReceiveProps!="function"||(s!==o||l!==c)&&qd(t,i,o,c),gn=!1;var u=t.memoizedState;i.state=u,Ii(t,o,i,r),l=t.memoizedState,s!==o||u!==l||Ke.current||gn?(typeof f=="function"&&(Yl(t,n,f,o),l=t.memoizedState),(s=gn||Xd(t,n,s,o,u,l,c))?(d||typeof i.UNSAFE_componentWillMount!="function"&&typeof i.componentWillMount!="function"||(typeof i.componentWillMount=="function"&&i.componentWillMount(),typeof i.UNSAFE_componentWillMount=="function"&&i.UNSAFE_componentWillMount()),typeof i.componentDidMount=="function"&&(t.flags|=4194308)):(typeof i.componentDidMount=="function"&&(t.flags|=4194308),t.memoizedProps=o,t.memoizedState=l),i.props=o,i.state=l,i.context=c,o=s):(typeof i.componentDidMount=="function"&&(t.flags|=4194308),o=!1)}else{i=t.stateNode,Fm(e,t),s=t.memoizedProps,c=t.type===t.elementType?s:gt(t.type,s),i.props=c,d=t.pendingProps,u=i.context,l=n.contextType,typeof l=="object"&&l!==null?l=ft(l):(l=Qe(n)?ao:Me.current,l=rr(t,l));var y=n.getDerivedStateFromProps;(f=typeof y=="function"||typeof i.getSnapshotBeforeUpdate=="function")||typeof i.UNSAFE_componentWillReceiveProps!="function"&&typeof i.componentWillReceiveProps!="function"||(s!==d||u!==l)&&qd(t,i,o,l),gn=!1,u=t.memoizedState,i.state=u,Ii(t,o,i,r);var S=t.memoizedState;s!==d||u!==S||Ke.current||gn?(typeof y=="function"&&(Yl(t,n,y,o),S=t.memoizedState),(c=gn||Xd(t,n,c,o,u,S,l)||!1)?(f||typeof i.UNSAFE_componentWillUpdate!="function"&&typeof i.componentWillUpdate!="function"||(typeof i.componentWillUpdate=="function"&&i.componentWillUpdate(o,S,l),typeof i.UNSAFE_componentWillUpdate=="function"&&i.UNSAFE_componentWillUpdate(o,S,l)),typeof i.componentDidUpdate=="function"&&(t.flags|=4),typeof i.getSnapshotBeforeUpdate=="function"&&(t.flags|=1024)):(typeof i.componentDidUpdate!="function"||s===e.memoizedProps&&u===e.memoizedState||(t.flags|=4),typeof i.getSnapshotBeforeUpdate!="function"||s===e.memoizedProps&&u===e.memoizedState||(t.flags|=1024),t.memoizedProps=o,t.memoizedState=S),i.props=o,i.state=S,i.context=l,o=c):(typeof i.componentDidUpdate!="function"||s===e.memoizedProps&&u===e.memoizedState||(t.flags|=4),typeof i.getSnapshotBeforeUpdate!="function"||s===e.memoizedProps&&u===e.memoizedState||(t.flags|=1024),o=!1)}return Zl(e,t,n,o,a,r)}function Zl(e,t,n,o,r,a){uh(e,t);var i=(t.flags&128)!==0;if(!o&&!i)return r&&Ud(t,n,!1),nn(e,t,a);o=t.stateNode,Gx.current=t;var s=i&&typeof n.getDerivedStateFromError!="function"?null:o.render();return t.flags|=1,e!==null&&i?(t.child=ir(t,e.child,null,a),t.child=ir(t,null,s,a)):Fe(e,t,s,a),t.memoizedState=o.state,r&&Ud(t,n,!0),t.child}function dh(e){var t=e.stateNode;t.pendingContext?$d(e,t.pendingContext,t.pendingContext!==t.context):t.context&&$d(e,t.context,!1),au(e,t.containerInfo)}function rf(e,t,n,o,r){return ar(),Jc(r),t.flags|=256,Fe(e,t,n,o),t.child}var Jl={dehydrated:null,treeContext:null,retryLane:0};function ec(e){return{baseLanes:e,cachePool:null,transitions:null}}function fh(e,t,n){var o=t.pendingProps,r=me.current,a=!1,i=(t.flags&128)!==0,s;if((s=i)||(s=e!==null&&e.memoizedState===null?!1:(r&2)!==0),s?(a=!0,t.flags&=-129):(e===null||e.memoizedState!==null)&&(r|=1),se(me,r&1),e===null)return Kl(t),e=t.memoizedState,e!==null&&(e=e.dehydrated,e!==null)?(t.mode&1?e.data==="$!"?t.lanes=8:t.lanes=1073741824:t.lanes=1,null):(i=o.children,e=o.fallback,a?(o=t.mode,a=t.child,i={mode:"hidden",children:i},!(o&1)&&a!==null?(a.childLanes=0,a.pendingProps=i):a=is(i,o,0,null),e=ro(e,o,n,null),a.return=t,e.return=t,a.sibling=e,t.child=a,t.child.memoizedState=ec(n),t.memoizedState=Jl,e):pu(t,i));if(r=e.memoizedState,r!==null&&(s=r.dehydrated,s!==null))return Xx(e,t,i,o,s,r,n);if(a){a=o.fallback,i=t.mode,r=e.child,s=r.sibling;var l={mode:"hidden",children:o.children};return!(i&1)&&t.child!==r?(o=t.child,o.childLanes=0,o.pendingProps=l,t.deletions=null):(o=jn(r,l),o.subtreeFlags=r.subtreeFlags&14680064),s!==null?a=jn(s,a):(a=ro(a,i,n,null),a.flags|=2),a.return=t,o.return=t,o.sibling=a,t.child=o,o=a,a=t.child,i=e.child.memoizedState,i=i===null?ec(n):{baseLanes:i.baseLanes|n,cachePool:null,transitions:i.transitions},a.memoizedState=i,a.childLanes=e.childLanes&~n,t.memoizedState=Jl,o}return a=e.child,e=a.sibling,o=jn(a,{mode:"visible",children:o.children}),!(t.mode&1)&&(o.lanes=n),o.return=t,o.sibling=null,e!==null&&(n=t.deletions,n===null?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=o,t.memoizedState=null,o}function pu(e,t){return t=is({mode:"visible",children:t},e.mode,0,null),t.return=e,e.child=t}function Fa(e,t,n,o){return o!==null&&Jc(o),ir(t,e.child,null,n),e=pu(t,t.pendingProps.children),e.flags|=2,t.memoizedState=null,e}function Xx(e,t,n,o,r,a,i){if(n)return t.flags&256?(t.flags&=-257,o=Js(Error(A(422))),Fa(e,t,i,o)):t.memoizedState!==null?(t.child=e.child,t.flags|=128,null):(a=o.fallback,r=t.mode,o=is({mode:"visible",children:o.children},r,0,null),a=ro(a,r,i,null),a.flags|=2,o.return=t,a.return=t,o.sibling=a,t.child=o,t.mode&1&&ir(t,e.child,null,i),t.child.memoizedState=ec(i),t.memoizedState=Jl,a);if(!(t.mode&1))return Fa(e,t,i,null);if(r.data==="$!"){if(o=r.nextSibling&&r.nextSibling.dataset,o)var s=o.dgst;return o=s,a=Error(A(419)),o=Js(a,o,void 0),Fa(e,t,i,o)}if(s=(i&e.childLanes)!==0,He||s){if(o=be,o!==null){switch(i&-i){case 4:r=2;break;case 16:r=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:r=32;break;case 536870912:r=268435456;break;default:r=0}r=r&(o.suspendedLanes|i)?0:r,r!==0&&r!==a.retryLane&&(a.retryLane=r,tn(e,r),Et(o,e,r,-1))}return xu(),o=Js(Error(A(421))),Fa(e,t,i,o)}return r.data==="$?"?(t.flags|=128,t.child=e.child,t=c2.bind(null,e),r._reactRetry=t,null):(e=a.treeContext,tt=In(r.nextSibling),nt=t,pe=!0,St=null,e!==null&&(lt[ct++]=Xt,lt[ct++]=qt,lt[ct++]=io,Xt=e.id,qt=e.overflow,io=t),t=pu(t,o.children),t.flags|=4096,t)}function af(e,t,n){e.lanes|=t;var o=e.alternate;o!==null&&(o.lanes|=t),Ql(e.return,t,n)}function el(e,t,n,o,r){var a=e.memoizedState;a===null?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:o,tail:n,tailMode:r}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=o,a.tail=n,a.tailMode=r)}function ph(e,t,n){var o=t.pendingProps,r=o.revealOrder,a=o.tail;if(Fe(e,t,o.children,n),o=me.current,o&2)o=o&1|2,t.flags|=128;else{if(e!==null&&e.flags&128)e:for(e=t.child;e!==null;){if(e.tag===13)e.memoizedState!==null&&af(e,n,t);else if(e.tag===19)af(e,n,t);else if(e.child!==null){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;e.sibling===null;){if(e.return===null||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}o&=1}if(se(me,o),!(t.mode&1))t.memoizedState=null;else switch(r){case"forwards":for(n=t.child,r=null;n!==null;)e=n.alternate,e!==null&&_i(e)===null&&(r=n),n=n.sibling;n=r,n===null?(r=t.child,t.child=null):(r=n.sibling,n.sibling=null),el(t,!1,r,n,a);break;case"backwards":for(n=null,r=t.child,t.child=null;r!==null;){if(e=r.alternate,e!==null&&_i(e)===null){t.child=r;break}e=r.sibling,r.sibling=n,n=r,r=e}el(t,!0,n,null,a);break;case"together":el(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function ai(e,t){!(t.mode&1)&&e!==null&&(e.alternate=null,t.alternate=null,t.flags|=2)}function nn(e,t,n){if(e!==null&&(t.dependencies=e.dependencies),lo|=t.lanes,!(n&t.childLanes))return null;if(e!==null&&t.child!==e.child)throw Error(A(153));if(t.child!==null){for(e=t.child,n=jn(e,e.pendingProps),t.child=n,n.return=t;e.sibling!==null;)e=e.sibling,n=n.sibling=jn(e,e.pendingProps),n.return=t;n.sibling=null}return t.child}function qx(e,t,n){switch(t.tag){case 3:dh(t),ar();break;case 5:Bm(t);break;case 1:Qe(t.type)&&Ni(t);break;case 4:au(t,t.stateNode.containerInfo);break;case 10:var o=t.type._context,r=t.memoizedProps.value;se(Ai,o._currentValue),o._currentValue=r;break;case 13:if(o=t.memoizedState,o!==null)return o.dehydrated!==null?(se(me,me.current&1),t.flags|=128,null):n&t.child.childLanes?fh(e,t,n):(se(me,me.current&1),e=nn(e,t,n),e!==null?e.sibling:null);se(me,me.current&1);break;case 19:if(o=(n&t.childLanes)!==0,e.flags&128){if(o)return ph(e,t,n);t.flags|=128}if(r=t.memoizedState,r!==null&&(r.rendering=null,r.tail=null,r.lastEffect=null),se(me,me.current),o)break;return null;case 22:case 23:return t.lanes=0,ch(e,t,n)}return nn(e,t,n)}var mh,tc,hh,vh;mh=function(e,t){for(var n=t.child;n!==null;){if(n.tag===5||n.tag===6)e.appendChild(n.stateNode);else if(n.tag!==4&&n.child!==null){n.child.return=n,n=n.child;continue}if(n===t)break;for(;n.sibling===null;){if(n.return===null||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}};tc=function(){};hh=function(e,t,n,o){var r=e.memoizedProps;if(r!==o){e=t.stateNode,Zn(Ut.current);var a=null;switch(n){case"input":r=El(e,r),o=El(e,o),a=[];break;case"select":r=ve({},r,{value:void 0}),o=ve({},o,{value:void 0}),a=[];break;case"textarea":r=kl(e,r),o=kl(e,o),a=[];break;default:typeof r.onClick!="function"&&typeof o.onClick=="function"&&(e.onclick=bi)}Tl(n,o);var i;n=null;for(c in r)if(!o.hasOwnProperty(c)&&r.hasOwnProperty(c)&&r[c]!=null)if(c==="style"){var s=r[c];for(i in s)s.hasOwnProperty(i)&&(n||(n={}),n[i]="")}else c!=="dangerouslySetInnerHTML"&&c!=="children"&&c!=="suppressContentEditableWarning"&&c!=="suppressHydrationWarning"&&c!=="autoFocus"&&(Qr.hasOwnProperty(c)?a||(a=[]):(a=a||[]).push(c,null));for(c in o){var l=o[c];if(s=r!=null?r[c]:void 0,o.hasOwnProperty(c)&&l!==s&&(l!=null||s!=null))if(c==="style")if(s){for(i in s)!s.hasOwnProperty(i)||l&&l.hasOwnProperty(i)||(n||(n={}),n[i]="");for(i in l)l.hasOwnProperty(i)&&s[i]!==l[i]&&(n||(n={}),n[i]=l[i])}else n||(a||(a=[]),a.push(c,n)),n=l;else c==="dangerouslySetInnerHTML"?(l=l?l.__html:void 0,s=s?s.__html:void 0,l!=null&&s!==l&&(a=a||[]).push(c,l)):c==="children"?typeof l!="string"&&typeof l!="number"||(a=a||[]).push(c,""+l):c!=="suppressContentEditableWarning"&&c!=="suppressHydrationWarning"&&(Qr.hasOwnProperty(c)?(l!=null&&c==="onScroll"&&de("scroll",e),a||s===l||(a=[])):(a=a||[]).push(c,l))}n&&(a=a||[]).push("style",n);var c=a;(t.updateQueue=c)&&(t.flags|=4)}};vh=function(e,t,n,o){n!==o&&(t.flags|=4)};function Dr(e,t){if(!pe)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;t!==null;)t.alternate!==null&&(n=t),t=t.sibling;n===null?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var o=null;n!==null;)n.alternate!==null&&(o=n),n=n.sibling;o===null?t||e.tail===null?e.tail=null:e.tail.sibling=null:o.sibling=null}}function Ie(e){var t=e.alternate!==null&&e.alternate.child===e.child,n=0,o=0;if(t)for(var r=e.child;r!==null;)n|=r.lanes|r.childLanes,o|=r.subtreeFlags&14680064,o|=r.flags&14680064,r.return=e,r=r.sibling;else for(r=e.child;r!==null;)n|=r.lanes|r.childLanes,o|=r.subtreeFlags,o|=r.flags,r.return=e,r=r.sibling;return e.subtreeFlags|=o,e.childLanes=n,t}function Zx(e,t,n){var o=t.pendingProps;switch(Zc(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Ie(t),null;case 1:return Qe(t.type)&&ki(),Ie(t),null;case 3:return o=t.stateNode,sr(),fe(Ke),fe(Me),su(),o.pendingContext&&(o.context=o.pendingContext,o.pendingContext=null),(e===null||e.child===null)&&(ja(t)?t.flags|=4:e===null||e.memoizedState.isDehydrated&&!(t.flags&256)||(t.flags|=1024,St!==null&&(cc(St),St=null))),tc(e,t),Ie(t),null;case 5:iu(t);var r=Zn(aa.current);if(n=t.type,e!==null&&t.stateNode!=null)hh(e,t,n,o,r),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!o){if(t.stateNode===null)throw Error(A(166));return Ie(t),null}if(e=Zn(Ut.current),ja(t)){o=t.stateNode,n=t.type;var a=t.memoizedProps;switch(o[Bt]=t,o[oa]=a,e=(t.mode&1)!==0,n){case"dialog":de("cancel",o),de("close",o);break;case"iframe":case"object":case"embed":de("load",o);break;case"video":case"audio":for(r=0;r<jr.length;r++)de(jr[r],o);break;case"source":de("error",o);break;case"img":case"image":case"link":de("error",o),de("load",o);break;case"details":de("toggle",o);break;case"input":md(o,a),de("invalid",o);break;case"select":o._wrapperState={wasMultiple:!!a.multiple},de("invalid",o);break;case"textarea":vd(o,a),de("invalid",o)}Tl(n,a),r=null;for(var i in a)if(a.hasOwnProperty(i)){var s=a[i];i==="children"?typeof s=="string"?o.textContent!==s&&(a.suppressHydrationWarning!==!0&&Ma(o.textContent,s,e),r=["children",s]):typeof s=="number"&&o.textContent!==""+s&&(a.suppressHydrationWarning!==!0&&Ma(o.textContent,s,e),r=["children",""+s]):Qr.hasOwnProperty(i)&&s!=null&&i==="onScroll"&&de("scroll",o)}switch(n){case"input":Na(o),hd(o,a,!0);break;case"textarea":Na(o),gd(o);break;case"select":case"option":break;default:typeof a.onClick=="function"&&(o.onclick=bi)}o=r,t.updateQueue=o,o!==null&&(t.flags|=4)}else{i=r.nodeType===9?r:r.ownerDocument,e==="http://www.w3.org/1999/xhtml"&&(e=Wp(n)),e==="http://www.w3.org/1999/xhtml"?n==="script"?(e=i.createElement("div"),e.innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):typeof o.is=="string"?e=i.createElement(n,{is:o.is}):(e=i.createElement(n),n==="select"&&(i=e,o.multiple?i.multiple=!0:o.size&&(i.size=o.size))):e=i.createElementNS(e,n),e[Bt]=t,e[oa]=o,mh(e,t,!1,!1),t.stateNode=e;e:{switch(i=Dl(n,o),n){case"dialog":de("cancel",e),de("close",e),r=o;break;case"iframe":case"object":case"embed":de("load",e),r=o;break;case"video":case"audio":for(r=0;r<jr.length;r++)de(jr[r],e);r=o;break;case"source":de("error",e),r=o;break;case"img":case"image":case"link":de("error",e),de("load",e),r=o;break;case"details":de("toggle",e),r=o;break;case"input":md(e,o),r=El(e,o),de("invalid",e);break;case"option":r=o;break;case"select":e._wrapperState={wasMultiple:!!o.multiple},r=ve({},o,{value:void 0}),de("invalid",e);break;case"textarea":vd(e,o),r=kl(e,o),de("invalid",e);break;default:r=o}Tl(n,r),s=r;for(a in s)if(s.hasOwnProperty(a)){var l=s[a];a==="style"?Qp(e,l):a==="dangerouslySetInnerHTML"?(l=l?l.__html:void 0,l!=null&&Hp(e,l)):a==="children"?typeof l=="string"?(n!=="textarea"||l!=="")&&Yr(e,l):typeof l=="number"&&Yr(e,""+l):a!=="suppressContentEditableWarning"&&a!=="suppressHydrationWarning"&&a!=="autoFocus"&&(Qr.hasOwnProperty(a)?l!=null&&a==="onScroll"&&de("scroll",e):l!=null&&Lc(e,a,l,i))}switch(n){case"input":Na(e),hd(e,o,!1);break;case"textarea":Na(e),gd(e);break;case"option":o.value!=null&&e.setAttribute("value",""+Ln(o.value));break;case"select":e.multiple=!!o.multiple,a=o.value,a!=null?Lo(e,!!o.multiple,a,!1):o.defaultValue!=null&&Lo(e,!!o.multiple,o.defaultValue,!0);break;default:typeof r.onClick=="function"&&(e.onclick=bi)}switch(n){case"button":case"input":case"select":case"textarea":o=!!o.autoFocus;break e;case"img":o=!0;break e;default:o=!1}}o&&(t.flags|=4)}t.ref!==null&&(t.flags|=512,t.flags|=2097152)}return Ie(t),null;case 6:if(e&&t.stateNode!=null)vh(e,t,e.memoizedProps,o);else{if(typeof o!="string"&&t.stateNode===null)throw Error(A(166));if(n=Zn(aa.current),Zn(Ut.current),ja(t)){if(o=t.stateNode,n=t.memoizedProps,o[Bt]=t,(a=o.nodeValue!==n)&&(e=nt,e!==null))switch(e.tag){case 3:Ma(o.nodeValue,n,(e.mode&1)!==0);break;case 5:e.memoizedProps.suppressHydrationWarning!==!0&&Ma(o.nodeValue,n,(e.mode&1)!==0)}a&&(t.flags|=4)}else o=(n.nodeType===9?n:n.ownerDocument).createTextNode(o),o[Bt]=t,t.stateNode=o}return Ie(t),null;case 13:if(fe(me),o=t.memoizedState,e===null||e.memoizedState!==null&&e.memoizedState.dehydrated!==null){if(pe&&tt!==null&&t.mode&1&&!(t.flags&128))Om(),ar(),t.flags|=98560,a=!1;else if(a=ja(t),o!==null&&o.dehydrated!==null){if(e===null){if(!a)throw Error(A(318));if(a=t.memoizedState,a=a!==null?a.dehydrated:null,!a)throw Error(A(317));a[Bt]=t}else ar(),!(t.flags&128)&&(t.memoizedState=null),t.flags|=4;Ie(t),a=!1}else St!==null&&(cc(St),St=null),a=!0;if(!a)return t.flags&65536?t:null}return t.flags&128?(t.lanes=n,t):(o=o!==null,o!==(e!==null&&e.memoizedState!==null)&&o&&(t.child.flags|=8192,t.mode&1&&(e===null||me.current&1?Ee===0&&(Ee=3):xu())),t.updateQueue!==null&&(t.flags|=4),Ie(t),null);case 4:return sr(),tc(e,t),e===null&&ta(t.stateNode.containerInfo),Ie(t),null;case 10:return nu(t.type._context),Ie(t),null;case 17:return Qe(t.type)&&ki(),Ie(t),null;case 19:if(fe(me),a=t.memoizedState,a===null)return Ie(t),null;if(o=(t.flags&128)!==0,i=a.rendering,i===null)if(o)Dr(a,!1);else{if(Ee!==0||e!==null&&e.flags&128)for(e=t.child;e!==null;){if(i=_i(e),i!==null){for(t.flags|=128,Dr(a,!1),o=i.updateQueue,o!==null&&(t.updateQueue=o,t.flags|=4),t.subtreeFlags=0,o=n,n=t.child;n!==null;)a=n,e=o,a.flags&=14680066,i=a.alternate,i===null?(a.childLanes=0,a.lanes=e,a.child=null,a.subtreeFlags=0,a.memoizedProps=null,a.memoizedState=null,a.updateQueue=null,a.dependencies=null,a.stateNode=null):(a.childLanes=i.childLanes,a.lanes=i.lanes,a.child=i.child,a.subtreeFlags=0,a.deletions=null,a.memoizedProps=i.memoizedProps,a.memoizedState=i.memoizedState,a.updateQueue=i.updateQueue,a.type=i.type,e=i.dependencies,a.dependencies=e===null?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return se(me,me.current&1|2),t.child}e=e.sibling}a.tail!==null&&we()>cr&&(t.flags|=128,o=!0,Dr(a,!1),t.lanes=4194304)}else{if(!o)if(e=_i(i),e!==null){if(t.flags|=128,o=!0,n=e.updateQueue,n!==null&&(t.updateQueue=n,t.flags|=4),Dr(a,!0),a.tail===null&&a.tailMode==="hidden"&&!i.alternate&&!pe)return Ie(t),null}else 2*we()-a.renderingStartTime>cr&&n!==1073741824&&(t.flags|=128,o=!0,Dr(a,!1),t.lanes=4194304);a.isBackwards?(i.sibling=t.child,t.child=i):(n=a.last,n!==null?n.sibling=i:t.child=i,a.last=i)}return a.tail!==null?(t=a.tail,a.rendering=t,a.tail=t.sibling,a.renderingStartTime=we(),t.sibling=null,n=me.current,se(me,o?n&1|2:n&1),t):(Ie(t),null);case 22:case 23:return yu(),o=t.memoizedState!==null,e!==null&&e.memoizedState!==null!==o&&(t.flags|=8192),o&&t.mode&1?Je&1073741824&&(Ie(t),t.subtreeFlags&6&&(t.flags|=8192)):Ie(t),null;case 24:return null;case 25:return null}throw Error(A(156,t.tag))}function Jx(e,t){switch(Zc(t),t.tag){case 1:return Qe(t.type)&&ki(),e=t.flags,e&65536?(t.flags=e&-65537|128,t):null;case 3:return sr(),fe(Ke),fe(Me),su(),e=t.flags,e&65536&&!(e&128)?(t.flags=e&-65537|128,t):null;case 5:return iu(t),null;case 13:if(fe(me),e=t.memoizedState,e!==null&&e.dehydrated!==null){if(t.alternate===null)throw Error(A(340));ar()}return e=t.flags,e&65536?(t.flags=e&-65537|128,t):null;case 19:return fe(me),null;case 4:return sr(),null;case 10:return nu(t.type._context),null;case 22:case 23:return yu(),null;case 24:return null;default:return null}}var Ba=!1,Oe=!1,e2=typeof WeakSet=="function"?WeakSet:Set,z=null;function Mo(e,t){var n=e.ref;if(n!==null)if(typeof n=="function")try{n(null)}catch(o){xe(e,t,o)}else n.current=null}function nc(e,t,n){try{n()}catch(o){xe(e,t,o)}}var sf=!1;function t2(e,t){if(Bl=Ci,e=Sm(),Xc(e)){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{n=(n=e.ownerDocument)&&n.defaultView||window;var o=n.getSelection&&n.getSelection();if(o&&o.rangeCount!==0){n=o.anchorNode;var r=o.anchorOffset,a=o.focusNode;o=o.focusOffset;try{n.nodeType,a.nodeType}catch{n=null;break e}var i=0,s=-1,l=-1,c=0,f=0,d=e,u=null;t:for(;;){for(var y;d!==n||r!==0&&d.nodeType!==3||(s=i+r),d!==a||o!==0&&d.nodeType!==3||(l=i+o),d.nodeType===3&&(i+=d.nodeValue.length),(y=d.firstChild)!==null;)u=d,d=y;for(;;){if(d===e)break t;if(u===n&&++c===r&&(s=i),u===a&&++f===o&&(l=i),(y=d.nextSibling)!==null)break;d=u,u=d.parentNode}d=y}n=s===-1||l===-1?null:{start:s,end:l}}else n=null}n=n||{start:0,end:0}}else n=null;for(zl={focusedElem:e,selectionRange:n},Ci=!1,z=t;z!==null;)if(t=z,e=t.child,(t.subtreeFlags&1028)!==0&&e!==null)e.return=t,z=e;else for(;z!==null;){t=z;try{var S=t.alternate;if(t.flags&1024)switch(t.tag){case 0:case 11:case 15:break;case 1:if(S!==null){var h=S.memoizedProps,x=S.memoizedState,m=t.stateNode,v=m.getSnapshotBeforeUpdate(t.elementType===t.type?h:gt(t.type,h),x);m.__reactInternalSnapshotBeforeUpdate=v}break;case 3:var g=t.stateNode.containerInfo;g.nodeType===1?g.textContent="":g.nodeType===9&&g.documentElement&&g.removeChild(g.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(A(163))}}catch(C){xe(t,t.return,C)}if(e=t.sibling,e!==null){e.return=t.return,z=e;break}z=t.return}return S=sf,sf=!1,S}function Vr(e,t,n){var o=t.updateQueue;if(o=o!==null?o.lastEffect:null,o!==null){var r=o=o.next;do{if((r.tag&e)===e){var a=r.destroy;r.destroy=void 0,a!==void 0&&nc(t,n,a)}r=r.next}while(r!==o)}}function rs(e,t){if(t=t.updateQueue,t=t!==null?t.lastEffect:null,t!==null){var n=t=t.next;do{if((n.tag&e)===e){var o=n.create;n.destroy=o()}n=n.next}while(n!==t)}}function oc(e){var t=e.ref;if(t!==null){var n=e.stateNode;switch(e.tag){case 5:e=n;break;default:e=n}typeof t=="function"?t(e):t.current=e}}function gh(e){var t=e.alternate;t!==null&&(e.alternate=null,gh(t)),e.child=null,e.deletions=null,e.sibling=null,e.tag===5&&(t=e.stateNode,t!==null&&(delete t[Bt],delete t[oa],delete t[Vl],delete t[Lx],delete t[Fx])),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function yh(e){return e.tag===5||e.tag===3||e.tag===4}function lf(e){e:for(;;){for(;e.sibling===null;){if(e.return===null||yh(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;e.tag!==5&&e.tag!==6&&e.tag!==18;){if(e.flags&2||e.child===null||e.tag===4)continue e;e.child.return=e,e=e.child}if(!(e.flags&2))return e.stateNode}}function rc(e,t,n){var o=e.tag;if(o===5||o===6)e=e.stateNode,t?n.nodeType===8?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(n.nodeType===8?(t=n.parentNode,t.insertBefore(e,n)):(t=n,t.appendChild(e)),n=n._reactRootContainer,n!=null||t.onclick!==null||(t.onclick=bi));else if(o!==4&&(e=e.child,e!==null))for(rc(e,t,n),e=e.sibling;e!==null;)rc(e,t,n),e=e.sibling}function ac(e,t,n){var o=e.tag;if(o===5||o===6)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(o!==4&&(e=e.child,e!==null))for(ac(e,t,n),e=e.sibling;e!==null;)ac(e,t,n),e=e.sibling}var ke=null,wt=!1;function dn(e,t,n){for(n=n.child;n!==null;)xh(e,t,n),n=n.sibling}function xh(e,t,n){if($t&&typeof $t.onCommitFiberUnmount=="function")try{$t.onCommitFiberUnmount(Xi,n)}catch{}switch(n.tag){case 5:Oe||Mo(n,t);case 6:var o=ke,r=wt;ke=null,dn(e,t,n),ke=o,wt=r,ke!==null&&(wt?(e=ke,n=n.stateNode,e.nodeType===8?e.parentNode.removeChild(n):e.removeChild(n)):ke.removeChild(n.stateNode));break;case 18:ke!==null&&(wt?(e=ke,n=n.stateNode,e.nodeType===8?Qs(e.parentNode,n):e.nodeType===1&&Qs(e,n),Zr(e)):Qs(ke,n.stateNode));break;case 4:o=ke,r=wt,ke=n.stateNode.containerInfo,wt=!0,dn(e,t,n),ke=o,wt=r;break;case 0:case 11:case 14:case 15:if(!Oe&&(o=n.updateQueue,o!==null&&(o=o.lastEffect,o!==null))){r=o=o.next;do{var a=r,i=a.destroy;a=a.tag,i!==void 0&&(a&2||a&4)&&nc(n,t,i),r=r.next}while(r!==o)}dn(e,t,n);break;case 1:if(!Oe&&(Mo(n,t),o=n.stateNode,typeof o.componentWillUnmount=="function"))try{o.props=n.memoizedProps,o.state=n.memoizedState,o.componentWillUnmount()}catch(s){xe(n,t,s)}dn(e,t,n);break;case 21:dn(e,t,n);break;case 22:n.mode&1?(Oe=(o=Oe)||n.memoizedState!==null,dn(e,t,n),Oe=o):dn(e,t,n);break;default:dn(e,t,n)}}function cf(e){var t=e.updateQueue;if(t!==null){e.updateQueue=null;var n=e.stateNode;n===null&&(n=e.stateNode=new e2),t.forEach(function(o){var r=u2.bind(null,e,o);n.has(o)||(n.add(o),o.then(r,r))})}}function vt(e,t){var n=t.deletions;if(n!==null)for(var o=0;o<n.length;o++){var r=n[o];try{var a=e,i=t,s=i;e:for(;s!==null;){switch(s.tag){case 5:ke=s.stateNode,wt=!1;break e;case 3:ke=s.stateNode.containerInfo,wt=!0;break e;case 4:ke=s.stateNode.containerInfo,wt=!0;break e}s=s.return}if(ke===null)throw Error(A(160));xh(a,i,r),ke=null,wt=!1;var l=r.alternate;l!==null&&(l.return=null),r.return=null}catch(c){xe(r,t,c)}}if(t.subtreeFlags&12854)for(t=t.child;t!==null;)wh(t,e),t=t.sibling}function wh(e,t){var n=e.alternate,o=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(vt(t,e),_t(e),o&4){try{Vr(3,e,e.return),rs(3,e)}catch(h){xe(e,e.return,h)}try{Vr(5,e,e.return)}catch(h){xe(e,e.return,h)}}break;case 1:vt(t,e),_t(e),o&512&&n!==null&&Mo(n,n.return);break;case 5:if(vt(t,e),_t(e),o&512&&n!==null&&Mo(n,n.return),e.flags&32){var r=e.stateNode;try{Yr(r,"")}catch(h){xe(e,e.return,h)}}if(o&4&&(r=e.stateNode,r!=null)){var a=e.memoizedProps,i=n!==null?n.memoizedProps:a,s=e.type,l=e.updateQueue;if(e.updateQueue=null,l!==null)try{s==="input"&&a.type==="radio"&&a.name!=null&&Up(r,a),Dl(s,i);var c=Dl(s,a);for(i=0;i<l.length;i+=2){var f=l[i],d=l[i+1];f==="style"?Qp(r,d):f==="dangerouslySetInnerHTML"?Hp(r,d):f==="children"?Yr(r,d):Lc(r,f,d,c)}switch(s){case"input":Pl(r,a);break;case"textarea":Vp(r,a);break;case"select":var u=r._wrapperState.wasMultiple;r._wrapperState.wasMultiple=!!a.multiple;var y=a.value;y!=null?Lo(r,!!a.multiple,y,!1):u!==!!a.multiple&&(a.defaultValue!=null?Lo(r,!!a.multiple,a.defaultValue,!0):Lo(r,!!a.multiple,a.multiple?[]:"",!1))}r[oa]=a}catch(h){xe(e,e.return,h)}}break;case 6:if(vt(t,e),_t(e),o&4){if(e.stateNode===null)throw Error(A(162));r=e.stateNode,a=e.memoizedProps;try{r.nodeValue=a}catch(h){xe(e,e.return,h)}}break;case 3:if(vt(t,e),_t(e),o&4&&n!==null&&n.memoizedState.isDehydrated)try{Zr(t.containerInfo)}catch(h){xe(e,e.return,h)}break;case 4:vt(t,e),_t(e);break;case 13:vt(t,e),_t(e),r=e.child,r.flags&8192&&(a=r.memoizedState!==null,r.stateNode.isHidden=a,!a||r.alternate!==null&&r.alternate.memoizedState!==null||(vu=we())),o&4&&cf(e);break;case 22:if(f=n!==null&&n.memoizedState!==null,e.mode&1?(Oe=(c=Oe)||f,vt(t,e),Oe=c):vt(t,e),_t(e),o&8192){if(c=e.memoizedState!==null,(e.stateNode.isHidden=c)&&!f&&e.mode&1)for(z=e,f=e.child;f!==null;){for(d=z=f;z!==null;){switch(u=z,y=u.child,u.tag){case 0:case 11:case 14:case 15:Vr(4,u,u.return);break;case 1:Mo(u,u.return);var S=u.stateNode;if(typeof S.componentWillUnmount=="function"){o=u,n=u.return;try{t=o,S.props=t.memoizedProps,S.state=t.memoizedState,S.componentWillUnmount()}catch(h){xe(o,n,h)}}break;case 5:Mo(u,u.return);break;case 22:if(u.memoizedState!==null){df(d);continue}}y!==null?(y.return=u,z=y):df(d)}f=f.sibling}e:for(f=null,d=e;;){if(d.tag===5){if(f===null){f=d;try{r=d.stateNode,c?(a=r.style,typeof a.setProperty=="function"?a.setProperty("display","none","important"):a.display="none"):(s=d.stateNode,l=d.memoizedProps.style,i=l!=null&&l.hasOwnProperty("display")?l.display:null,s.style.display=Kp("display",i))}catch(h){xe(e,e.return,h)}}}else if(d.tag===6){if(f===null)try{d.stateNode.nodeValue=c?"":d.memoizedProps}catch(h){xe(e,e.return,h)}}else if((d.tag!==22&&d.tag!==23||d.memoizedState===null||d===e)&&d.child!==null){d.child.return=d,d=d.child;continue}if(d===e)break e;for(;d.sibling===null;){if(d.return===null||d.return===e)break e;f===d&&(f=null),d=d.return}f===d&&(f=null),d.sibling.return=d.return,d=d.sibling}}break;case 19:vt(t,e),_t(e),o&4&&cf(e);break;case 21:break;default:vt(t,e),_t(e)}}function _t(e){var t=e.flags;if(t&2){try{e:{for(var n=e.return;n!==null;){if(yh(n)){var o=n;break e}n=n.return}throw Error(A(160))}switch(o.tag){case 5:var r=o.stateNode;o.flags&32&&(Yr(r,""),o.flags&=-33);var a=lf(e);ac(e,a,r);break;case 3:case 4:var i=o.stateNode.containerInfo,s=lf(e);rc(e,s,i);break;default:throw Error(A(161))}}catch(l){xe(e,e.return,l)}e.flags&=-3}t&4096&&(e.flags&=-4097)}function n2(e,t,n){z=e,Sh(e)}function Sh(e,t,n){for(var o=(e.mode&1)!==0;z!==null;){var r=z,a=r.child;if(r.tag===22&&o){var i=r.memoizedState!==null||Ba;if(!i){var s=r.alternate,l=s!==null&&s.memoizedState!==null||Oe;s=Ba;var c=Oe;if(Ba=i,(Oe=l)&&!c)for(z=r;z!==null;)i=z,l=i.child,i.tag===22&&i.memoizedState!==null?ff(r):l!==null?(l.return=i,z=l):ff(r);for(;a!==null;)z=a,Sh(a),a=a.sibling;z=r,Ba=s,Oe=c}uf(e)}else r.subtreeFlags&8772&&a!==null?(a.return=r,z=a):uf(e)}}function uf(e){for(;z!==null;){var t=z;if(t.flags&8772){var n=t.alternate;try{if(t.flags&8772)switch(t.tag){case 0:case 11:case 15:Oe||rs(5,t);break;case 1:var o=t.stateNode;if(t.flags&4&&!Oe)if(n===null)o.componentDidMount();else{var r=t.elementType===t.type?n.memoizedProps:gt(t.type,n.memoizedProps);o.componentDidUpdate(r,n.memoizedState,o.__reactInternalSnapshotBeforeUpdate)}var a=t.updateQueue;a!==null&&Qd(t,a,o);break;case 3:var i=t.updateQueue;if(i!==null){if(n=null,t.child!==null)switch(t.child.tag){case 5:n=t.child.stateNode;break;case 1:n=t.child.stateNode}Qd(t,i,n)}break;case 5:var s=t.stateNode;if(n===null&&t.flags&4){n=s;var l=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":l.autoFocus&&n.focus();break;case"img":l.src&&(n.src=l.src)}}break;case 6:break;case 4:break;case 12:break;case 13:if(t.memoizedState===null){var c=t.alternate;if(c!==null){var f=c.memoizedState;if(f!==null){var d=f.dehydrated;d!==null&&Zr(d)}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;default:throw Error(A(163))}Oe||t.flags&512&&oc(t)}catch(u){xe(t,t.return,u)}}if(t===e){z=null;break}if(n=t.sibling,n!==null){n.return=t.return,z=n;break}z=t.return}}function df(e){for(;z!==null;){var t=z;if(t===e){z=null;break}var n=t.sibling;if(n!==null){n.return=t.return,z=n;break}z=t.return}}function ff(e){for(;z!==null;){var t=z;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{rs(4,t)}catch(l){xe(t,n,l)}break;case 1:var o=t.stateNode;if(typeof o.componentDidMount=="function"){var r=t.return;try{o.componentDidMount()}catch(l){xe(t,r,l)}}var a=t.return;try{oc(t)}catch(l){xe(t,a,l)}break;case 5:var i=t.return;try{oc(t)}catch(l){xe(t,i,l)}}}catch(l){xe(t,t.return,l)}if(t===e){z=null;break}var s=t.sibling;if(s!==null){s.return=t.return,z=s;break}z=t.return}}var o2=Math.ceil,ji=an.ReactCurrentDispatcher,mu=an.ReactCurrentOwner,dt=an.ReactCurrentBatchConfig,Z=0,be=null,Se=null,Ne=0,Je=0,jo=Hn(0),Ee=0,ca=null,lo=0,as=0,hu=0,Wr=null,We=null,vu=0,cr=1/0,Yt=null,Li=!1,ic=null,On=null,za=!1,kn=null,Fi=0,Hr=0,sc=null,ii=-1,si=0;function ze(){return Z&6?we():ii!==-1?ii:ii=we()}function Mn(e){return e.mode&1?Z&2&&Ne!==0?Ne&-Ne:zx.transition!==null?(si===0&&(si=am()),si):(e=ne,e!==0||(e=window.event,e=e===void 0?16:fm(e.type)),e):1}function Et(e,t,n,o){if(50<Hr)throw Hr=0,sc=null,Error(A(185));ga(e,n,o),(!(Z&2)||e!==be)&&(e===be&&(!(Z&2)&&(as|=n),Ee===4&&xn(e,Ne)),Ye(e,o),n===1&&Z===0&&!(t.mode&1)&&(cr=we()+500,ts&&Kn()))}function Ye(e,t){var n=e.callbackNode;zy(e,t);var o=Si(e,e===be?Ne:0);if(o===0)n!==null&&wd(n),e.callbackNode=null,e.callbackPriority=0;else if(t=o&-o,e.callbackPriority!==t){if(n!=null&&wd(n),t===1)e.tag===0?Bx(pf.bind(null,e)):Rm(pf.bind(null,e)),Mx(function(){!(Z&6)&&Kn()}),n=null;else{switch(im(o)){case 1:n=Uc;break;case 4:n=om;break;case 16:n=wi;break;case 536870912:n=rm;break;default:n=wi}n=Dh(n,Ch.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function Ch(e,t){if(ii=-1,si=0,Z&6)throw Error(A(327));var n=e.callbackNode;if(Uo()&&e.callbackNode!==n)return null;var o=Si(e,e===be?Ne:0);if(o===0)return null;if(o&30||o&e.expiredLanes||t)t=Bi(e,o);else{t=o;var r=Z;Z|=2;var a=Ph();(be!==e||Ne!==t)&&(Yt=null,cr=we()+500,oo(e,t));do try{i2();break}catch(s){Eh(e,s)}while(!0);tu(),ji.current=a,Z=r,Se!==null?t=0:(be=null,Ne=0,t=Ee)}if(t!==0){if(t===2&&(r=Ol(e),r!==0&&(o=r,t=lc(e,r))),t===1)throw n=ca,oo(e,0),xn(e,o),Ye(e,we()),n;if(t===6)xn(e,o);else{if(r=e.current.alternate,!(o&30)&&!r2(r)&&(t=Bi(e,o),t===2&&(a=Ol(e),a!==0&&(o=a,t=lc(e,a))),t===1))throw n=ca,oo(e,0),xn(e,o),Ye(e,we()),n;switch(e.finishedWork=r,e.finishedLanes=o,t){case 0:case 1:throw Error(A(345));case 2:Gn(e,We,Yt);break;case 3:if(xn(e,o),(o&130023424)===o&&(t=vu+500-we(),10<t)){if(Si(e,0)!==0)break;if(r=e.suspendedLanes,(r&o)!==o){ze(),e.pingedLanes|=e.suspendedLanes&r;break}e.timeoutHandle=Ul(Gn.bind(null,e,We,Yt),t);break}Gn(e,We,Yt);break;case 4:if(xn(e,o),(o&4194240)===o)break;for(t=e.eventTimes,r=-1;0<o;){var i=31-Ct(o);a=1<<i,i=t[i],i>r&&(r=i),o&=~a}if(o=r,o=we()-o,o=(120>o?120:480>o?480:1080>o?1080:1920>o?1920:3e3>o?3e3:4320>o?4320:1960*o2(o/1960))-o,10<o){e.timeoutHandle=Ul(Gn.bind(null,e,We,Yt),o);break}Gn(e,We,Yt);break;case 5:Gn(e,We,Yt);break;default:throw Error(A(329))}}}return Ye(e,we()),e.callbackNode===n?Ch.bind(null,e):null}function lc(e,t){var n=Wr;return e.current.memoizedState.isDehydrated&&(oo(e,t).flags|=256),e=Bi(e,t),e!==2&&(t=We,We=n,t!==null&&cc(t)),e}function cc(e){We===null?We=e:We.push.apply(We,e)}function r2(e){for(var t=e;;){if(t.flags&16384){var n=t.updateQueue;if(n!==null&&(n=n.stores,n!==null))for(var o=0;o<n.length;o++){var r=n[o],a=r.getSnapshot;r=r.value;try{if(!Pt(a(),r))return!1}catch{return!1}}}if(n=t.child,t.subtreeFlags&16384&&n!==null)n.return=t,t=n;else{if(t===e)break;for(;t.sibling===null;){if(t.return===null||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function xn(e,t){for(t&=~hu,t&=~as,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Ct(t),o=1<<n;e[n]=-1,t&=~o}}function pf(e){if(Z&6)throw Error(A(327));Uo();var t=Si(e,0);if(!(t&1))return Ye(e,we()),null;var n=Bi(e,t);if(e.tag!==0&&n===2){var o=Ol(e);o!==0&&(t=o,n=lc(e,o))}if(n===1)throw n=ca,oo(e,0),xn(e,t),Ye(e,we()),n;if(n===6)throw Error(A(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,Gn(e,We,Yt),Ye(e,we()),null}function gu(e,t){var n=Z;Z|=1;try{return e(t)}finally{Z=n,Z===0&&(cr=we()+500,ts&&Kn())}}function co(e){kn!==null&&kn.tag===0&&!(Z&6)&&Uo();var t=Z;Z|=1;var n=dt.transition,o=ne;try{if(dt.transition=null,ne=1,e)return e()}finally{ne=o,dt.transition=n,Z=t,!(Z&6)&&Kn()}}function yu(){Je=jo.current,fe(jo)}function oo(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(n!==-1&&(e.timeoutHandle=-1,Ox(n)),Se!==null)for(n=Se.return;n!==null;){var o=n;switch(Zc(o),o.tag){case 1:o=o.type.childContextTypes,o!=null&&ki();break;case 3:sr(),fe(Ke),fe(Me),su();break;case 5:iu(o);break;case 4:sr();break;case 13:fe(me);break;case 19:fe(me);break;case 10:nu(o.type._context);break;case 22:case 23:yu()}n=n.return}if(be=e,Se=e=jn(e.current,null),Ne=Je=t,Ee=0,ca=null,hu=as=lo=0,We=Wr=null,qn!==null){for(t=0;t<qn.length;t++)if(n=qn[t],o=n.interleaved,o!==null){n.interleaved=null;var r=o.next,a=n.pending;if(a!==null){var i=a.next;a.next=r,o.next=i}n.pending=o}qn=null}return e}function Eh(e,t){do{var n=Se;try{if(tu(),oi.current=Mi,Oi){for(var o=he.memoizedState;o!==null;){var r=o.queue;r!==null&&(r.pending=null),o=o.next}Oi=!1}if(so=0,Pe=Ce=he=null,Ur=!1,ia=0,mu.current=null,n===null||n.return===null){Ee=1,ca=t,Se=null;break}e:{var a=e,i=n.return,s=n,l=t;if(t=Ne,s.flags|=32768,l!==null&&typeof l=="object"&&typeof l.then=="function"){var c=l,f=s,d=f.tag;if(!(f.mode&1)&&(d===0||d===11||d===15)){var u=f.alternate;u?(f.updateQueue=u.updateQueue,f.memoizedState=u.memoizedState,f.lanes=u.lanes):(f.updateQueue=null,f.memoizedState=null)}var y=Jd(i);if(y!==null){y.flags&=-257,ef(y,i,s,a,t),y.mode&1&&Zd(a,c,t),t=y,l=c;var S=t.updateQueue;if(S===null){var h=new Set;h.add(l),t.updateQueue=h}else S.add(l);break e}else{if(!(t&1)){Zd(a,c,t),xu();break e}l=Error(A(426))}}else if(pe&&s.mode&1){var x=Jd(i);if(x!==null){!(x.flags&65536)&&(x.flags|=256),ef(x,i,s,a,t),Jc(lr(l,s));break e}}a=l=lr(l,s),Ee!==4&&(Ee=2),Wr===null?Wr=[a]:Wr.push(a),a=i;do{switch(a.tag){case 3:a.flags|=65536,t&=-t,a.lanes|=t;var m=ih(a,l,t);Kd(a,m);break e;case 1:s=l;var v=a.type,g=a.stateNode;if(!(a.flags&128)&&(typeof v.getDerivedStateFromError=="function"||g!==null&&typeof g.componentDidCatch=="function"&&(On===null||!On.has(g)))){a.flags|=65536,t&=-t,a.lanes|=t;var C=sh(a,s,t);Kd(a,C);break e}}a=a.return}while(a!==null)}kh(n)}catch(E){t=E,Se===n&&n!==null&&(Se=n=n.return);continue}break}while(!0)}function Ph(){var e=ji.current;return ji.current=Mi,e===null?Mi:e}function xu(){(Ee===0||Ee===3||Ee===2)&&(Ee=4),be===null||!(lo&268435455)&&!(as&268435455)||xn(be,Ne)}function Bi(e,t){var n=Z;Z|=2;var o=Ph();(be!==e||Ne!==t)&&(Yt=null,oo(e,t));do try{a2();break}catch(r){Eh(e,r)}while(!0);if(tu(),Z=n,ji.current=o,Se!==null)throw Error(A(261));return be=null,Ne=0,Ee}function a2(){for(;Se!==null;)bh(Se)}function i2(){for(;Se!==null&&!Ry();)bh(Se)}function bh(e){var t=Th(e.alternate,e,Je);e.memoizedProps=e.pendingProps,t===null?kh(e):Se=t,mu.current=null}function kh(e){var t=e;do{var n=t.alternate;if(e=t.return,t.flags&32768){if(n=Jx(n,t),n!==null){n.flags&=32767,Se=n;return}if(e!==null)e.flags|=32768,e.subtreeFlags=0,e.deletions=null;else{Ee=6,Se=null;return}}else if(n=Zx(n,t,Je),n!==null){Se=n;return}if(t=t.sibling,t!==null){Se=t;return}Se=t=e}while(t!==null);Ee===0&&(Ee=5)}function Gn(e,t,n){var o=ne,r=dt.transition;try{dt.transition=null,ne=1,s2(e,t,n,o)}finally{dt.transition=r,ne=o}return null}function s2(e,t,n,o){do Uo();while(kn!==null);if(Z&6)throw Error(A(327));n=e.finishedWork;var r=e.finishedLanes;if(n===null)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(A(177));e.callbackNode=null,e.callbackPriority=0;var a=n.lanes|n.childLanes;if($y(e,a),e===be&&(Se=be=null,Ne=0),!(n.subtreeFlags&2064)&&!(n.flags&2064)||za||(za=!0,Dh(wi,function(){return Uo(),null})),a=(n.flags&15990)!==0,n.subtreeFlags&15990||a){a=dt.transition,dt.transition=null;var i=ne;ne=1;var s=Z;Z|=4,mu.current=null,t2(e,n),wh(n,e),Nx(zl),Ci=!!Bl,zl=Bl=null,e.current=n,n2(n),Iy(),Z=s,ne=i,dt.transition=a}else e.current=n;if(za&&(za=!1,kn=e,Fi=r),a=e.pendingLanes,a===0&&(On=null),My(n.stateNode),Ye(e,we()),t!==null)for(o=e.onRecoverableError,n=0;n<t.length;n++)r=t[n],o(r.value,{componentStack:r.stack,digest:r.digest});if(Li)throw Li=!1,e=ic,ic=null,e;return Fi&1&&e.tag!==0&&Uo(),a=e.pendingLanes,a&1?e===sc?Hr++:(Hr=0,sc=e):Hr=0,Kn(),null}function Uo(){if(kn!==null){var e=im(Fi),t=dt.transition,n=ne;try{if(dt.transition=null,ne=16>e?16:e,kn===null)var o=!1;else{if(e=kn,kn=null,Fi=0,Z&6)throw Error(A(331));var r=Z;for(Z|=4,z=e.current;z!==null;){var a=z,i=a.child;if(z.flags&16){var s=a.deletions;if(s!==null){for(var l=0;l<s.length;l++){var c=s[l];for(z=c;z!==null;){var f=z;switch(f.tag){case 0:case 11:case 15:Vr(8,f,a)}var d=f.child;if(d!==null)d.return=f,z=d;else for(;z!==null;){f=z;var u=f.sibling,y=f.return;if(gh(f),f===c){z=null;break}if(u!==null){u.return=y,z=u;break}z=y}}}var S=a.alternate;if(S!==null){var h=S.child;if(h!==null){S.child=null;do{var x=h.sibling;h.sibling=null,h=x}while(h!==null)}}z=a}}if(a.subtreeFlags&2064&&i!==null)i.return=a,z=i;else e:for(;z!==null;){if(a=z,a.flags&2048)switch(a.tag){case 0:case 11:case 15:Vr(9,a,a.return)}var m=a.sibling;if(m!==null){m.return=a.return,z=m;break e}z=a.return}}var v=e.current;for(z=v;z!==null;){i=z;var g=i.child;if(i.subtreeFlags&2064&&g!==null)g.return=i,z=g;else e:for(i=v;z!==null;){if(s=z,s.flags&2048)try{switch(s.tag){case 0:case 11:case 15:rs(9,s)}}catch(E){xe(s,s.return,E)}if(s===i){z=null;break e}var C=s.sibling;if(C!==null){C.return=s.return,z=C;break e}z=s.return}}if(Z=r,Kn(),$t&&typeof $t.onPostCommitFiberRoot=="function")try{$t.onPostCommitFiberRoot(Xi,e)}catch{}o=!0}return o}finally{ne=n,dt.transition=t}}return!1}function mf(e,t,n){t=lr(n,t),t=ih(e,t,1),e=_n(e,t,1),t=ze(),e!==null&&(ga(e,1,t),Ye(e,t))}function xe(e,t,n){if(e.tag===3)mf(e,e,n);else for(;t!==null;){if(t.tag===3){mf(t,e,n);break}else if(t.tag===1){var o=t.stateNode;if(typeof t.type.getDerivedStateFromError=="function"||typeof o.componentDidCatch=="function"&&(On===null||!On.has(o))){e=lr(n,e),e=sh(t,e,1),t=_n(t,e,1),e=ze(),t!==null&&(ga(t,1,e),Ye(t,e));break}}t=t.return}}function l2(e,t,n){var o=e.pingCache;o!==null&&o.delete(t),t=ze(),e.pingedLanes|=e.suspendedLanes&n,be===e&&(Ne&n)===n&&(Ee===4||Ee===3&&(Ne&130023424)===Ne&&500>we()-vu?oo(e,0):hu|=n),Ye(e,t)}function Nh(e,t){t===0&&(e.mode&1?(t=Aa,Aa<<=1,!(Aa&130023424)&&(Aa=4194304)):t=1);var n=ze();e=tn(e,t),e!==null&&(ga(e,t,n),Ye(e,n))}function c2(e){var t=e.memoizedState,n=0;t!==null&&(n=t.retryLane),Nh(e,n)}function u2(e,t){var n=0;switch(e.tag){case 13:var o=e.stateNode,r=e.memoizedState;r!==null&&(n=r.retryLane);break;case 19:o=e.stateNode;break;default:throw Error(A(314))}o!==null&&o.delete(t),Nh(e,n)}var Th;Th=function(e,t,n){if(e!==null)if(e.memoizedProps!==t.pendingProps||Ke.current)He=!0;else{if(!(e.lanes&n)&&!(t.flags&128))return He=!1,qx(e,t,n);He=!!(e.flags&131072)}else He=!1,pe&&t.flags&1048576&&Im(t,Di,t.index);switch(t.lanes=0,t.tag){case 2:var o=t.type;ai(e,t),e=t.pendingProps;var r=rr(t,Me.current);$o(t,n),r=cu(null,t,o,e,r,n);var a=uu();return t.flags|=1,typeof r=="object"&&r!==null&&typeof r.render=="function"&&r.$$typeof===void 0?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Qe(o)?(a=!0,Ni(t)):a=!1,t.memoizedState=r.state!==null&&r.state!==void 0?r.state:null,ru(t),r.updater=os,t.stateNode=r,r._reactInternals=t,Gl(t,o,e,n),t=Zl(null,t,o,!0,a,n)):(t.tag=0,pe&&a&&qc(t),Fe(null,t,r,n),t=t.child),t;case 16:o=t.elementType;e:{switch(ai(e,t),e=t.pendingProps,r=o._init,o=r(o._payload),t.type=o,r=t.tag=f2(o),e=gt(o,e),r){case 0:t=ql(null,t,o,e,n);break e;case 1:t=of(null,t,o,e,n);break e;case 11:t=tf(null,t,o,e,n);break e;case 14:t=nf(null,t,o,gt(o.type,e),n);break e}throw Error(A(306,o,""))}return t;case 0:return o=t.type,r=t.pendingProps,r=t.elementType===o?r:gt(o,r),ql(e,t,o,r,n);case 1:return o=t.type,r=t.pendingProps,r=t.elementType===o?r:gt(o,r),of(e,t,o,r,n);case 3:e:{if(dh(t),e===null)throw Error(A(387));o=t.pendingProps,a=t.memoizedState,r=a.element,Fm(e,t),Ii(t,o,null,n);var i=t.memoizedState;if(o=i.element,a.isDehydrated)if(a={element:o,isDehydrated:!1,cache:i.cache,pendingSuspenseBoundaries:i.pendingSuspenseBoundaries,transitions:i.transitions},t.updateQueue.baseState=a,t.memoizedState=a,t.flags&256){r=lr(Error(A(423)),t),t=rf(e,t,o,n,r);break e}else if(o!==r){r=lr(Error(A(424)),t),t=rf(e,t,o,n,r);break e}else for(tt=In(t.stateNode.containerInfo.firstChild),nt=t,pe=!0,St=null,n=jm(t,null,o,n),t.child=n;n;)n.flags=n.flags&-3|4096,n=n.sibling;else{if(ar(),o===r){t=nn(e,t,n);break e}Fe(e,t,o,n)}t=t.child}return t;case 5:return Bm(t),e===null&&Kl(t),o=t.type,r=t.pendingProps,a=e!==null?e.memoizedProps:null,i=r.children,$l(o,r)?i=null:a!==null&&$l(o,a)&&(t.flags|=32),uh(e,t),Fe(e,t,i,n),t.child;case 6:return e===null&&Kl(t),null;case 13:return fh(e,t,n);case 4:return au(t,t.stateNode.containerInfo),o=t.pendingProps,e===null?t.child=ir(t,null,o,n):Fe(e,t,o,n),t.child;case 11:return o=t.type,r=t.pendingProps,r=t.elementType===o?r:gt(o,r),tf(e,t,o,r,n);case 7:return Fe(e,t,t.pendingProps,n),t.child;case 8:return Fe(e,t,t.pendingProps.children,n),t.child;case 12:return Fe(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(o=t.type._context,r=t.pendingProps,a=t.memoizedProps,i=r.value,se(Ai,o._currentValue),o._currentValue=i,a!==null)if(Pt(a.value,i)){if(a.children===r.children&&!Ke.current){t=nn(e,t,n);break e}}else for(a=t.child,a!==null&&(a.return=t);a!==null;){var s=a.dependencies;if(s!==null){i=a.child;for(var l=s.firstContext;l!==null;){if(l.context===o){if(a.tag===1){l=Zt(-1,n&-n),l.tag=2;var c=a.updateQueue;if(c!==null){c=c.shared;var f=c.pending;f===null?l.next=l:(l.next=f.next,f.next=l),c.pending=l}}a.lanes|=n,l=a.alternate,l!==null&&(l.lanes|=n),Ql(a.return,n,t),s.lanes|=n;break}l=l.next}}else if(a.tag===10)i=a.type===t.type?null:a.child;else if(a.tag===18){if(i=a.return,i===null)throw Error(A(341));i.lanes|=n,s=i.alternate,s!==null&&(s.lanes|=n),Ql(i,n,t),i=a.sibling}else i=a.child;if(i!==null)i.return=a;else for(i=a;i!==null;){if(i===t){i=null;break}if(a=i.sibling,a!==null){a.return=i.return,i=a;break}i=i.return}a=i}Fe(e,t,r.children,n),t=t.child}return t;case 9:return r=t.type,o=t.pendingProps.children,$o(t,n),r=ft(r),o=o(r),t.flags|=1,Fe(e,t,o,n),t.child;case 14:return o=t.type,r=gt(o,t.pendingProps),r=gt(o.type,r),nf(e,t,o,r,n);case 15:return lh(e,t,t.type,t.pendingProps,n);case 17:return o=t.type,r=t.pendingProps,r=t.elementType===o?r:gt(o,r),ai(e,t),t.tag=1,Qe(o)?(e=!0,Ni(t)):e=!1,$o(t,n),ah(t,o,r),Gl(t,o,r,n),Zl(null,t,o,!0,e,n);case 19:return ph(e,t,n);case 22:return ch(e,t,n)}throw Error(A(156,t.tag))};function Dh(e,t){return nm(e,t)}function d2(e,t,n,o){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=o,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function ut(e,t,n,o){return new d2(e,t,n,o)}function wu(e){return e=e.prototype,!(!e||!e.isReactComponent)}function f2(e){if(typeof e=="function")return wu(e)?1:0;if(e!=null){if(e=e.$$typeof,e===Bc)return 11;if(e===zc)return 14}return 2}function jn(e,t){var n=e.alternate;return n===null?(n=ut(e.tag,t,e.key,e.mode),n.elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=e.flags&14680064,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=t===null?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function li(e,t,n,o,r,a){var i=2;if(o=e,typeof e=="function")wu(e)&&(i=1);else if(typeof e=="string")i=5;else e:switch(e){case ko:return ro(n.children,r,a,t);case Fc:i=8,r|=8;break;case xl:return e=ut(12,n,t,r|2),e.elementType=xl,e.lanes=a,e;case wl:return e=ut(13,n,t,r),e.elementType=wl,e.lanes=a,e;case Sl:return e=ut(19,n,t,r),e.elementType=Sl,e.lanes=a,e;case Bp:return is(n,r,a,t);default:if(typeof e=="object"&&e!==null)switch(e.$$typeof){case Lp:i=10;break e;case Fp:i=9;break e;case Bc:i=11;break e;case zc:i=14;break e;case vn:i=16,o=null;break e}throw Error(A(130,e==null?e:typeof e,""))}return t=ut(i,n,t,r),t.elementType=e,t.type=o,t.lanes=a,t}function ro(e,t,n,o){return e=ut(7,e,o,t),e.lanes=n,e}function is(e,t,n,o){return e=ut(22,e,o,t),e.elementType=Bp,e.lanes=n,e.stateNode={isHidden:!1},e}function tl(e,t,n){return e=ut(6,e,null,t),e.lanes=n,e}function nl(e,t,n){return t=ut(4,e.children!==null?e.children:[],e.key,t),t.lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function p2(e,t,n,o,r){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=js(0),this.expirationTimes=js(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=js(0),this.identifierPrefix=o,this.onRecoverableError=r,this.mutableSourceEagerHydrationData=null}function Su(e,t,n,o,r,a,i,s,l){return e=new p2(e,t,n,s,l),t===1?(t=1,a===!0&&(t|=8)):t=0,a=ut(3,null,null,t),e.current=a,a.stateNode=e,a.memoizedState={element:o,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},ru(a),e}function m2(e,t,n){var o=3<arguments.length&&arguments[3]!==void 0?arguments[3]:null;return{$$typeof:bo,key:o==null?null:""+o,children:e,containerInfo:t,implementation:n}}function Ah(e){if(!e)return Fn;e=e._reactInternals;e:{if(mo(e)!==e||e.tag!==1)throw Error(A(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Qe(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(t!==null);throw Error(A(171))}if(e.tag===1){var n=e.type;if(Qe(n))return Am(e,n,t)}return t}function Rh(e,t,n,o,r,a,i,s,l){return e=Su(n,o,!0,e,r,a,i,s,l),e.context=Ah(null),n=e.current,o=ze(),r=Mn(n),a=Zt(o,r),a.callback=t??null,_n(n,a,r),e.current.lanes=r,ga(e,r,o),Ye(e,o),e}function ss(e,t,n,o){var r=t.current,a=ze(),i=Mn(r);return n=Ah(n),t.context===null?t.context=n:t.pendingContext=n,t=Zt(a,i),t.payload={element:e},o=o===void 0?null:o,o!==null&&(t.callback=o),e=_n(r,t,i),e!==null&&(Et(e,r,i,a),ni(e,r,i)),i}function zi(e){if(e=e.current,!e.child)return null;switch(e.child.tag){case 5:return e.child.stateNode;default:return e.child.stateNode}}function hf(e,t){if(e=e.memoizedState,e!==null&&e.dehydrated!==null){var n=e.retryLane;e.retryLane=n!==0&&n<t?n:t}}function Cu(e,t){hf(e,t),(e=e.alternate)&&hf(e,t)}function h2(){return null}var Ih=typeof reportError=="function"?reportError:function(e){console.error(e)};function Eu(e){this._internalRoot=e}ls.prototype.render=Eu.prototype.render=function(e){var t=this._internalRoot;if(t===null)throw Error(A(409));ss(e,t,null,null)};ls.prototype.unmount=Eu.prototype.unmount=function(){var e=this._internalRoot;if(e!==null){this._internalRoot=null;var t=e.containerInfo;co(function(){ss(null,e,null,null)}),t[en]=null}};function ls(e){this._internalRoot=e}ls.prototype.unstable_scheduleHydration=function(e){if(e){var t=cm();e={blockedOn:null,target:e,priority:t};for(var n=0;n<yn.length&&t!==0&&t<yn[n].priority;n++);yn.splice(n,0,e),n===0&&dm(e)}};function Pu(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11)}function cs(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11&&(e.nodeType!==8||e.nodeValue!==" react-mount-point-unstable "))}function vf(){}function v2(e,t,n,o,r){if(r){if(typeof o=="function"){var a=o;o=function(){var c=zi(i);a.call(c)}}var i=Rh(t,o,e,0,null,!1,!1,"",vf);return e._reactRootContainer=i,e[en]=i.current,ta(e.nodeType===8?e.parentNode:e),co(),i}for(;r=e.lastChild;)e.removeChild(r);if(typeof o=="function"){var s=o;o=function(){var c=zi(l);s.call(c)}}var l=Su(e,0,!1,null,null,!1,!1,"",vf);return e._reactRootContainer=l,e[en]=l.current,ta(e.nodeType===8?e.parentNode:e),co(function(){ss(t,l,n,o)}),l}function us(e,t,n,o,r){var a=n._reactRootContainer;if(a){var i=a;if(typeof r=="function"){var s=r;r=function(){var l=zi(i);s.call(l)}}ss(t,i,e,r)}else i=v2(n,t,e,r,o);return zi(i)}sm=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=Mr(t.pendingLanes);n!==0&&(Vc(t,n|1),Ye(t,we()),!(Z&6)&&(cr=we()+500,Kn()))}break;case 13:co(function(){var o=tn(e,1);if(o!==null){var r=ze();Et(o,e,1,r)}}),Cu(e,1)}};Wc=function(e){if(e.tag===13){var t=tn(e,134217728);if(t!==null){var n=ze();Et(t,e,134217728,n)}Cu(e,134217728)}};lm=function(e){if(e.tag===13){var t=Mn(e),n=tn(e,t);if(n!==null){var o=ze();Et(n,e,t,o)}Cu(e,t)}};cm=function(){return ne};um=function(e,t){var n=ne;try{return ne=e,t()}finally{ne=n}};Rl=function(e,t,n){switch(t){case"input":if(Pl(e,n),t=n.name,n.type==="radio"&&t!=null){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var o=n[t];if(o!==e&&o.form===e.form){var r=es(o);if(!r)throw Error(A(90));$p(o),Pl(o,r)}}}break;case"textarea":Vp(e,n);break;case"select":t=n.value,t!=null&&Lo(e,!!n.multiple,t,!1)}};Xp=gu;qp=co;var g2={usingClientEntryPoint:!1,Events:[xa,Ao,es,Yp,Gp,gu]},Ar={findFiberByHostInstance:Xn,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"},y2={bundleType:Ar.bundleType,version:Ar.version,rendererPackageName:Ar.rendererPackageName,rendererConfig:Ar.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:an.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return e=em(e),e===null?null:e.stateNode},findFiberByHostInstance:Ar.findFiberByHostInstance||h2,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__<"u"){var $a=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!$a.isDisabled&&$a.supportsFiber)try{Xi=$a.inject(y2),$t=$a}catch{}}at.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=g2;at.createPortal=function(e,t){var n=2<arguments.length&&arguments[2]!==void 0?arguments[2]:null;if(!Pu(t))throw Error(A(200));return m2(e,t,null,n)};at.createRoot=function(e,t){if(!Pu(e))throw Error(A(299));var n=!1,o="",r=Ih;return t!=null&&(t.unstable_strictMode===!0&&(n=!0),t.identifierPrefix!==void 0&&(o=t.identifierPrefix),t.onRecoverableError!==void 0&&(r=t.onRecoverableError)),t=Su(e,1,!1,null,null,n,!1,o,r),e[en]=t.current,ta(e.nodeType===8?e.parentNode:e),new Eu(t)};at.findDOMNode=function(e){if(e==null)return null;if(e.nodeType===1)return e;var t=e._reactInternals;if(t===void 0)throw typeof e.render=="function"?Error(A(188)):(e=Object.keys(e).join(","),Error(A(268,e)));return e=em(t),e=e===null?null:e.stateNode,e};at.flushSync=function(e){return co(e)};at.hydrate=function(e,t,n){if(!cs(t))throw Error(A(200));return us(null,e,t,!0,n)};at.hydrateRoot=function(e,t,n){if(!Pu(e))throw Error(A(405));var o=n!=null&&n.hydratedSources||null,r=!1,a="",i=Ih;if(n!=null&&(n.unstable_strictMode===!0&&(r=!0),n.identifierPrefix!==void 0&&(a=n.identifierPrefix),n.onRecoverableError!==void 0&&(i=n.onRecoverableError)),t=Rh(t,null,e,1,n??null,r,!1,a,i),e[en]=t.current,ta(e),o)for(e=0;e<o.length;e++)n=o[e],r=n._getVersion,r=r(n._source),t.mutableSourceEagerHydrationData==null?t.mutableSourceEagerHydrationData=[n,r]:t.mutableSourceEagerHydrationData.push(n,r);return new ls(t)};at.render=function(e,t,n){if(!cs(t))throw Error(A(200));return us(null,e,t,!1,n)};at.unmountComponentAtNode=function(e){if(!cs(e))throw Error(A(40));return e._reactRootContainer?(co(function(){us(null,null,e,!1,function(){e._reactRootContainer=null,e[en]=null})}),!0):!1};at.unstable_batchedUpdates=gu;at.unstable_renderSubtreeIntoContainer=function(e,t,n,o){if(!cs(n))throw Error(A(200));if(e==null||e._reactInternals===void 0)throw Error(A(38));return us(e,t,n,!1,o)};at.version="18.3.1-next-f1338f8080-20240426";function _h(){if(!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__>"u"||typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE!="function"))try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(_h)}catch(e){console.error(e)}}_h(),_p.exports=at;var Sa=_p.exports;const Oh=wp(Sa);var Mh,gf=Sa;Mh=gf.createRoot,gf.hydrateRoot;const x2=1,w2=1e6;let ol=0;function S2(){return ol=(ol+1)%Number.MAX_SAFE_INTEGER,ol.toString()}const rl=new Map,yf=e=>{if(rl.has(e))return;const t=setTimeout(()=>{rl.delete(e),Kr({type:"REMOVE_TOAST",toastId:e})},w2);rl.set(e,t)},C2=(e,t)=>{switch(t.type){case"ADD_TOAST":return{...e,toasts:[t.toast,...e.toasts].slice(0,x2)};case"UPDATE_TOAST":return{...e,toasts:e.toasts.map(n=>n.id===t.toast.id?{...n,...t.toast}:n)};case"DISMISS_TOAST":{const{toastId:n}=t;return n?yf(n):e.toasts.forEach(o=>{yf(o.id)}),{...e,toasts:e.toasts.map(o=>o.id===n||n===void 0?{...o,open:!1}:o)}}case"REMOVE_TOAST":return t.toastId===void 0?{...e,toasts:[]}:{...e,toasts:e.toasts.filter(n=>n.id!==t.toastId)}}},ci=[];let ui={toasts:[]};function Kr(e){ui=C2(ui,e),ci.forEach(t=>{t(ui)})}function E2({...e}){const t=S2(),n=r=>Kr({type:"UPDATE_TOAST",toast:{...r,id:t}}),o=()=>Kr({type:"DISMISS_TOAST",toastId:t});return Kr({type:"ADD_TOAST",toast:{...e,id:t,open:!0,onOpenChange:r=>{r||o()}}}),{id:t,dismiss:o,update:n}}function P2(){const[e,t]=p.useState(ui);return p.useEffect(()=>(ci.push(t),()=>{const n=ci.indexOf(t);n>-1&&ci.splice(n,1)}),[e]),{...e,toast:E2,dismiss:n=>Kr({type:"DISMISS_TOAST",toastId:n})}}function ee(e,t,{checkForDefaultPrevented:n=!0}={}){return function(r){if(e==null||e(r),n===!1||!r.defaultPrevented)return t==null?void 0:t(r)}}function b2(e,t){typeof e=="function"?e(t):e!=null&&(e.current=t)}function jh(...e){return t=>e.forEach(n=>b2(n,t))}function ge(...e){return p.useCallback(jh(...e),e)}function k2(e,t=[]){let n=[];function o(a,i){const s=p.createContext(i),l=n.length;n=[...n,i];function c(d){const{scope:u,children:y,...S}=d,h=(u==null?void 0:u[e][l])||s,x=p.useMemo(()=>S,Object.values(S));return w.jsx(h.Provider,{value:x,children:y})}function f(d,u){const y=(u==null?void 0:u[e][l])||s,S=p.useContext(y);if(S)return S;if(i!==void 0)return i;throw new Error(`\`${d}\` must be used within \`${a}\``)}return c.displayName=a+"Provider",[c,f]}const r=()=>{const a=n.map(i=>p.createContext(i));return function(s){const l=(s==null?void 0:s[e])||a;return p.useMemo(()=>({[`__scope${e}`]:{...s,[e]:l}}),[s,l])}};return r.scopeName=e,[o,N2(r,...t)]}function N2(...e){const t=e[0];if(e.length===1)return t;const n=()=>{const o=e.map(r=>({useScope:r(),scopeName:r.scopeName}));return function(a){const i=o.reduce((s,{useScope:l,scopeName:c})=>{const d=l(a)[`__scope${c}`];return{...s,...d}},{});return p.useMemo(()=>({[`__scope${t.scopeName}`]:i}),[i])}};return n.scopeName=t.scopeName,n}var ur=p.forwardRef((e,t)=>{const{children:n,...o}=e,r=p.Children.toArray(n),a=r.find(T2);if(a){const i=a.props.children,s=r.map(l=>l===a?p.Children.count(i)>1?p.Children.only(null):p.isValidElement(i)?i.props.children:null:l);return w.jsx(uc,{...o,ref:t,children:p.isValidElement(i)?p.cloneElement(i,void 0,s):null})}return w.jsx(uc,{...o,ref:t,children:n})});ur.displayName="Slot";var uc=p.forwardRef((e,t)=>{const{children:n,...o}=e;if(p.isValidElement(n)){const r=A2(n);return p.cloneElement(n,{...D2(o,n.props),ref:t?jh(t,r):r})}return p.Children.count(n)>1?p.Children.only(null):null});uc.displayName="SlotClone";var bu=({children:e})=>w.jsx(w.Fragment,{children:e});function T2(e){return p.isValidElement(e)&&e.type===bu}function D2(e,t){const n={...t};for(const o in t){const r=e[o],a=t[o];/^on[A-Z]/.test(o)?r&&a?n[o]=(...s)=>{a(...s),r(...s)}:r&&(n[o]=r):o==="style"?n[o]={...r,...a}:o==="className"&&(n[o]=[r,a].filter(Boolean).join(" "))}return{...e,...n}}function A2(e){var o,r;let t=(o=Object.getOwnPropertyDescriptor(e.props,"ref"))==null?void 0:o.get,n=t&&"isReactWarning"in t&&t.isReactWarning;return n?e.ref:(t=(r=Object.getOwnPropertyDescriptor(e,"ref"))==null?void 0:r.get,n=t&&"isReactWarning"in t&&t.isReactWarning,n?e.props.ref:e.props.ref||e.ref)}function Lh(e){const t=e+"CollectionProvider",[n,o]=k2(t),[r,a]=n(t,{collectionRef:{current:null},itemMap:new Map}),i=y=>{const{scope:S,children:h}=y,x=O.useRef(null),m=O.useRef(new Map).current;return w.jsx(r,{scope:S,itemMap:m,collectionRef:x,children:h})};i.displayName=t;const s=e+"CollectionSlot",l=O.forwardRef((y,S)=>{const{scope:h,children:x}=y,m=a(s,h),v=ge(S,m.collectionRef);return w.jsx(ur,{ref:v,children:x})});l.displayName=s;const c=e+"CollectionItemSlot",f="data-radix-collection-item",d=O.forwardRef((y,S)=>{const{scope:h,children:x,...m}=y,v=O.useRef(null),g=ge(S,v),C=a(c,h);return O.useEffect(()=>(C.itemMap.set(v,{ref:v,...m}),()=>void C.itemMap.delete(v))),w.jsx(ur,{[f]:"",ref:g,children:x})});d.displayName=c;function u(y){const S=a(e+"CollectionConsumer",y);return O.useCallback(()=>{const x=S.collectionRef.current;if(!x)return[];const m=Array.from(x.querySelectorAll(`[${f}]`));return Array.from(S.itemMap.values()).sort((C,E)=>m.indexOf(C.ref.current)-m.indexOf(E.ref.current))},[S.collectionRef,S.itemMap])}return[{Provider:i,Slot:l,ItemSlot:d},u,o]}function R2(e,t){const n=p.createContext(t),o=a=>{const{children:i,...s}=a,l=p.useMemo(()=>s,Object.values(s));return w.jsx(n.Provider,{value:l,children:i})};o.displayName=e+"Provider";function r(a){const i=p.useContext(n);if(i)return i;if(t!==void 0)return t;throw new Error(`\`${a}\` must be used within \`${e}\``)}return[o,r]}function vr(e,t=[]){let n=[];function o(a,i){const s=p.createContext(i),l=n.length;n=[...n,i];const c=d=>{var m;const{scope:u,children:y,...S}=d,h=((m=u==null?void 0:u[e])==null?void 0:m[l])||s,x=p.useMemo(()=>S,Object.values(S));return w.jsx(h.Provider,{value:x,children:y})};c.displayName=a+"Provider";function f(d,u){var h;const y=((h=u==null?void 0:u[e])==null?void 0:h[l])||s,S=p.useContext(y);if(S)return S;if(i!==void 0)return i;throw new Error(`\`${d}\` must be used within \`${a}\``)}return[c,f]}const r=()=>{const a=n.map(i=>p.createContext(i));return function(s){const l=(s==null?void 0:s[e])||a;return p.useMemo(()=>({[`__scope${e}`]:{...s,[e]:l}}),[s,l])}};return r.scopeName=e,[o,I2(r,...t)]}function I2(...e){const t=e[0];if(e.length===1)return t;const n=()=>{const o=e.map(r=>({useScope:r(),scopeName:r.scopeName}));return function(a){const i=o.reduce((s,{useScope:l,scopeName:c})=>{const d=l(a)[`__scope${c}`];return{...s,...d}},{});return p.useMemo(()=>({[`__scope${t.scopeName}`]:i}),[i])}};return n.scopeName=t.scopeName,n}var _2=["a","button","div","form","h2","h3","img","input","label","li","nav","ol","p","span","svg","ul"],re=_2.reduce((e,t)=>{const n=p.forwardRef((o,r)=>{const{asChild:a,...i}=o,s=a?ur:t;return typeof window<"u"&&(window[Symbol.for("radix-ui")]=!0),w.jsx(s,{...i,ref:r})});return n.displayName=`Primitive.${t}`,{...e,[t]:n}},{});function Fh(e,t){e&&Sa.flushSync(()=>e.dispatchEvent(t))}function mt(e){const t=p.useRef(e);return p.useEffect(()=>{t.current=e}),p.useMemo(()=>(...n)=>{var o;return(o=t.current)==null?void 0:o.call(t,...n)},[])}function O2(e,t=globalThis==null?void 0:globalThis.document){const n=mt(e);p.useEffect(()=>{const o=r=>{r.key==="Escape"&&n(r)};return t.addEventListener("keydown",o,{capture:!0}),()=>t.removeEventListener("keydown",o,{capture:!0})},[n,t])}var M2="DismissableLayer",dc="dismissableLayer.update",j2="dismissableLayer.pointerDownOutside",L2="dismissableLayer.focusOutside",xf,Bh=p.createContext({layers:new Set,layersWithOutsidePointerEventsDisabled:new Set,branches:new Set}),ds=p.forwardRef((e,t)=>{const{disableOutsidePointerEvents:n=!1,onEscapeKeyDown:o,onPointerDownOutside:r,onFocusOutside:a,onInteractOutside:i,onDismiss:s,...l}=e,c=p.useContext(Bh),[f,d]=p.useState(null),u=(f==null?void 0:f.ownerDocument)??(globalThis==null?void 0:globalThis.document),[,y]=p.useState({}),S=ge(t,k=>d(k)),h=Array.from(c.layers),[x]=[...c.layersWithOutsidePointerEventsDisabled].slice(-1),m=h.indexOf(x),v=f?h.indexOf(f):-1,g=c.layersWithOutsidePointerEventsDisabled.size>0,C=v>=m,E=B2(k=>{const N=k.target,j=[...c.branches].some(M=>M.contains(N));!C||j||(r==null||r(k),i==null||i(k),k.defaultPrevented||s==null||s())},u),P=z2(k=>{const N=k.target;[...c.branches].some(M=>M.contains(N))||(a==null||a(k),i==null||i(k),k.defaultPrevented||s==null||s())},u);return O2(k=>{v===c.layers.size-1&&(o==null||o(k),!k.defaultPrevented&&s&&(k.preventDefault(),s()))},u),p.useEffect(()=>{if(f)return n&&(c.layersWithOutsidePointerEventsDisabled.size===0&&(xf=u.body.style.pointerEvents,u.body.style.pointerEvents="none"),c.layersWithOutsidePointerEventsDisabled.add(f)),c.layers.add(f),wf(),()=>{n&&c.layersWithOutsidePointerEventsDisabled.size===1&&(u.body.style.pointerEvents=xf)}},[f,u,n,c]),p.useEffect(()=>()=>{f&&(c.layers.delete(f),c.layersWithOutsidePointerEventsDisabled.delete(f),wf())},[f,c]),p.useEffect(()=>{const k=()=>y({});return document.addEventListener(dc,k),()=>document.removeEventListener(dc,k)},[]),w.jsx(re.div,{...l,ref:S,style:{pointerEvents:g?C?"auto":"none":void 0,...e.style},onFocusCapture:ee(e.onFocusCapture,P.onFocusCapture),onBlurCapture:ee(e.onBlurCapture,P.onBlurCapture),onPointerDownCapture:ee(e.onPointerDownCapture,E.onPointerDownCapture)})});ds.displayName=M2;var F2="DismissableLayerBranch",zh=p.forwardRef((e,t)=>{const n=p.useContext(Bh),o=p.useRef(null),r=ge(t,o);return p.useEffect(()=>{const a=o.current;if(a)return n.branches.add(a),()=>{n.branches.delete(a)}},[n.branches]),w.jsx(re.div,{...e,ref:r})});zh.displayName=F2;function B2(e,t=globalThis==null?void 0:globalThis.document){const n=mt(e),o=p.useRef(!1),r=p.useRef(()=>{});return p.useEffect(()=>{const a=s=>{if(s.target&&!o.current){let l=function(){$h(j2,n,c,{discrete:!0})};const c={originalEvent:s};s.pointerType==="touch"?(t.removeEventListener("click",r.current),r.current=l,t.addEventListener("click",r.current,{once:!0})):l()}else t.removeEventListener("click",r.current);o.current=!1},i=window.setTimeout(()=>{t.addEventListener("pointerdown",a)},0);return()=>{window.clearTimeout(i),t.removeEventListener("pointerdown",a),t.removeEventListener("click",r.current)}},[t,n]),{onPointerDownCapture:()=>o.current=!0}}function z2(e,t=globalThis==null?void 0:globalThis.document){const n=mt(e),o=p.useRef(!1);return p.useEffect(()=>{const r=a=>{a.target&&!o.current&&$h(L2,n,{originalEvent:a},{discrete:!1})};return t.addEventListener("focusin",r),()=>t.removeEventListener("focusin",r)},[t,n]),{onFocusCapture:()=>o.current=!0,onBlurCapture:()=>o.current=!1}}function wf(){const e=new CustomEvent(dc);document.dispatchEvent(e)}function $h(e,t,n,{discrete:o}){const r=n.originalEvent.target,a=new CustomEvent(e,{bubbles:!1,cancelable:!0,detail:n});t&&r.addEventListener(e,t,{once:!0}),o?Fh(r,a):r.dispatchEvent(a)}var $2=ds,U2=zh,Bn=globalThis!=null&&globalThis.document?p.useLayoutEffect:()=>{},V2="Portal",ku=p.forwardRef((e,t)=>{var s;const{container:n,...o}=e,[r,a]=p.useState(!1);Bn(()=>a(!0),[]);const i=n||r&&((s=globalThis==null?void 0:globalThis.document)==null?void 0:s.body);return i?Oh.createPortal(w.jsx(re.div,{...o,ref:t}),i):null});ku.displayName=V2;function W2(e,t){return p.useReducer((n,o)=>t[n][o]??n,e)}var gr=e=>{const{present:t,children:n}=e,o=H2(t),r=typeof n=="function"?n({present:o.isPresent}):p.Children.only(n),a=ge(o.ref,K2(r));return typeof n=="function"||o.isPresent?p.cloneElement(r,{ref:a}):null};gr.displayName="Presence";function H2(e){const[t,n]=p.useState(),o=p.useRef({}),r=p.useRef(e),a=p.useRef("none"),i=e?"mounted":"unmounted",[s,l]=W2(i,{mounted:{UNMOUNT:"unmounted",ANIMATION_OUT:"unmountSuspended"},unmountSuspended:{MOUNT:"mounted",ANIMATION_END:"unmounted"},unmounted:{MOUNT:"mounted"}});return p.useEffect(()=>{const c=Ua(o.current);a.current=s==="mounted"?c:"none"},[s]),Bn(()=>{const c=o.current,f=r.current;if(f!==e){const u=a.current,y=Ua(c);e?l("MOUNT"):y==="none"||(c==null?void 0:c.display)==="none"?l("UNMOUNT"):l(f&&u!==y?"ANIMATION_OUT":"UNMOUNT"),r.current=e}},[e,l]),Bn(()=>{if(t){let c;const f=t.ownerDocument.defaultView??window,d=y=>{const h=Ua(o.current).includes(y.animationName);if(y.target===t&&h&&(l("ANIMATION_END"),!r.current)){const x=t.style.animationFillMode;t.style.animationFillMode="forwards",c=f.setTimeout(()=>{t.style.animationFillMode==="forwards"&&(t.style.animationFillMode=x)})}},u=y=>{y.target===t&&(a.current=Ua(o.current))};return t.addEventListener("animationstart",u),t.addEventListener("animationcancel",d),t.addEventListener("animationend",d),()=>{f.clearTimeout(c),t.removeEventListener("animationstart",u),t.removeEventListener("animationcancel",d),t.removeEventListener("animationend",d)}}else l("ANIMATION_END")},[t,l]),{isPresent:["mounted","unmountSuspended"].includes(s),ref:p.useCallback(c=>{c&&(o.current=getComputedStyle(c)),n(c)},[])}}function Ua(e){return(e==null?void 0:e.animationName)||"none"}function K2(e){var o,r;let t=(o=Object.getOwnPropertyDescriptor(e.props,"ref"))==null?void 0:o.get,n=t&&"isReactWarning"in t&&t.isReactWarning;return n?e.ref:(t=(r=Object.getOwnPropertyDescriptor(e,"ref"))==null?void 0:r.get,n=t&&"isReactWarning"in t&&t.isReactWarning,n?e.props.ref:e.props.ref||e.ref)}function fs({prop:e,defaultProp:t,onChange:n=()=>{}}){const[o,r]=Q2({defaultProp:t,onChange:n}),a=e!==void 0,i=a?e:o,s=mt(n),l=p.useCallback(c=>{if(a){const d=typeof c=="function"?c(e):c;d!==e&&s(d)}else r(c)},[a,e,r,s]);return[i,l]}function Q2({defaultProp:e,onChange:t}){const n=p.useState(e),[o]=n,r=p.useRef(o),a=mt(t);return p.useEffect(()=>{r.current!==o&&(a(o),r.current=o)},[o,r,a]),n}var Y2="VisuallyHidden",ps=p.forwardRef((e,t)=>w.jsx(re.span,{...e,ref:t,style:{position:"absolute",border:0,width:1,height:1,padding:0,margin:-1,overflow:"hidden",clip:"rect(0, 0, 0, 0)",whiteSpace:"nowrap",wordWrap:"normal",...e.style}}));ps.displayName=Y2;var G2=ps,Nu="ToastProvider",[Tu,X2,q2]=Lh("Toast"),[Uh,Tb]=vr("Toast",[q2]),[Z2,ms]=Uh(Nu),Vh=e=>{const{__scopeToast:t,label:n="Notification",duration:o=5e3,swipeDirection:r="right",swipeThreshold:a=50,children:i}=e,[s,l]=p.useState(null),[c,f]=p.useState(0),d=p.useRef(!1),u=p.useRef(!1);return n.trim()||console.error(`Invalid prop \`label\` supplied to \`${Nu}\`. Expected non-empty \`string\`.`),w.jsx(Tu.Provider,{scope:t,children:w.jsx(Z2,{scope:t,label:n,duration:o,swipeDirection:r,swipeThreshold:a,toastCount:c,viewport:s,onViewportChange:l,onToastAdd:p.useCallback(()=>f(y=>y+1),[]),onToastRemove:p.useCallback(()=>f(y=>y-1),[]),isFocusedToastEscapeKeyDownRef:d,isClosePausedRef:u,children:i})})};Vh.displayName=Nu;var Wh="ToastViewport",J2=["F8"],fc="toast.viewportPause",pc="toast.viewportResume",Hh=p.forwardRef((e,t)=>{const{__scopeToast:n,hotkey:o=J2,label:r="Notifications ({hotkey})",...a}=e,i=ms(Wh,n),s=X2(n),l=p.useRef(null),c=p.useRef(null),f=p.useRef(null),d=p.useRef(null),u=ge(t,d,i.onViewportChange),y=o.join("+").replace(/Key/g,"").replace(/Digit/g,""),S=i.toastCount>0;p.useEffect(()=>{const x=m=>{var g;o.length!==0&&o.every(C=>m[C]||m.code===C)&&((g=d.current)==null||g.focus())};return document.addEventListener("keydown",x),()=>document.removeEventListener("keydown",x)},[o]),p.useEffect(()=>{const x=l.current,m=d.current;if(S&&x&&m){const v=()=>{if(!i.isClosePausedRef.current){const P=new CustomEvent(fc);m.dispatchEvent(P),i.isClosePausedRef.current=!0}},g=()=>{if(i.isClosePausedRef.current){const P=new CustomEvent(pc);m.dispatchEvent(P),i.isClosePausedRef.current=!1}},C=P=>{!x.contains(P.relatedTarget)&&g()},E=()=>{x.contains(document.activeElement)||g()};return x.addEventListener("focusin",v),x.addEventListener("focusout",C),x.addEventListener("pointermove",v),x.addEventListener("pointerleave",E),window.addEventListener("blur",v),window.addEventListener("focus",g),()=>{x.removeEventListener("focusin",v),x.removeEventListener("focusout",C),x.removeEventListener("pointermove",v),x.removeEventListener("pointerleave",E),window.removeEventListener("blur",v),window.removeEventListener("focus",g)}}},[S,i.isClosePausedRef]);const h=p.useCallback(({tabbingDirection:x})=>{const v=s().map(g=>{const C=g.ref.current,E=[C,...f1(C)];return x==="forwards"?E:E.reverse()});return(x==="forwards"?v.reverse():v).flat()},[s]);return p.useEffect(()=>{const x=d.current;if(x){const m=v=>{var E,P,k;const g=v.altKey||v.ctrlKey||v.metaKey;if(v.key==="Tab"&&!g){const N=document.activeElement,j=v.shiftKey;if(v.target===x&&j){(E=c.current)==null||E.focus();return}const T=h({tabbingDirection:j?"backwards":"forwards"}),F=T.findIndex(_=>_===N);al(T.slice(F+1))?v.preventDefault():j?(P=c.current)==null||P.focus():(k=f.current)==null||k.focus()}};return x.addEventListener("keydown",m),()=>x.removeEventListener("keydown",m)}},[s,h]),w.jsxs(U2,{ref:l,role:"region","aria-label":r.replace("{hotkey}",y),tabIndex:-1,style:{pointerEvents:S?void 0:"none"},children:[S&&w.jsx(mc,{ref:c,onFocusFromOutsideViewport:()=>{const x=h({tabbingDirection:"forwards"});al(x)}}),w.jsx(Tu.Slot,{scope:n,children:w.jsx(re.ol,{tabIndex:-1,...a,ref:u})}),S&&w.jsx(mc,{ref:f,onFocusFromOutsideViewport:()=>{const x=h({tabbingDirection:"backwards"});al(x)}})]})});Hh.displayName=Wh;var Kh="ToastFocusProxy",mc=p.forwardRef((e,t)=>{const{__scopeToast:n,onFocusFromOutsideViewport:o,...r}=e,a=ms(Kh,n);return w.jsx(ps,{"aria-hidden":!0,tabIndex:0,...r,ref:t,style:{position:"fixed"},onFocus:i=>{var c;const s=i.relatedTarget;!((c=a.viewport)!=null&&c.contains(s))&&o()}})});mc.displayName=Kh;var hs="Toast",e1="toast.swipeStart",t1="toast.swipeMove",n1="toast.swipeCancel",o1="toast.swipeEnd",Qh=p.forwardRef((e,t)=>{const{forceMount:n,open:o,defaultOpen:r,onOpenChange:a,...i}=e,[s=!0,l]=fs({prop:o,defaultProp:r,onChange:a});return w.jsx(gr,{present:n||s,children:w.jsx(i1,{open:s,...i,ref:t,onClose:()=>l(!1),onPause:mt(e.onPause),onResume:mt(e.onResume),onSwipeStart:ee(e.onSwipeStart,c=>{c.currentTarget.setAttribute("data-swipe","start")}),onSwipeMove:ee(e.onSwipeMove,c=>{const{x:f,y:d}=c.detail.delta;c.currentTarget.setAttribute("data-swipe","move"),c.currentTarget.style.setProperty("--radix-toast-swipe-move-x",`${f}px`),c.currentTarget.style.setProperty("--radix-toast-swipe-move-y",`${d}px`)}),onSwipeCancel:ee(e.onSwipeCancel,c=>{c.currentTarget.setAttribute("data-swipe","cancel"),c.currentTarget.style.removeProperty("--radix-toast-swipe-move-x"),c.currentTarget.style.removeProperty("--radix-toast-swipe-move-y"),c.currentTarget.style.removeProperty("--radix-toast-swipe-end-x"),c.currentTarget.style.removeProperty("--radix-toast-swipe-end-y")}),onSwipeEnd:ee(e.onSwipeEnd,c=>{const{x:f,y:d}=c.detail.delta;c.currentTarget.setAttribute("data-swipe","end"),c.currentTarget.style.removeProperty("--radix-toast-swipe-move-x"),c.currentTarget.style.removeProperty("--radix-toast-swipe-move-y"),c.currentTarget.style.setProperty("--radix-toast-swipe-end-x",`${f}px`),c.currentTarget.style.setProperty("--radix-toast-swipe-end-y",`${d}px`),l(!1)})})})});Qh.displayName=hs;var[r1,a1]=Uh(hs,{onClose(){}}),i1=p.forwardRef((e,t)=>{const{__scopeToast:n,type:o="foreground",duration:r,open:a,onClose:i,onEscapeKeyDown:s,onPause:l,onResume:c,onSwipeStart:f,onSwipeMove:d,onSwipeCancel:u,onSwipeEnd:y,...S}=e,h=ms(hs,n),[x,m]=p.useState(null),v=ge(t,_=>m(_)),g=p.useRef(null),C=p.useRef(null),E=r||h.duration,P=p.useRef(0),k=p.useRef(E),N=p.useRef(0),{onToastAdd:j,onToastRemove:M}=h,I=mt(()=>{var K;(x==null?void 0:x.contains(document.activeElement))&&((K=h.viewport)==null||K.focus()),i()}),T=p.useCallback(_=>{!_||_===1/0||(window.clearTimeout(N.current),P.current=new Date().getTime(),N.current=window.setTimeout(I,_))},[I]);p.useEffect(()=>{const _=h.viewport;if(_){const K=()=>{T(k.current),c==null||c()},U=()=>{const H=new Date().getTime()-P.current;k.current=k.current-H,window.clearTimeout(N.current),l==null||l()};return _.addEventListener(fc,U),_.addEventListener(pc,K),()=>{_.removeEventListener(fc,U),_.removeEventListener(pc,K)}}},[h.viewport,E,l,c,T]),p.useEffect(()=>{a&&!h.isClosePausedRef.current&&T(E)},[a,E,h.isClosePausedRef,T]),p.useEffect(()=>(j(),()=>M()),[j,M]);const F=p.useMemo(()=>x?ev(x):null,[x]);return h.viewport?w.jsxs(w.Fragment,{children:[F&&w.jsx(s1,{__scopeToast:n,role:"status","aria-live":o==="foreground"?"assertive":"polite","aria-atomic":!0,children:F}),w.jsx(r1,{scope:n,onClose:I,children:Sa.createPortal(w.jsx(Tu.ItemSlot,{scope:n,children:w.jsx($2,{asChild:!0,onEscapeKeyDown:ee(s,()=>{h.isFocusedToastEscapeKeyDownRef.current||I(),h.isFocusedToastEscapeKeyDownRef.current=!1}),children:w.jsx(re.li,{role:"status","aria-live":"off","aria-atomic":!0,tabIndex:0,"data-state":a?"open":"closed","data-swipe-direction":h.swipeDirection,...S,ref:v,style:{userSelect:"none",touchAction:"none",...e.style},onKeyDown:ee(e.onKeyDown,_=>{_.key==="Escape"&&(s==null||s(_.nativeEvent),_.nativeEvent.defaultPrevented||(h.isFocusedToastEscapeKeyDownRef.current=!0,I()))}),onPointerDown:ee(e.onPointerDown,_=>{_.button===0&&(g.current={x:_.clientX,y:_.clientY})}),onPointerMove:ee(e.onPointerMove,_=>{if(!g.current)return;const K=_.clientX-g.current.x,U=_.clientY-g.current.y,H=!!C.current,b=["left","right"].includes(h.swipeDirection),R=["left","up"].includes(h.swipeDirection)?Math.min:Math.max,$=b?R(0,K):0,L=b?0:R(0,U),V=_.pointerType==="touch"?10:2,X={x:$,y:L},le={originalEvent:_,delta:X};H?(C.current=X,Va(t1,d,le,{discrete:!1})):Sf(X,h.swipeDirection,V)?(C.current=X,Va(e1,f,le,{discrete:!1}),_.target.setPointerCapture(_.pointerId)):(Math.abs(K)>V||Math.abs(U)>V)&&(g.current=null)}),onPointerUp:ee(e.onPointerUp,_=>{const K=C.current,U=_.target;if(U.hasPointerCapture(_.pointerId)&&U.releasePointerCapture(_.pointerId),C.current=null,g.current=null,K){const H=_.currentTarget,b={originalEvent:_,delta:K};Sf(K,h.swipeDirection,h.swipeThreshold)?Va(o1,y,b,{discrete:!0}):Va(n1,u,b,{discrete:!0}),H.addEventListener("click",R=>R.preventDefault(),{once:!0})}})})})}),h.viewport)})]}):null}),s1=e=>{const{__scopeToast:t,children:n,...o}=e,r=ms(hs,t),[a,i]=p.useState(!1),[s,l]=p.useState(!1);return u1(()=>i(!0)),p.useEffect(()=>{const c=window.setTimeout(()=>l(!0),1e3);return()=>window.clearTimeout(c)},[]),s?null:w.jsx(ku,{asChild:!0,children:w.jsx(ps,{...o,children:a&&w.jsxs(w.Fragment,{children:[r.label," ",n]})})})},l1="ToastTitle",Yh=p.forwardRef((e,t)=>{const{__scopeToast:n,...o}=e;return w.jsx(re.div,{...o,ref:t})});Yh.displayName=l1;var c1="ToastDescription",Gh=p.forwardRef((e,t)=>{const{__scopeToast:n,...o}=e;return w.jsx(re.div,{...o,ref:t})});Gh.displayName=c1;var Xh="ToastAction",qh=p.forwardRef((e,t)=>{const{altText:n,...o}=e;return n.trim()?w.jsx(Jh,{altText:n,asChild:!0,children:w.jsx(Du,{...o,ref:t})}):(console.error(`Invalid prop \`altText\` supplied to \`${Xh}\`. Expected non-empty \`string\`.`),null)});qh.displayName=Xh;var Zh="ToastClose",Du=p.forwardRef((e,t)=>{const{__scopeToast:n,...o}=e,r=a1(Zh,n);return w.jsx(Jh,{asChild:!0,children:w.jsx(re.button,{type:"button",...o,ref:t,onClick:ee(e.onClick,r.onClose)})})});Du.displayName=Zh;var Jh=p.forwardRef((e,t)=>{const{__scopeToast:n,altText:o,...r}=e;return w.jsx(re.div,{"data-radix-toast-announce-exclude":"","data-radix-toast-announce-alt":o||void 0,...r,ref:t})});function ev(e){const t=[];return Array.from(e.childNodes).forEach(o=>{if(o.nodeType===o.TEXT_NODE&&o.textContent&&t.push(o.textContent),d1(o)){const r=o.ariaHidden||o.hidden||o.style.display==="none",a=o.dataset.radixToastAnnounceExclude==="";if(!r)if(a){const i=o.dataset.radixToastAnnounceAlt;i&&t.push(i)}else t.push(...ev(o))}}),t}function Va(e,t,n,{discrete:o}){const r=n.originalEvent.currentTarget,a=new CustomEvent(e,{bubbles:!0,cancelable:!0,detail:n});t&&r.addEventListener(e,t,{once:!0}),o?Fh(r,a):r.dispatchEvent(a)}var Sf=(e,t,n=0)=>{const o=Math.abs(e.x),r=Math.abs(e.y),a=o>r;return t==="left"||t==="right"?a&&o>n:!a&&r>n};function u1(e=()=>{}){const t=mt(e);Bn(()=>{let n=0,o=0;return n=window.requestAnimationFrame(()=>o=window.requestAnimationFrame(t)),()=>{window.cancelAnimationFrame(n),window.cancelAnimationFrame(o)}},[t])}function d1(e){return e.nodeType===e.ELEMENT_NODE}function f1(e){const t=[],n=document.createTreeWalker(e,NodeFilter.SHOW_ELEMENT,{acceptNode:o=>{const r=o.tagName==="INPUT"&&o.type==="hidden";return o.disabled||o.hidden||r?NodeFilter.FILTER_SKIP:o.tabIndex>=0?NodeFilter.FILTER_ACCEPT:NodeFilter.FILTER_SKIP}});for(;n.nextNode();)t.push(n.currentNode);return t}function al(e){const t=document.activeElement;return e.some(n=>n===t?!0:(n.focus(),document.activeElement!==t))}var p1=Vh,tv=Hh,nv=Qh,ov=Yh,rv=Gh,av=qh,iv=Du;function sv(e){var t,n,o="";if(typeof e=="string"||typeof e=="number")o+=e;else if(typeof e=="object")if(Array.isArray(e)){var r=e.length;for(t=0;t<r;t++)e[t]&&(n=sv(e[t]))&&(o&&(o+=" "),o+=n)}else for(n in e)e[n]&&(o&&(o+=" "),o+=n);return o}function lv(){for(var e,t,n=0,o="",r=arguments.length;n<r;n++)(e=arguments[n])&&(t=sv(e))&&(o&&(o+=" "),o+=t);return o}const Cf=e=>typeof e=="boolean"?`${e}`:e===0?"0":e,Ef=lv,Au=(e,t)=>n=>{var o;if((t==null?void 0:t.variants)==null)return Ef(e,n==null?void 0:n.class,n==null?void 0:n.className);const{variants:r,defaultVariants:a}=t,i=Object.keys(r).map(c=>{const f=n==null?void 0:n[c],d=a==null?void 0:a[c];if(f===null)return null;const u=Cf(f)||Cf(d);return r[c][u]}),s=n&&Object.entries(n).reduce((c,f)=>{let[d,u]=f;return u===void 0||(c[d]=u),c},{}),l=t==null||(o=t.compoundVariants)===null||o===void 0?void 0:o.reduce((c,f)=>{let{class:d,className:u,...y}=f;return Object.entries(y).every(S=>{let[h,x]=S;return Array.isArray(x)?x.includes({...a,...s}[h]):{...a,...s}[h]===x})?[...c,d,u]:c},[]);return Ef(e,i,l,n==null?void 0:n.class,n==null?void 0:n.className)};/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const m1=e=>e.replace(/([a-z0-9])([A-Z])/g,"$1-$2").toLowerCase(),cv=(...e)=>e.filter((t,n,o)=>!!t&&t.trim()!==""&&o.indexOf(t)===n).join(" ").trim();/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */var h1={xmlns:"http://www.w3.org/2000/svg",width:24,height:24,viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:2,strokeLinecap:"round",strokeLinejoin:"round"};/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const v1=p.forwardRef(({color:e="currentColor",size:t=24,strokeWidth:n=2,absoluteStrokeWidth:o,className:r="",children:a,iconNode:i,...s},l)=>p.createElement("svg",{ref:l,...h1,width:t,height:t,stroke:e,strokeWidth:o?Number(n)*24/Number(t):n,className:cv("lucide",r),...s},[...i.map(([c,f])=>p.createElement(c,f)),...Array.isArray(a)?a:[a]]));/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const Ve=(e,t)=>{const n=p.forwardRef(({className:o,...r},a)=>p.createElement(v1,{ref:a,iconNode:t,className:cv(`lucide-${m1(e)}`,o),...r}));return n.displayName=`${e}`,n};/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const g1=Ve("AlignLeft",[["path",{d:"M15 12H3",key:"6jk70r"}],["path",{d:"M17 18H3",key:"1amg6g"}],["path",{d:"M21 6H3",key:"1jwq7v"}]]);/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const y1=Ve("AlignRight",[["path",{d:"M21 12H9",key:"dn1m92"}],["path",{d:"M21 18H7",key:"1ygte8"}],["path",{d:"M21 6H3",key:"1jwq7v"}]]);/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const x1=Ve("Download",[["path",{d:"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4",key:"ih7n3h"}],["polyline",{points:"7 10 12 15 17 10",key:"2ggqvy"}],["line",{x1:"12",x2:"12",y1:"15",y2:"3",key:"1vk2je"}]]);/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const w1=Ve("EyeOff",[["path",{d:"M10.733 5.076a10.744 10.744 0 0 1 11.205 6.575 1 1 0 0 1 0 .696 10.747 10.747 0 0 1-1.444 2.49",key:"ct8e1f"}],["path",{d:"M14.084 14.158a3 3 0 0 1-4.242-4.242",key:"151rxh"}],["path",{d:"M17.479 17.499a10.75 10.75 0 0 1-15.417-5.151 1 1 0 0 1 0-.696 10.75 10.75 0 0 1 4.446-5.143",key:"13bj9a"}],["path",{d:"m2 2 20 20",key:"1ooewy"}]]);/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const S1=Ve("Eye",[["path",{d:"M2.062 12.348a1 1 0 0 1 0-.696 10.75 10.75 0 0 1 19.876 0 1 1 0 0 1 0 .696 10.75 10.75 0 0 1-19.876 0",key:"1nclc0"}],["circle",{cx:"12",cy:"12",r:"3",key:"1v7zrd"}]]);/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const C1=Ve("FileText",[["path",{d:"M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z",key:"1rqfz7"}],["path",{d:"M14 2v4a2 2 0 0 0 2 2h4",key:"tnqrlb"}],["path",{d:"M10 9H8",key:"b1mrlr"}],["path",{d:"M16 13H8",key:"t4e002"}],["path",{d:"M16 17H8",key:"z1uh3a"}]]);/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const E1=Ve("Hash",[["line",{x1:"4",x2:"20",y1:"9",y2:"9",key:"4lhtct"}],["line",{x1:"4",x2:"20",y1:"15",y2:"15",key:"vyu0kd"}],["line",{x1:"10",x2:"8",y1:"3",y2:"21",key:"1ggp8o"}],["line",{x1:"16",x2:"14",y1:"3",y2:"21",key:"weycgp"}]]);/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const P1=Ve("Moon",[["path",{d:"M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z",key:"a7tn18"}]]);/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const b1=Ve("Plus",[["path",{d:"M5 12h14",key:"1ays0h"}],["path",{d:"M12 5v14",key:"s699le"}]]);/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const k1=Ve("Settings",[["path",{d:"M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z",key:"1qme2f"}],["circle",{cx:"12",cy:"12",r:"3",key:"1v7zrd"}]]);/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const N1=Ve("Sun",[["circle",{cx:"12",cy:"12",r:"4",key:"4exip2"}],["path",{d:"M12 2v2",key:"tus03m"}],["path",{d:"M12 20v2",key:"1lh1kg"}],["path",{d:"m4.93 4.93 1.41 1.41",key:"149t6j"}],["path",{d:"m17.66 17.66 1.41 1.41",key:"ptbguv"}],["path",{d:"M2 12h2",key:"1t8f8n"}],["path",{d:"M20 12h2",key:"1q8mjw"}],["path",{d:"m6.34 17.66-1.41 1.41",key:"1m8zz5"}],["path",{d:"m19.07 4.93-1.41 1.41",key:"1shlcs"}]]);/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const T1=Ve("TriangleAlert",[["path",{d:"m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3",key:"wmoenq"}],["path",{d:"M12 9v4",key:"juzpu7"}],["path",{d:"M12 17h.01",key:"p32p05"}]]);/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const D1=Ve("Type",[["polyline",{points:"4 7 4 4 20 4 20 7",key:"1nosan"}],["line",{x1:"9",x2:"15",y1:"20",y2:"20",key:"swin9y"}],["line",{x1:"12",x2:"12",y1:"4",y2:"20",key:"1tx1rr"}]]);/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const A1=Ve("Upload",[["path",{d:"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4",key:"ih7n3h"}],["polyline",{points:"17 8 12 3 7 8",key:"t8dd8p"}],["line",{x1:"12",x2:"12",y1:"3",y2:"15",key:"widbto"}]]);/**
 * @license lucide-react v0.462.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const uv=Ve("X",[["path",{d:"M18 6 6 18",key:"1bl5f8"}],["path",{d:"m6 6 12 12",key:"d8bk6v"}]]),Ru="-",R1=e=>{const t=_1(e),{conflictingClassGroups:n,conflictingClassGroupModifiers:o}=e;return{getClassGroupId:i=>{const s=i.split(Ru);return s[0]===""&&s.length!==1&&s.shift(),dv(s,t)||I1(i)},getConflictingClassGroupIds:(i,s)=>{const l=n[i]||[];return s&&o[i]?[...l,...o[i]]:l}}},dv=(e,t)=>{var i;if(e.length===0)return t.classGroupId;const n=e[0],o=t.nextPart.get(n),r=o?dv(e.slice(1),o):void 0;if(r)return r;if(t.validators.length===0)return;const a=e.join(Ru);return(i=t.validators.find(({validator:s})=>s(a)))==null?void 0:i.classGroupId},Pf=/^\[(.+)\]$/,I1=e=>{if(Pf.test(e)){const t=Pf.exec(e)[1],n=t==null?void 0:t.substring(0,t.indexOf(":"));if(n)return"arbitrary.."+n}},_1=e=>{const{theme:t,prefix:n}=e,o={nextPart:new Map,validators:[]};return M1(Object.entries(e.classGroups),n).forEach(([a,i])=>{hc(i,o,a,t)}),o},hc=(e,t,n,o)=>{e.forEach(r=>{if(typeof r=="string"){const a=r===""?t:bf(t,r);a.classGroupId=n;return}if(typeof r=="function"){if(O1(r)){hc(r(o),t,n,o);return}t.validators.push({validator:r,classGroupId:n});return}Object.entries(r).forEach(([a,i])=>{hc(i,bf(t,a),n,o)})})},bf=(e,t)=>{let n=e;return t.split(Ru).forEach(o=>{n.nextPart.has(o)||n.nextPart.set(o,{nextPart:new Map,validators:[]}),n=n.nextPart.get(o)}),n},O1=e=>e.isThemeGetter,M1=(e,t)=>t?e.map(([n,o])=>{const r=o.map(a=>typeof a=="string"?t+a:typeof a=="object"?Object.fromEntries(Object.entries(a).map(([i,s])=>[t+i,s])):a);return[n,r]}):e,j1=e=>{if(e<1)return{get:()=>{},set:()=>{}};let t=0,n=new Map,o=new Map;const r=(a,i)=>{n.set(a,i),t++,t>e&&(t=0,o=n,n=new Map)};return{get(a){let i=n.get(a);if(i!==void 0)return i;if((i=o.get(a))!==void 0)return r(a,i),i},set(a,i){n.has(a)?n.set(a,i):r(a,i)}}},fv="!",L1=e=>{const{separator:t,experimentalParseClassName:n}=e,o=t.length===1,r=t[0],a=t.length,i=s=>{const l=[];let c=0,f=0,d;for(let x=0;x<s.length;x++){let m=s[x];if(c===0){if(m===r&&(o||s.slice(x,x+a)===t)){l.push(s.slice(f,x)),f=x+a;continue}if(m==="/"){d=x;continue}}m==="["?c++:m==="]"&&c--}const u=l.length===0?s:s.substring(f),y=u.startsWith(fv),S=y?u.substring(1):u,h=d&&d>f?d-f:void 0;return{modifiers:l,hasImportantModifier:y,baseClassName:S,maybePostfixModifierPosition:h}};return n?s=>n({className:s,parseClassName:i}):i},F1=e=>{if(e.length<=1)return e;const t=[];let n=[];return e.forEach(o=>{o[0]==="["?(t.push(...n.sort(),o),n=[]):n.push(o)}),t.push(...n.sort()),t},B1=e=>({cache:j1(e.cacheSize),parseClassName:L1(e),...R1(e)}),z1=/\s+/,$1=(e,t)=>{const{parseClassName:n,getClassGroupId:o,getConflictingClassGroupIds:r}=t,a=[],i=e.trim().split(z1);let s="";for(let l=i.length-1;l>=0;l-=1){const c=i[l],{modifiers:f,hasImportantModifier:d,baseClassName:u,maybePostfixModifierPosition:y}=n(c);let S=!!y,h=o(S?u.substring(0,y):u);if(!h){if(!S){s=c+(s.length>0?" "+s:s);continue}if(h=o(u),!h){s=c+(s.length>0?" "+s:s);continue}S=!1}const x=F1(f).join(":"),m=d?x+fv:x,v=m+h;if(a.includes(v))continue;a.push(v);const g=r(h,S);for(let C=0;C<g.length;++C){const E=g[C];a.push(m+E)}s=c+(s.length>0?" "+s:s)}return s};function U1(){let e=0,t,n,o="";for(;e<arguments.length;)(t=arguments[e++])&&(n=pv(t))&&(o&&(o+=" "),o+=n);return o}const pv=e=>{if(typeof e=="string")return e;let t,n="";for(let o=0;o<e.length;o++)e[o]&&(t=pv(e[o]))&&(n&&(n+=" "),n+=t);return n};function V1(e,...t){let n,o,r,a=i;function i(l){const c=t.reduce((f,d)=>d(f),e());return n=B1(c),o=n.cache.get,r=n.cache.set,a=s,s(l)}function s(l){const c=o(l);if(c)return c;const f=$1(l,n);return r(l,f),f}return function(){return a(U1.apply(null,arguments))}}const ue=e=>{const t=n=>n[e]||[];return t.isThemeGetter=!0,t},mv=/^\[(?:([a-z-]+):)?(.+)\]$/i,W1=/^\d+\/\d+$/,H1=new Set(["px","full","screen"]),K1=/^(\d+(\.\d+)?)?(xs|sm|md|lg|xl)$/,Q1=/\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\b(calc|min|max|clamp)\(.+\)|^0$/,Y1=/^(rgba?|hsla?|hwb|(ok)?(lab|lch))\(.+\)$/,G1=/^(inset_)?-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/,X1=/^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\(.+\)$/,Kt=e=>Vo(e)||H1.has(e)||W1.test(e),fn=e=>yr(e,"length",rw),Vo=e=>!!e&&!Number.isNaN(Number(e)),il=e=>yr(e,"number",Vo),Rr=e=>!!e&&Number.isInteger(Number(e)),q1=e=>e.endsWith("%")&&Vo(e.slice(0,-1)),Y=e=>mv.test(e),pn=e=>K1.test(e),Z1=new Set(["length","size","percentage"]),J1=e=>yr(e,Z1,hv),ew=e=>yr(e,"position",hv),tw=new Set(["image","url"]),nw=e=>yr(e,tw,iw),ow=e=>yr(e,"",aw),Ir=()=>!0,yr=(e,t,n)=>{const o=mv.exec(e);return o?o[1]?typeof t=="string"?o[1]===t:t.has(o[1]):n(o[2]):!1},rw=e=>Q1.test(e)&&!Y1.test(e),hv=()=>!1,aw=e=>G1.test(e),iw=e=>X1.test(e),sw=()=>{const e=ue("colors"),t=ue("spacing"),n=ue("blur"),o=ue("brightness"),r=ue("borderColor"),a=ue("borderRadius"),i=ue("borderSpacing"),s=ue("borderWidth"),l=ue("contrast"),c=ue("grayscale"),f=ue("hueRotate"),d=ue("invert"),u=ue("gap"),y=ue("gradientColorStops"),S=ue("gradientColorStopPositions"),h=ue("inset"),x=ue("margin"),m=ue("opacity"),v=ue("padding"),g=ue("saturate"),C=ue("scale"),E=ue("sepia"),P=ue("skew"),k=ue("space"),N=ue("translate"),j=()=>["auto","contain","none"],M=()=>["auto","hidden","clip","visible","scroll"],I=()=>["auto",Y,t],T=()=>[Y,t],F=()=>["",Kt,fn],_=()=>["auto",Vo,Y],K=()=>["bottom","center","left","left-bottom","left-top","right","right-bottom","right-top","top"],U=()=>["solid","dashed","dotted","double","none"],H=()=>["normal","multiply","screen","overlay","darken","lighten","color-dodge","color-burn","hard-light","soft-light","difference","exclusion","hue","saturation","color","luminosity"],b=()=>["start","end","center","between","around","evenly","stretch"],R=()=>["","0",Y],$=()=>["auto","avoid","all","avoid-page","page","left","right","column"],L=()=>[Vo,Y];return{cacheSize:500,separator:":",theme:{colors:[Ir],spacing:[Kt,fn],blur:["none","",pn,Y],brightness:L(),borderColor:[e],borderRadius:["none","","full",pn,Y],borderSpacing:T(),borderWidth:F(),contrast:L(),grayscale:R(),hueRotate:L(),invert:R(),gap:T(),gradientColorStops:[e],gradientColorStopPositions:[q1,fn],inset:I(),margin:I(),opacity:L(),padding:T(),saturate:L(),scale:L(),sepia:R(),skew:L(),space:T(),translate:T()},classGroups:{aspect:[{aspect:["auto","square","video",Y]}],container:["container"],columns:[{columns:[pn]}],"break-after":[{"break-after":$()}],"break-before":[{"break-before":$()}],"break-inside":[{"break-inside":["auto","avoid","avoid-page","avoid-column"]}],"box-decoration":[{"box-decoration":["slice","clone"]}],box:[{box:["border","content"]}],display:["block","inline-block","inline","flex","inline-flex","table","inline-table","table-caption","table-cell","table-column","table-column-group","table-footer-group","table-header-group","table-row-group","table-row","flow-root","grid","inline-grid","contents","list-item","hidden"],float:[{float:["right","left","none","start","end"]}],clear:[{clear:["left","right","both","none","start","end"]}],isolation:["isolate","isolation-auto"],"object-fit":[{object:["contain","cover","fill","none","scale-down"]}],"object-position":[{object:[...K(),Y]}],overflow:[{overflow:M()}],"overflow-x":[{"overflow-x":M()}],"overflow-y":[{"overflow-y":M()}],overscroll:[{overscroll:j()}],"overscroll-x":[{"overscroll-x":j()}],"overscroll-y":[{"overscroll-y":j()}],position:["static","fixed","absolute","relative","sticky"],inset:[{inset:[h]}],"inset-x":[{"inset-x":[h]}],"inset-y":[{"inset-y":[h]}],start:[{start:[h]}],end:[{end:[h]}],top:[{top:[h]}],right:[{right:[h]}],bottom:[{bottom:[h]}],left:[{left:[h]}],visibility:["visible","invisible","collapse"],z:[{z:["auto",Rr,Y]}],basis:[{basis:I()}],"flex-direction":[{flex:["row","row-reverse","col","col-reverse"]}],"flex-wrap":[{flex:["wrap","wrap-reverse","nowrap"]}],flex:[{flex:["1","auto","initial","none",Y]}],grow:[{grow:R()}],shrink:[{shrink:R()}],order:[{order:["first","last","none",Rr,Y]}],"grid-cols":[{"grid-cols":[Ir]}],"col-start-end":[{col:["auto",{span:["full",Rr,Y]},Y]}],"col-start":[{"col-start":_()}],"col-end":[{"col-end":_()}],"grid-rows":[{"grid-rows":[Ir]}],"row-start-end":[{row:["auto",{span:[Rr,Y]},Y]}],"row-start":[{"row-start":_()}],"row-end":[{"row-end":_()}],"grid-flow":[{"grid-flow":["row","col","dense","row-dense","col-dense"]}],"auto-cols":[{"auto-cols":["auto","min","max","fr",Y]}],"auto-rows":[{"auto-rows":["auto","min","max","fr",Y]}],gap:[{gap:[u]}],"gap-x":[{"gap-x":[u]}],"gap-y":[{"gap-y":[u]}],"justify-content":[{justify:["normal",...b()]}],"justify-items":[{"justify-items":["start","end","center","stretch"]}],"justify-self":[{"justify-self":["auto","start","end","center","stretch"]}],"align-content":[{content:["normal",...b(),"baseline"]}],"align-items":[{items:["start","end","center","baseline","stretch"]}],"align-self":[{self:["auto","start","end","center","stretch","baseline"]}],"place-content":[{"place-content":[...b(),"baseline"]}],"place-items":[{"place-items":["start","end","center","baseline","stretch"]}],"place-self":[{"place-self":["auto","start","end","center","stretch"]}],p:[{p:[v]}],px:[{px:[v]}],py:[{py:[v]}],ps:[{ps:[v]}],pe:[{pe:[v]}],pt:[{pt:[v]}],pr:[{pr:[v]}],pb:[{pb:[v]}],pl:[{pl:[v]}],m:[{m:[x]}],mx:[{mx:[x]}],my:[{my:[x]}],ms:[{ms:[x]}],me:[{me:[x]}],mt:[{mt:[x]}],mr:[{mr:[x]}],mb:[{mb:[x]}],ml:[{ml:[x]}],"space-x":[{"space-x":[k]}],"space-x-reverse":["space-x-reverse"],"space-y":[{"space-y":[k]}],"space-y-reverse":["space-y-reverse"],w:[{w:["auto","min","max","fit","svw","lvw","dvw",Y,t]}],"min-w":[{"min-w":[Y,t,"min","max","fit"]}],"max-w":[{"max-w":[Y,t,"none","full","min","max","fit","prose",{screen:[pn]},pn]}],h:[{h:[Y,t,"auto","min","max","fit","svh","lvh","dvh"]}],"min-h":[{"min-h":[Y,t,"min","max","fit","svh","lvh","dvh"]}],"max-h":[{"max-h":[Y,t,"min","max","fit","svh","lvh","dvh"]}],size:[{size:[Y,t,"auto","min","max","fit"]}],"font-size":[{text:["base",pn,fn]}],"font-smoothing":["antialiased","subpixel-antialiased"],"font-style":["italic","not-italic"],"font-weight":[{font:["thin","extralight","light","normal","medium","semibold","bold","extrabold","black",il]}],"font-family":[{font:[Ir]}],"fvn-normal":["normal-nums"],"fvn-ordinal":["ordinal"],"fvn-slashed-zero":["slashed-zero"],"fvn-figure":["lining-nums","oldstyle-nums"],"fvn-spacing":["proportional-nums","tabular-nums"],"fvn-fraction":["diagonal-fractions","stacked-fractons"],tracking:[{tracking:["tighter","tight","normal","wide","wider","widest",Y]}],"line-clamp":[{"line-clamp":["none",Vo,il]}],leading:[{leading:["none","tight","snug","normal","relaxed","loose",Kt,Y]}],"list-image":[{"list-image":["none",Y]}],"list-style-type":[{list:["none","disc","decimal",Y]}],"list-style-position":[{list:["inside","outside"]}],"placeholder-color":[{placeholder:[e]}],"placeholder-opacity":[{"placeholder-opacity":[m]}],"text-alignment":[{text:["left","center","right","justify","start","end"]}],"text-color":[{text:[e]}],"text-opacity":[{"text-opacity":[m]}],"text-decoration":["underline","overline","line-through","no-underline"],"text-decoration-style":[{decoration:[...U(),"wavy"]}],"text-decoration-thickness":[{decoration:["auto","from-font",Kt,fn]}],"underline-offset":[{"underline-offset":["auto",Kt,Y]}],"text-decoration-color":[{decoration:[e]}],"text-transform":["uppercase","lowercase","capitalize","normal-case"],"text-overflow":["truncate","text-ellipsis","text-clip"],"text-wrap":[{text:["wrap","nowrap","balance","pretty"]}],indent:[{indent:T()}],"vertical-align":[{align:["baseline","top","middle","bottom","text-top","text-bottom","sub","super",Y]}],whitespace:[{whitespace:["normal","nowrap","pre","pre-line","pre-wrap","break-spaces"]}],break:[{break:["normal","words","all","keep"]}],hyphens:[{hyphens:["none","manual","auto"]}],content:[{content:["none",Y]}],"bg-attachment":[{bg:["fixed","local","scroll"]}],"bg-clip":[{"bg-clip":["border","padding","content","text"]}],"bg-opacity":[{"bg-opacity":[m]}],"bg-origin":[{"bg-origin":["border","padding","content"]}],"bg-position":[{bg:[...K(),ew]}],"bg-repeat":[{bg:["no-repeat",{repeat:["","x","y","round","space"]}]}],"bg-size":[{bg:["auto","cover","contain",J1]}],"bg-image":[{bg:["none",{"gradient-to":["t","tr","r","br","b","bl","l","tl"]},nw]}],"bg-color":[{bg:[e]}],"gradient-from-pos":[{from:[S]}],"gradient-via-pos":[{via:[S]}],"gradient-to-pos":[{to:[S]}],"gradient-from":[{from:[y]}],"gradient-via":[{via:[y]}],"gradient-to":[{to:[y]}],rounded:[{rounded:[a]}],"rounded-s":[{"rounded-s":[a]}],"rounded-e":[{"rounded-e":[a]}],"rounded-t":[{"rounded-t":[a]}],"rounded-r":[{"rounded-r":[a]}],"rounded-b":[{"rounded-b":[a]}],"rounded-l":[{"rounded-l":[a]}],"rounded-ss":[{"rounded-ss":[a]}],"rounded-se":[{"rounded-se":[a]}],"rounded-ee":[{"rounded-ee":[a]}],"rounded-es":[{"rounded-es":[a]}],"rounded-tl":[{"rounded-tl":[a]}],"rounded-tr":[{"rounded-tr":[a]}],"rounded-br":[{"rounded-br":[a]}],"rounded-bl":[{"rounded-bl":[a]}],"border-w":[{border:[s]}],"border-w-x":[{"border-x":[s]}],"border-w-y":[{"border-y":[s]}],"border-w-s":[{"border-s":[s]}],"border-w-e":[{"border-e":[s]}],"border-w-t":[{"border-t":[s]}],"border-w-r":[{"border-r":[s]}],"border-w-b":[{"border-b":[s]}],"border-w-l":[{"border-l":[s]}],"border-opacity":[{"border-opacity":[m]}],"border-style":[{border:[...U(),"hidden"]}],"divide-x":[{"divide-x":[s]}],"divide-x-reverse":["divide-x-reverse"],"divide-y":[{"divide-y":[s]}],"divide-y-reverse":["divide-y-reverse"],"divide-opacity":[{"divide-opacity":[m]}],"divide-style":[{divide:U()}],"border-color":[{border:[r]}],"border-color-x":[{"border-x":[r]}],"border-color-y":[{"border-y":[r]}],"border-color-s":[{"border-s":[r]}],"border-color-e":[{"border-e":[r]}],"border-color-t":[{"border-t":[r]}],"border-color-r":[{"border-r":[r]}],"border-color-b":[{"border-b":[r]}],"border-color-l":[{"border-l":[r]}],"divide-color":[{divide:[r]}],"outline-style":[{outline:["",...U()]}],"outline-offset":[{"outline-offset":[Kt,Y]}],"outline-w":[{outline:[Kt,fn]}],"outline-color":[{outline:[e]}],"ring-w":[{ring:F()}],"ring-w-inset":["ring-inset"],"ring-color":[{ring:[e]}],"ring-opacity":[{"ring-opacity":[m]}],"ring-offset-w":[{"ring-offset":[Kt,fn]}],"ring-offset-color":[{"ring-offset":[e]}],shadow:[{shadow:["","inner","none",pn,ow]}],"shadow-color":[{shadow:[Ir]}],opacity:[{opacity:[m]}],"mix-blend":[{"mix-blend":[...H(),"plus-lighter","plus-darker"]}],"bg-blend":[{"bg-blend":H()}],filter:[{filter:["","none"]}],blur:[{blur:[n]}],brightness:[{brightness:[o]}],contrast:[{contrast:[l]}],"drop-shadow":[{"drop-shadow":["","none",pn,Y]}],grayscale:[{grayscale:[c]}],"hue-rotate":[{"hue-rotate":[f]}],invert:[{invert:[d]}],saturate:[{saturate:[g]}],sepia:[{sepia:[E]}],"backdrop-filter":[{"backdrop-filter":["","none"]}],"backdrop-blur":[{"backdrop-blur":[n]}],"backdrop-brightness":[{"backdrop-brightness":[o]}],"backdrop-contrast":[{"backdrop-contrast":[l]}],"backdrop-grayscale":[{"backdrop-grayscale":[c]}],"backdrop-hue-rotate":[{"backdrop-hue-rotate":[f]}],"backdrop-invert":[{"backdrop-invert":[d]}],"backdrop-opacity":[{"backdrop-opacity":[m]}],"backdrop-saturate":[{"backdrop-saturate":[g]}],"backdrop-sepia":[{"backdrop-sepia":[E]}],"border-collapse":[{border:["collapse","separate"]}],"border-spacing":[{"border-spacing":[i]}],"border-spacing-x":[{"border-spacing-x":[i]}],"border-spacing-y":[{"border-spacing-y":[i]}],"table-layout":[{table:["auto","fixed"]}],caption:[{caption:["top","bottom"]}],transition:[{transition:["none","all","","colors","opacity","shadow","transform",Y]}],duration:[{duration:L()}],ease:[{ease:["linear","in","out","in-out",Y]}],delay:[{delay:L()}],animate:[{animate:["none","spin","ping","pulse","bounce",Y]}],transform:[{transform:["","gpu","none"]}],scale:[{scale:[C]}],"scale-x":[{"scale-x":[C]}],"scale-y":[{"scale-y":[C]}],rotate:[{rotate:[Rr,Y]}],"translate-x":[{"translate-x":[N]}],"translate-y":[{"translate-y":[N]}],"skew-x":[{"skew-x":[P]}],"skew-y":[{"skew-y":[P]}],"transform-origin":[{origin:["center","top","top-right","right","bottom-right","bottom","bottom-left","left","top-left",Y]}],accent:[{accent:["auto",e]}],appearance:[{appearance:["none","auto"]}],cursor:[{cursor:["auto","default","pointer","wait","text","move","help","not-allowed","none","context-menu","progress","cell","crosshair","vertical-text","alias","copy","no-drop","grab","grabbing","all-scroll","col-resize","row-resize","n-resize","e-resize","s-resize","w-resize","ne-resize","nw-resize","se-resize","sw-resize","ew-resize","ns-resize","nesw-resize","nwse-resize","zoom-in","zoom-out",Y]}],"caret-color":[{caret:[e]}],"pointer-events":[{"pointer-events":["none","auto"]}],resize:[{resize:["none","y","x",""]}],"scroll-behavior":[{scroll:["auto","smooth"]}],"scroll-m":[{"scroll-m":T()}],"scroll-mx":[{"scroll-mx":T()}],"scroll-my":[{"scroll-my":T()}],"scroll-ms":[{"scroll-ms":T()}],"scroll-me":[{"scroll-me":T()}],"scroll-mt":[{"scroll-mt":T()}],"scroll-mr":[{"scroll-mr":T()}],"scroll-mb":[{"scroll-mb":T()}],"scroll-ml":[{"scroll-ml":T()}],"scroll-p":[{"scroll-p":T()}],"scroll-px":[{"scroll-px":T()}],"scroll-py":[{"scroll-py":T()}],"scroll-ps":[{"scroll-ps":T()}],"scroll-pe":[{"scroll-pe":T()}],"scroll-pt":[{"scroll-pt":T()}],"scroll-pr":[{"scroll-pr":T()}],"scroll-pb":[{"scroll-pb":T()}],"scroll-pl":[{"scroll-pl":T()}],"snap-align":[{snap:["start","end","center","align-none"]}],"snap-stop":[{snap:["normal","always"]}],"snap-type":[{snap:["none","x","y","both"]}],"snap-strictness":[{snap:["mandatory","proximity"]}],touch:[{touch:["auto","none","manipulation"]}],"touch-x":[{"touch-pan":["x","left","right"]}],"touch-y":[{"touch-pan":["y","up","down"]}],"touch-pz":["touch-pinch-zoom"],select:[{select:["none","text","all","auto"]}],"will-change":[{"will-change":["auto","scroll","contents","transform",Y]}],fill:[{fill:[e,"none"]}],"stroke-w":[{stroke:[Kt,fn,il]}],stroke:[{stroke:[e,"none"]}],sr:["sr-only","not-sr-only"],"forced-color-adjust":[{"forced-color-adjust":["auto","none"]}]},conflictingClassGroups:{overflow:["overflow-x","overflow-y"],overscroll:["overscroll-x","overscroll-y"],inset:["inset-x","inset-y","start","end","top","right","bottom","left"],"inset-x":["right","left"],"inset-y":["top","bottom"],flex:["basis","grow","shrink"],gap:["gap-x","gap-y"],p:["px","py","ps","pe","pt","pr","pb","pl"],px:["pr","pl"],py:["pt","pb"],m:["mx","my","ms","me","mt","mr","mb","ml"],mx:["mr","ml"],my:["mt","mb"],size:["w","h"],"font-size":["leading"],"fvn-normal":["fvn-ordinal","fvn-slashed-zero","fvn-figure","fvn-spacing","fvn-fraction"],"fvn-ordinal":["fvn-normal"],"fvn-slashed-zero":["fvn-normal"],"fvn-figure":["fvn-normal"],"fvn-spacing":["fvn-normal"],"fvn-fraction":["fvn-normal"],"line-clamp":["display","overflow"],rounded:["rounded-s","rounded-e","rounded-t","rounded-r","rounded-b","rounded-l","rounded-ss","rounded-se","rounded-ee","rounded-es","rounded-tl","rounded-tr","rounded-br","rounded-bl"],"rounded-s":["rounded-ss","rounded-es"],"rounded-e":["rounded-se","rounded-ee"],"rounded-t":["rounded-tl","rounded-tr"],"rounded-r":["rounded-tr","rounded-br"],"rounded-b":["rounded-br","rounded-bl"],"rounded-l":["rounded-tl","rounded-bl"],"border-spacing":["border-spacing-x","border-spacing-y"],"border-w":["border-w-s","border-w-e","border-w-t","border-w-r","border-w-b","border-w-l"],"border-w-x":["border-w-r","border-w-l"],"border-w-y":["border-w-t","border-w-b"],"border-color":["border-color-s","border-color-e","border-color-t","border-color-r","border-color-b","border-color-l"],"border-color-x":["border-color-r","border-color-l"],"border-color-y":["border-color-t","border-color-b"],"scroll-m":["scroll-mx","scroll-my","scroll-ms","scroll-me","scroll-mt","scroll-mr","scroll-mb","scroll-ml"],"scroll-mx":["scroll-mr","scroll-ml"],"scroll-my":["scroll-mt","scroll-mb"],"scroll-p":["scroll-px","scroll-py","scroll-ps","scroll-pe","scroll-pt","scroll-pr","scroll-pb","scroll-pl"],"scroll-px":["scroll-pr","scroll-pl"],"scroll-py":["scroll-pt","scroll-pb"],touch:["touch-x","touch-y","touch-pz"],"touch-x":["touch"],"touch-y":["touch"],"touch-pz":["touch"]},conflictingClassGroupModifiers:{"font-size":["leading"]}}},lw=V1(sw);function ae(...e){return lw(lv(e))}const cw=p1,vv=p.forwardRef(({className:e,...t},n)=>w.jsx(tv,{"data-lov-id":"src/components/ui/toast.tsx:14:2","data-lov-name":"ToastPrimitives.Viewport","data-component-path":"src/components/ui/toast.tsx","data-component-line":"14","data-component-file":"toast.tsx","data-component-name":"ToastPrimitives.Viewport","data-component-content":"%7B%7D",ref:n,className:ae("fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",e),...t}));vv.displayName=tv.displayName;const uw=Au("group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",{variants:{variant:{default:"border bg-background text-foreground",destructive:"destructive group border-destructive bg-destructive text-destructive-foreground"}},defaultVariants:{variant:"default"}}),gv=p.forwardRef(({className:e,variant:t,...n},o)=>w.jsx(nv,{"data-lov-id":"src/components/ui/toast.tsx:47:4","data-lov-name":"ToastPrimitives.Root","data-component-path":"src/components/ui/toast.tsx","data-component-line":"47","data-component-file":"toast.tsx","data-component-name":"ToastPrimitives.Root","data-component-content":"%7B%7D",ref:o,className:ae(uw({variant:t}),e),...n}));gv.displayName=nv.displayName;const dw=p.forwardRef(({className:e,...t},n)=>w.jsx(av,{"data-lov-id":"src/components/ui/toast.tsx:60:2","data-lov-name":"ToastPrimitives.Action","data-component-path":"src/components/ui/toast.tsx","data-component-line":"60","data-component-file":"toast.tsx","data-component-name":"ToastPrimitives.Action","data-component-content":"%7B%7D",ref:n,className:ae("inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",e),...t}));dw.displayName=av.displayName;const yv=p.forwardRef(({className:e,...t},n)=>w.jsx(iv,{"data-lov-id":"src/components/ui/toast.tsx:75:2","data-lov-name":"ToastPrimitives.Close","data-component-path":"src/components/ui/toast.tsx","data-component-line":"75","data-component-file":"toast.tsx","data-component-name":"ToastPrimitives.Close","data-component-content":"%7B%7D",ref:n,className:ae("absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",e),"toast-close":"",...t,children:w.jsx(uv,{"data-lov-id":"src/components/ui/toast.tsx:84:4","data-lov-name":"X","data-component-path":"src/components/ui/toast.tsx","data-component-line":"84","data-component-file":"toast.tsx","data-component-name":"X","data-component-content":"%7B%22className%22%3A%22h-4%20w-4%22%7D",className:"h-4 w-4"})}));yv.displayName=iv.displayName;const xv=p.forwardRef(({className:e,...t},n)=>w.jsx(ov,{"data-lov-id":"src/components/ui/toast.tsx:93:2","data-lov-name":"ToastPrimitives.Title","data-component-path":"src/components/ui/toast.tsx","data-component-line":"93","data-component-file":"toast.tsx","data-component-name":"ToastPrimitives.Title","data-component-content":"%7B%7D",ref:n,className:ae("text-sm font-semibold",e),...t}));xv.displayName=ov.displayName;const wv=p.forwardRef(({className:e,...t},n)=>w.jsx(rv,{"data-lov-id":"src/components/ui/toast.tsx:105:2","data-lov-name":"ToastPrimitives.Description","data-component-path":"src/components/ui/toast.tsx","data-component-line":"105","data-component-file":"toast.tsx","data-component-name":"ToastPrimitives.Description","data-component-content":"%7B%7D",ref:n,className:ae("text-sm opacity-90",e),...t}));wv.displayName=rv.displayName;function fw(){const{toasts:e}=P2();return w.jsxs(cw,{"data-lov-id":"src/components/ui/toaster.tsx:15:4","data-lov-name":"ToastProvider","data-component-path":"src/components/ui/toaster.tsx","data-component-line":"15","data-component-file":"toaster.tsx","data-component-name":"ToastProvider","data-component-content":"%7B%7D",children:[e.map(function({id:t,title:n,description:o,action:r,...a}){return w.jsxs(gv,{"data-lov-id":"src/components/ui/toaster.tsx:18:10","data-lov-name":"Toast","data-component-path":"src/components/ui/toaster.tsx","data-component-line":"18","data-component-file":"toaster.tsx","data-component-name":"Toast","data-component-content":"%7B%7D",...a,children:[w.jsxs("div",{"data-lov-id":"src/components/ui/toaster.tsx:19:12","data-lov-name":"div","data-component-path":"src/components/ui/toaster.tsx","data-component-line":"19","data-component-file":"toaster.tsx","data-component-name":"div","data-component-content":"%7B%22className%22%3A%22grid%20gap-1%22%7D",className:"grid gap-1",children:[n&&w.jsx(xv,{"data-lov-id":"src/components/ui/toaster.tsx:20:24","data-lov-name":"ToastTitle","data-component-path":"src/components/ui/toaster.tsx","data-component-line":"20","data-component-file":"toaster.tsx","data-component-name":"ToastTitle","data-component-content":"%7B%7D",children:n}),o&&w.jsx(wv,{"data-lov-id":"src/components/ui/toaster.tsx:22:16","data-lov-name":"ToastDescription","data-component-path":"src/components/ui/toaster.tsx","data-component-line":"22","data-component-file":"toaster.tsx","data-component-name":"ToastDescription","data-component-content":"%7B%7D",children:o})]}),r,w.jsx(yv,{"data-lov-id":"src/components/ui/toaster.tsx:26:12","data-lov-name":"ToastClose","data-component-path":"src/components/ui/toaster.tsx","data-component-line":"26","data-component-file":"toaster.tsx","data-component-name":"ToastClose","data-component-content":"%7B%7D"})]},t)}),w.jsx(vv,{"data-lov-id":"src/components/ui/toaster.tsx:30:6","data-lov-name":"ToastViewport","data-component-path":"src/components/ui/toaster.tsx","data-component-line":"30","data-component-file":"toaster.tsx","data-component-name":"ToastViewport","data-component-content":"%7B%7D"})]})}var kf=["light","dark"],pw="(prefers-color-scheme: dark)",mw=p.createContext(void 0),hw={setTheme:e=>{},themes:[]},vw=()=>{var e;return(e=p.useContext(mw))!=null?e:hw};p.memo(({forcedTheme:e,storageKey:t,attribute:n,enableSystem:o,enableColorScheme:r,defaultTheme:a,value:i,attrs:s,nonce:l})=>{let c=a==="system",f=n==="class"?`var d=document.documentElement,c=d.classList;${`c.remove(${s.map(S=>`'${S}'`).join(",")})`};`:`var d=document.documentElement,n='${n}',s='setAttribute';`,d=r?kf.includes(a)&&a?`if(e==='light'||e==='dark'||!e)d.style.colorScheme=e||'${a}'`:"if(e==='light'||e==='dark')d.style.colorScheme=e":"",u=(S,h=!1,x=!0)=>{let m=i?i[S]:S,v=h?S+"|| ''":`'${m}'`,g="";return r&&x&&!h&&kf.includes(S)&&(g+=`d.style.colorScheme = '${S}';`),n==="class"?h||m?g+=`c.add(${v})`:g+="null":m&&(g+=`d[s](n,${v})`),g},y=e?`!function(){${f}${u(e)}}()`:o?`!function(){try{${f}var e=localStorage.getItem('${t}');if('system'===e||(!e&&${c})){var t='${pw}',m=window.matchMedia(t);if(m.media!==t||m.matches){${u("dark")}}else{${u("light")}}}else if(e){${i?`var x=${JSON.stringify(i)};`:""}${u(i?"x[e]":"e",!0)}}${c?"":"else{"+u(a,!1,!1)+"}"}${d}}catch(e){}}()`:`!function(){try{${f}var e=localStorage.getItem('${t}');if(e){${i?`var x=${JSON.stringify(i)};`:""}${u(i?"x[e]":"e",!0)}}else{${u(a,!1,!1)};}${d}}catch(t){}}();`;return p.createElement("script",{nonce:l,dangerouslySetInnerHTML:{__html:y}})});var gw=e=>{switch(e){case"success":return ww;case"info":return Cw;case"warning":return Sw;case"error":return Ew;default:return null}},yw=Array(12).fill(0),xw=({visible:e})=>O.createElement("div",{className:"sonner-loading-wrapper","data-visible":e},O.createElement("div",{className:"sonner-spinner"},yw.map((t,n)=>O.createElement("div",{className:"sonner-loading-bar",key:`spinner-bar-${n}`})))),ww=O.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor",height:"20",width:"20"},O.createElement("path",{fillRule:"evenodd",d:"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z",clipRule:"evenodd"})),Sw=O.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",fill:"currentColor",height:"20",width:"20"},O.createElement("path",{fillRule:"evenodd",d:"M9.401 3.003c1.155-2 4.043-2 5.197 0l7.355 12.748c1.154 2-.29 4.5-2.599 4.5H4.645c-2.309 0-3.752-2.5-2.598-4.5L9.4 3.003zM12 8.25a.75.75 0 01.75.75v3.75a.75.75 0 01-1.5 0V9a.75.75 0 01.75-.75zm0 8.25a.75.75 0 100-1.5.75.75 0 000 1.5z",clipRule:"evenodd"})),Cw=O.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor",height:"20",width:"20"},O.createElement("path",{fillRule:"evenodd",d:"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a.75.75 0 000 1.5h.253a.25.25 0 01.244.304l-.459 2.066A1.75 1.75 0 0010.747 15H11a.75.75 0 000-1.5h-.253a.25.25 0 01-.244-.304l.459-2.066A1.75 1.75 0 009.253 9H9z",clipRule:"evenodd"})),Ew=O.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor",height:"20",width:"20"},O.createElement("path",{fillRule:"evenodd",d:"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-5a.75.75 0 01.75.75v4.5a.75.75 0 01-1.5 0v-4.5A.75.75 0 0110 5zm0 10a1 1 0 100-2 1 1 0 000 2z",clipRule:"evenodd"})),Pw=()=>{let[e,t]=O.useState(document.hidden);return O.useEffect(()=>{let n=()=>{t(document.hidden)};return document.addEventListener("visibilitychange",n),()=>window.removeEventListener("visibilitychange",n)},[]),e},vc=1,bw=class{constructor(){this.subscribe=e=>(this.subscribers.push(e),()=>{let t=this.subscribers.indexOf(e);this.subscribers.splice(t,1)}),this.publish=e=>{this.subscribers.forEach(t=>t(e))},this.addToast=e=>{this.publish(e),this.toasts=[...this.toasts,e]},this.create=e=>{var t;let{message:n,...o}=e,r=typeof(e==null?void 0:e.id)=="number"||((t=e.id)==null?void 0:t.length)>0?e.id:vc++,a=this.toasts.find(s=>s.id===r),i=e.dismissible===void 0?!0:e.dismissible;return a?this.toasts=this.toasts.map(s=>s.id===r?(this.publish({...s,...e,id:r,title:n}),{...s,...e,id:r,dismissible:i,title:n}):s):this.addToast({title:n,...o,dismissible:i,id:r}),r},this.dismiss=e=>(e||this.toasts.forEach(t=>{this.subscribers.forEach(n=>n({id:t.id,dismiss:!0}))}),this.subscribers.forEach(t=>t({id:e,dismiss:!0})),e),this.message=(e,t)=>this.create({...t,message:e}),this.error=(e,t)=>this.create({...t,message:e,type:"error"}),this.success=(e,t)=>this.create({...t,type:"success",message:e}),this.info=(e,t)=>this.create({...t,type:"info",message:e}),this.warning=(e,t)=>this.create({...t,type:"warning",message:e}),this.loading=(e,t)=>this.create({...t,type:"loading",message:e}),this.promise=(e,t)=>{if(!t)return;let n;t.loading!==void 0&&(n=this.create({...t,promise:e,type:"loading",message:t.loading,description:typeof t.description!="function"?t.description:void 0}));let o=e instanceof Promise?e:e(),r=n!==void 0;return o.then(async a=>{if(Nw(a)&&!a.ok){r=!1;let i=typeof t.error=="function"?await t.error(`HTTP error! status: ${a.status}`):t.error,s=typeof t.description=="function"?await t.description(`HTTP error! status: ${a.status}`):t.description;this.create({id:n,type:"error",message:i,description:s})}else if(t.success!==void 0){r=!1;let i=typeof t.success=="function"?await t.success(a):t.success,s=typeof t.description=="function"?await t.description(a):t.description;this.create({id:n,type:"success",message:i,description:s})}}).catch(async a=>{if(t.error!==void 0){r=!1;let i=typeof t.error=="function"?await t.error(a):t.error,s=typeof t.description=="function"?await t.description(a):t.description;this.create({id:n,type:"error",message:i,description:s})}}).finally(()=>{var a;r&&(this.dismiss(n),n=void 0),(a=t.finally)==null||a.call(t)}),n},this.custom=(e,t)=>{let n=(t==null?void 0:t.id)||vc++;return this.create({jsx:e(n),id:n,...t}),n},this.subscribers=[],this.toasts=[]}},Ze=new bw,kw=(e,t)=>{let n=(t==null?void 0:t.id)||vc++;return Ze.addToast({title:e,...t,id:n}),n},Nw=e=>e&&typeof e=="object"&&"ok"in e&&typeof e.ok=="boolean"&&"status"in e&&typeof e.status=="number",Tw=kw,Dw=()=>Ze.toasts;Object.assign(Tw,{success:Ze.success,info:Ze.info,warning:Ze.warning,error:Ze.error,custom:Ze.custom,message:Ze.message,promise:Ze.promise,dismiss:Ze.dismiss,loading:Ze.loading},{getHistory:Dw});function Aw(e,{insertAt:t}={}){if(typeof document>"u")return;let n=document.head||document.getElementsByTagName("head")[0],o=document.createElement("style");o.type="text/css",t==="top"&&n.firstChild?n.insertBefore(o,n.firstChild):n.appendChild(o),o.styleSheet?o.styleSheet.cssText=e:o.appendChild(document.createTextNode(e))}Aw(`:where(html[dir="ltr"]),:where([data-sonner-toaster][dir="ltr"]){--toast-icon-margin-start: -3px;--toast-icon-margin-end: 4px;--toast-svg-margin-start: -1px;--toast-svg-margin-end: 0px;--toast-button-margin-start: auto;--toast-button-margin-end: 0;--toast-close-button-start: 0;--toast-close-button-end: unset;--toast-close-button-transform: translate(-35%, -35%)}:where(html[dir="rtl"]),:where([data-sonner-toaster][dir="rtl"]){--toast-icon-margin-start: 4px;--toast-icon-margin-end: -3px;--toast-svg-margin-start: 0px;--toast-svg-margin-end: -1px;--toast-button-margin-start: 0;--toast-button-margin-end: auto;--toast-close-button-start: unset;--toast-close-button-end: 0;--toast-close-button-transform: translate(35%, -35%)}:where([data-sonner-toaster]){position:fixed;width:var(--width);font-family:ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;--gray1: hsl(0, 0%, 99%);--gray2: hsl(0, 0%, 97.3%);--gray3: hsl(0, 0%, 95.1%);--gray4: hsl(0, 0%, 93%);--gray5: hsl(0, 0%, 90.9%);--gray6: hsl(0, 0%, 88.7%);--gray7: hsl(0, 0%, 85.8%);--gray8: hsl(0, 0%, 78%);--gray9: hsl(0, 0%, 56.1%);--gray10: hsl(0, 0%, 52.3%);--gray11: hsl(0, 0%, 43.5%);--gray12: hsl(0, 0%, 9%);--border-radius: 8px;box-sizing:border-box;padding:0;margin:0;list-style:none;outline:none;z-index:999999999}:where([data-sonner-toaster][data-x-position="right"]){right:max(var(--offset),env(safe-area-inset-right))}:where([data-sonner-toaster][data-x-position="left"]){left:max(var(--offset),env(safe-area-inset-left))}:where([data-sonner-toaster][data-x-position="center"]){left:50%;transform:translate(-50%)}:where([data-sonner-toaster][data-y-position="top"]){top:max(var(--offset),env(safe-area-inset-top))}:where([data-sonner-toaster][data-y-position="bottom"]){bottom:max(var(--offset),env(safe-area-inset-bottom))}:where([data-sonner-toast]){--y: translateY(100%);--lift-amount: calc(var(--lift) * var(--gap));z-index:var(--z-index);position:absolute;opacity:0;transform:var(--y);filter:blur(0);touch-action:none;transition:transform .4s,opacity .4s,height .4s,box-shadow .2s;box-sizing:border-box;outline:none;overflow-wrap:anywhere}:where([data-sonner-toast][data-styled="true"]){padding:16px;background:var(--normal-bg);border:1px solid var(--normal-border);color:var(--normal-text);border-radius:var(--border-radius);box-shadow:0 4px 12px #0000001a;width:var(--width);font-size:13px;display:flex;align-items:center;gap:6px}:where([data-sonner-toast]:focus-visible){box-shadow:0 4px 12px #0000001a,0 0 0 2px #0003}:where([data-sonner-toast][data-y-position="top"]){top:0;--y: translateY(-100%);--lift: 1;--lift-amount: calc(1 * var(--gap))}:where([data-sonner-toast][data-y-position="bottom"]){bottom:0;--y: translateY(100%);--lift: -1;--lift-amount: calc(var(--lift) * var(--gap))}:where([data-sonner-toast]) :where([data-description]){font-weight:400;line-height:1.4;color:inherit}:where([data-sonner-toast]) :where([data-title]){font-weight:500;line-height:1.5;color:inherit}:where([data-sonner-toast]) :where([data-icon]){display:flex;height:16px;width:16px;position:relative;justify-content:flex-start;align-items:center;flex-shrink:0;margin-left:var(--toast-icon-margin-start);margin-right:var(--toast-icon-margin-end)}:where([data-sonner-toast][data-promise="true"]) :where([data-icon])>svg{opacity:0;transform:scale(.8);transform-origin:center;animation:sonner-fade-in .3s ease forwards}:where([data-sonner-toast]) :where([data-icon])>*{flex-shrink:0}:where([data-sonner-toast]) :where([data-icon]) svg{margin-left:var(--toast-svg-margin-start);margin-right:var(--toast-svg-margin-end)}:where([data-sonner-toast]) :where([data-content]){display:flex;flex-direction:column;gap:2px}[data-sonner-toast][data-styled=true] [data-button]{border-radius:4px;padding-left:8px;padding-right:8px;height:24px;font-size:12px;color:var(--normal-bg);background:var(--normal-text);margin-left:var(--toast-button-margin-start);margin-right:var(--toast-button-margin-end);border:none;cursor:pointer;outline:none;display:flex;align-items:center;flex-shrink:0;transition:opacity .4s,box-shadow .2s}:where([data-sonner-toast]) :where([data-button]):focus-visible{box-shadow:0 0 0 2px #0006}:where([data-sonner-toast]) :where([data-button]):first-of-type{margin-left:var(--toast-button-margin-start);margin-right:var(--toast-button-margin-end)}:where([data-sonner-toast]) :where([data-cancel]){color:var(--normal-text);background:rgba(0,0,0,.08)}:where([data-sonner-toast][data-theme="dark"]) :where([data-cancel]){background:rgba(255,255,255,.3)}:where([data-sonner-toast]) :where([data-close-button]){position:absolute;left:var(--toast-close-button-start);right:var(--toast-close-button-end);top:0;height:20px;width:20px;display:flex;justify-content:center;align-items:center;padding:0;background:var(--gray1);color:var(--gray12);border:1px solid var(--gray4);transform:var(--toast-close-button-transform);border-radius:50%;cursor:pointer;z-index:1;transition:opacity .1s,background .2s,border-color .2s}:where([data-sonner-toast]) :where([data-close-button]):focus-visible{box-shadow:0 4px 12px #0000001a,0 0 0 2px #0003}:where([data-sonner-toast]) :where([data-disabled="true"]){cursor:not-allowed}:where([data-sonner-toast]):hover :where([data-close-button]):hover{background:var(--gray2);border-color:var(--gray5)}:where([data-sonner-toast][data-swiping="true"]):before{content:"";position:absolute;left:0;right:0;height:100%;z-index:-1}:where([data-sonner-toast][data-y-position="top"][data-swiping="true"]):before{bottom:50%;transform:scaleY(3) translateY(50%)}:where([data-sonner-toast][data-y-position="bottom"][data-swiping="true"]):before{top:50%;transform:scaleY(3) translateY(-50%)}:where([data-sonner-toast][data-swiping="false"][data-removed="true"]):before{content:"";position:absolute;inset:0;transform:scaleY(2)}:where([data-sonner-toast]):after{content:"";position:absolute;left:0;height:calc(var(--gap) + 1px);bottom:100%;width:100%}:where([data-sonner-toast][data-mounted="true"]){--y: translateY(0);opacity:1}:where([data-sonner-toast][data-expanded="false"][data-front="false"]){--scale: var(--toasts-before) * .05 + 1;--y: translateY(calc(var(--lift-amount) * var(--toasts-before))) scale(calc(-1 * var(--scale)));height:var(--front-toast-height)}:where([data-sonner-toast])>*{transition:opacity .4s}:where([data-sonner-toast][data-expanded="false"][data-front="false"][data-styled="true"])>*{opacity:0}:where([data-sonner-toast][data-visible="false"]){opacity:0;pointer-events:none}:where([data-sonner-toast][data-mounted="true"][data-expanded="true"]){--y: translateY(calc(var(--lift) * var(--offset)));height:var(--initial-height)}:where([data-sonner-toast][data-removed="true"][data-front="true"][data-swipe-out="false"]){--y: translateY(calc(var(--lift) * -100%));opacity:0}:where([data-sonner-toast][data-removed="true"][data-front="false"][data-swipe-out="false"][data-expanded="true"]){--y: translateY(calc(var(--lift) * var(--offset) + var(--lift) * -100%));opacity:0}:where([data-sonner-toast][data-removed="true"][data-front="false"][data-swipe-out="false"][data-expanded="false"]){--y: translateY(40%);opacity:0;transition:transform .5s,opacity .2s}:where([data-sonner-toast][data-removed="true"][data-front="false"]):before{height:calc(var(--initial-height) + 20%)}[data-sonner-toast][data-swiping=true]{transform:var(--y) translateY(var(--swipe-amount, 0px));transition:none}[data-sonner-toast][data-swipe-out=true][data-y-position=bottom],[data-sonner-toast][data-swipe-out=true][data-y-position=top]{animation:swipe-out .2s ease-out forwards}@keyframes swipe-out{0%{transform:translateY(calc(var(--lift) * var(--offset) + var(--swipe-amount)));opacity:1}to{transform:translateY(calc(var(--lift) * var(--offset) + var(--swipe-amount) + var(--lift) * -100%));opacity:0}}@media (max-width: 600px){[data-sonner-toaster]{position:fixed;--mobile-offset: 16px;right:var(--mobile-offset);left:var(--mobile-offset);width:100%}[data-sonner-toaster] [data-sonner-toast]{left:0;right:0;width:calc(100% - var(--mobile-offset) * 2)}[data-sonner-toaster][data-x-position=left]{left:var(--mobile-offset)}[data-sonner-toaster][data-y-position=bottom]{bottom:20px}[data-sonner-toaster][data-y-position=top]{top:20px}[data-sonner-toaster][data-x-position=center]{left:var(--mobile-offset);right:var(--mobile-offset);transform:none}}[data-sonner-toaster][data-theme=light]{--normal-bg: #fff;--normal-border: var(--gray4);--normal-text: var(--gray12);--success-bg: hsl(143, 85%, 96%);--success-border: hsl(145, 92%, 91%);--success-text: hsl(140, 100%, 27%);--info-bg: hsl(208, 100%, 97%);--info-border: hsl(221, 91%, 91%);--info-text: hsl(210, 92%, 45%);--warning-bg: hsl(49, 100%, 97%);--warning-border: hsl(49, 91%, 91%);--warning-text: hsl(31, 92%, 45%);--error-bg: hsl(359, 100%, 97%);--error-border: hsl(359, 100%, 94%);--error-text: hsl(360, 100%, 45%)}[data-sonner-toaster][data-theme=light] [data-sonner-toast][data-invert=true]{--normal-bg: #000;--normal-border: hsl(0, 0%, 20%);--normal-text: var(--gray1)}[data-sonner-toaster][data-theme=dark] [data-sonner-toast][data-invert=true]{--normal-bg: #fff;--normal-border: var(--gray3);--normal-text: var(--gray12)}[data-sonner-toaster][data-theme=dark]{--normal-bg: #000;--normal-border: hsl(0, 0%, 20%);--normal-text: var(--gray1);--success-bg: hsl(150, 100%, 6%);--success-border: hsl(147, 100%, 12%);--success-text: hsl(150, 86%, 65%);--info-bg: hsl(215, 100%, 6%);--info-border: hsl(223, 100%, 12%);--info-text: hsl(216, 87%, 65%);--warning-bg: hsl(64, 100%, 6%);--warning-border: hsl(60, 100%, 12%);--warning-text: hsl(46, 87%, 65%);--error-bg: hsl(358, 76%, 10%);--error-border: hsl(357, 89%, 16%);--error-text: hsl(358, 100%, 81%)}[data-rich-colors=true][data-sonner-toast][data-type=success],[data-rich-colors=true][data-sonner-toast][data-type=success] [data-close-button]{background:var(--success-bg);border-color:var(--success-border);color:var(--success-text)}[data-rich-colors=true][data-sonner-toast][data-type=info],[data-rich-colors=true][data-sonner-toast][data-type=info] [data-close-button]{background:var(--info-bg);border-color:var(--info-border);color:var(--info-text)}[data-rich-colors=true][data-sonner-toast][data-type=warning],[data-rich-colors=true][data-sonner-toast][data-type=warning] [data-close-button]{background:var(--warning-bg);border-color:var(--warning-border);color:var(--warning-text)}[data-rich-colors=true][data-sonner-toast][data-type=error],[data-rich-colors=true][data-sonner-toast][data-type=error] [data-close-button]{background:var(--error-bg);border-color:var(--error-border);color:var(--error-text)}.sonner-loading-wrapper{--size: 16px;height:var(--size);width:var(--size);position:absolute;inset:0;z-index:10}.sonner-loading-wrapper[data-visible=false]{transform-origin:center;animation:sonner-fade-out .2s ease forwards}.sonner-spinner{position:relative;top:50%;left:50%;height:var(--size);width:var(--size)}.sonner-loading-bar{animation:sonner-spin 1.2s linear infinite;background:var(--gray11);border-radius:6px;height:8%;left:-10%;position:absolute;top:-3.9%;width:24%}.sonner-loading-bar:nth-child(1){animation-delay:-1.2s;transform:rotate(.0001deg) translate(146%)}.sonner-loading-bar:nth-child(2){animation-delay:-1.1s;transform:rotate(30deg) translate(146%)}.sonner-loading-bar:nth-child(3){animation-delay:-1s;transform:rotate(60deg) translate(146%)}.sonner-loading-bar:nth-child(4){animation-delay:-.9s;transform:rotate(90deg) translate(146%)}.sonner-loading-bar:nth-child(5){animation-delay:-.8s;transform:rotate(120deg) translate(146%)}.sonner-loading-bar:nth-child(6){animation-delay:-.7s;transform:rotate(150deg) translate(146%)}.sonner-loading-bar:nth-child(7){animation-delay:-.6s;transform:rotate(180deg) translate(146%)}.sonner-loading-bar:nth-child(8){animation-delay:-.5s;transform:rotate(210deg) translate(146%)}.sonner-loading-bar:nth-child(9){animation-delay:-.4s;transform:rotate(240deg) translate(146%)}.sonner-loading-bar:nth-child(10){animation-delay:-.3s;transform:rotate(270deg) translate(146%)}.sonner-loading-bar:nth-child(11){animation-delay:-.2s;transform:rotate(300deg) translate(146%)}.sonner-loading-bar:nth-child(12){animation-delay:-.1s;transform:rotate(330deg) translate(146%)}@keyframes sonner-fade-in{0%{opacity:0;transform:scale(.8)}to{opacity:1;transform:scale(1)}}@keyframes sonner-fade-out{0%{opacity:1;transform:scale(1)}to{opacity:0;transform:scale(.8)}}@keyframes sonner-spin{0%{opacity:1}to{opacity:.15}}@media (prefers-reduced-motion){[data-sonner-toast],[data-sonner-toast]>*,.sonner-loading-bar{transition:none!important;animation:none!important}}.sonner-loader{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);transform-origin:center;transition:opacity .2s,transform .2s}.sonner-loader[data-visible=false]{opacity:0;transform:scale(.8) translate(-50%,-50%)}
`);function Wa(e){return e.label!==void 0}var Rw=3,Iw="32px",_w=4e3,Ow=356,Mw=14,jw=20,Lw=200;function Fw(...e){return e.filter(Boolean).join(" ")}var Bw=e=>{var t,n,o,r,a,i,s,l,c,f;let{invert:d,toast:u,unstyled:y,interacting:S,setHeights:h,visibleToasts:x,heights:m,index:v,toasts:g,expanded:C,removeToast:E,defaultRichColors:P,closeButton:k,style:N,cancelButtonStyle:j,actionButtonStyle:M,className:I="",descriptionClassName:T="",duration:F,position:_,gap:K,loadingIcon:U,expandByDefault:H,classNames:b,icons:R,closeButtonAriaLabel:$="Close toast",pauseWhenPageIsHidden:L,cn:V}=e,[X,le]=O.useState(!1),[je,J]=O.useState(!1),[Xe,Tt]=O.useState(!1),[Dt,At]=O.useState(!1),[ho,ln]=O.useState(0),[Ht,cn]=O.useState(0),Qn=O.useRef(null),ht=O.useRef(null),Cr=v===0,B=v+1<=x,W=u.type,oe=u.dismissible!==!1,De=u.className||"",vo=u.descriptionClassName||"",go=O.useMemo(()=>m.findIndex(Q=>Q.toastId===u.id)||0,[m,u.id]),U0=O.useMemo(()=>{var Q;return(Q=u.closeButton)!=null?Q:k},[u.closeButton,k]),nd=O.useMemo(()=>u.duration||F||_w,[u.duration,F]),Ts=O.useRef(0),yo=O.useRef(0),od=O.useRef(0),xo=O.useRef(null),[rd,V0]=_.split("-"),ad=O.useMemo(()=>m.reduce((Q,ce,ie)=>ie>=go?Q:Q+ce.height,0),[m,go]),id=Pw(),W0=u.invert||d,Ds=W==="loading";yo.current=O.useMemo(()=>go*K+ad,[go,ad]),O.useEffect(()=>{le(!0)},[]),O.useLayoutEffect(()=>{if(!X)return;let Q=ht.current,ce=Q.style.height;Q.style.height="auto";let ie=Q.getBoundingClientRect().height;Q.style.height=ce,cn(ie),h(Rt=>Rt.find(It=>It.toastId===u.id)?Rt.map(It=>It.toastId===u.id?{...It,height:ie}:It):[{toastId:u.id,height:ie,position:u.position},...Rt])},[X,u.title,u.description,h,u.id]);let un=O.useCallback(()=>{J(!0),ln(yo.current),h(Q=>Q.filter(ce=>ce.toastId!==u.id)),setTimeout(()=>{E(u)},Lw)},[u,E,h,yo]);O.useEffect(()=>{if(u.promise&&W==="loading"||u.duration===1/0||u.type==="loading")return;let Q,ce=nd;return C||S||L&&id?(()=>{if(od.current<Ts.current){let ie=new Date().getTime()-Ts.current;ce=ce-ie}od.current=new Date().getTime()})():ce!==1/0&&(Ts.current=new Date().getTime(),Q=setTimeout(()=>{var ie;(ie=u.onAutoClose)==null||ie.call(u,u),un()},ce)),()=>clearTimeout(Q)},[C,S,H,u,nd,un,u.promise,W,L,id]),O.useEffect(()=>{let Q=ht.current;if(Q){let ce=Q.getBoundingClientRect().height;return cn(ce),h(ie=>[{toastId:u.id,height:ce,position:u.position},...ie]),()=>h(ie=>ie.filter(Rt=>Rt.toastId!==u.id))}},[h,u.id]),O.useEffect(()=>{u.delete&&un()},[un,u.delete]);function H0(){return R!=null&&R.loading?O.createElement("div",{className:"sonner-loader","data-visible":W==="loading"},R.loading):U?O.createElement("div",{className:"sonner-loader","data-visible":W==="loading"},U):O.createElement(xw,{visible:W==="loading"})}return O.createElement("li",{"aria-live":u.important?"assertive":"polite","aria-atomic":"true",role:"status",tabIndex:0,ref:ht,className:V(I,De,b==null?void 0:b.toast,(t=u==null?void 0:u.classNames)==null?void 0:t.toast,b==null?void 0:b.default,b==null?void 0:b[W],(n=u==null?void 0:u.classNames)==null?void 0:n[W]),"data-sonner-toast":"","data-rich-colors":(o=u.richColors)!=null?o:P,"data-styled":!(u.jsx||u.unstyled||y),"data-mounted":X,"data-promise":!!u.promise,"data-removed":je,"data-visible":B,"data-y-position":rd,"data-x-position":V0,"data-index":v,"data-front":Cr,"data-swiping":Xe,"data-dismissible":oe,"data-type":W,"data-invert":W0,"data-swipe-out":Dt,"data-expanded":!!(C||H&&X),style:{"--index":v,"--toasts-before":v,"--z-index":g.length-v,"--offset":`${je?ho:yo.current}px`,"--initial-height":H?"auto":`${Ht}px`,...N,...u.style},onPointerDown:Q=>{Ds||!oe||(Qn.current=new Date,ln(yo.current),Q.target.setPointerCapture(Q.pointerId),Q.target.tagName!=="BUTTON"&&(Tt(!0),xo.current={x:Q.clientX,y:Q.clientY}))},onPointerUp:()=>{var Q,ce,ie,Rt;if(Dt||!oe)return;xo.current=null;let It=Number(((Q=ht.current)==null?void 0:Q.style.getPropertyValue("--swipe-amount").replace("px",""))||0),Ea=new Date().getTime()-((ce=Qn.current)==null?void 0:ce.getTime()),K0=Math.abs(It)/Ea;if(Math.abs(It)>=jw||K0>.11){ln(yo.current),(ie=u.onDismiss)==null||ie.call(u,u),un(),At(!0);return}(Rt=ht.current)==null||Rt.style.setProperty("--swipe-amount","0px"),Tt(!1)},onPointerMove:Q=>{var ce;if(!xo.current||!oe)return;let ie=Q.clientY-xo.current.y,Rt=Q.clientX-xo.current.x,It=(rd==="top"?Math.min:Math.max)(0,ie),Ea=Q.pointerType==="touch"?10:2;Math.abs(It)>Ea?(ce=ht.current)==null||ce.style.setProperty("--swipe-amount",`${ie}px`):Math.abs(Rt)>Ea&&(xo.current=null)}},U0&&!u.jsx?O.createElement("button",{"aria-label":$,"data-disabled":Ds,"data-close-button":!0,onClick:Ds||!oe?()=>{}:()=>{var Q;un(),(Q=u.onDismiss)==null||Q.call(u,u)},className:V(b==null?void 0:b.closeButton,(r=u==null?void 0:u.classNames)==null?void 0:r.closeButton)},O.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"12",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:"1.5",strokeLinecap:"round",strokeLinejoin:"round"},O.createElement("line",{x1:"18",y1:"6",x2:"6",y2:"18"}),O.createElement("line",{x1:"6",y1:"6",x2:"18",y2:"18"}))):null,u.jsx||O.isValidElement(u.title)?u.jsx||u.title:O.createElement(O.Fragment,null,W||u.icon||u.promise?O.createElement("div",{"data-icon":"",className:V(b==null?void 0:b.icon,(a=u==null?void 0:u.classNames)==null?void 0:a.icon)},u.promise||u.type==="loading"&&!u.icon?u.icon||H0():null,u.type!=="loading"?u.icon||(R==null?void 0:R[W])||gw(W):null):null,O.createElement("div",{"data-content":"",className:V(b==null?void 0:b.content,(i=u==null?void 0:u.classNames)==null?void 0:i.content)},O.createElement("div",{"data-title":"",className:V(b==null?void 0:b.title,(s=u==null?void 0:u.classNames)==null?void 0:s.title)},u.title),u.description?O.createElement("div",{"data-description":"",className:V(T,vo,b==null?void 0:b.description,(l=u==null?void 0:u.classNames)==null?void 0:l.description)},u.description):null),O.isValidElement(u.cancel)?u.cancel:u.cancel&&Wa(u.cancel)?O.createElement("button",{"data-button":!0,"data-cancel":!0,style:u.cancelButtonStyle||j,onClick:Q=>{var ce,ie;Wa(u.cancel)&&oe&&((ie=(ce=u.cancel).onClick)==null||ie.call(ce,Q),un())},className:V(b==null?void 0:b.cancelButton,(c=u==null?void 0:u.classNames)==null?void 0:c.cancelButton)},u.cancel.label):null,O.isValidElement(u.action)?u.action:u.action&&Wa(u.action)?O.createElement("button",{"data-button":!0,"data-action":!0,style:u.actionButtonStyle||M,onClick:Q=>{var ce,ie;Wa(u.action)&&(Q.defaultPrevented||((ie=(ce=u.action).onClick)==null||ie.call(ce,Q),un()))},className:V(b==null?void 0:b.actionButton,(f=u==null?void 0:u.classNames)==null?void 0:f.actionButton)},u.action.label):null))};function Nf(){if(typeof window>"u"||typeof document>"u")return"ltr";let e=document.documentElement.getAttribute("dir");return e==="auto"||!e?window.getComputedStyle(document.documentElement).direction:e}var zw=e=>{let{invert:t,position:n="bottom-right",hotkey:o=["altKey","KeyT"],expand:r,closeButton:a,className:i,offset:s,theme:l="light",richColors:c,duration:f,style:d,visibleToasts:u=Rw,toastOptions:y,dir:S=Nf(),gap:h=Mw,loadingIcon:x,icons:m,containerAriaLabel:v="Notifications",pauseWhenPageIsHidden:g,cn:C=Fw}=e,[E,P]=O.useState([]),k=O.useMemo(()=>Array.from(new Set([n].concat(E.filter(L=>L.position).map(L=>L.position)))),[E,n]),[N,j]=O.useState([]),[M,I]=O.useState(!1),[T,F]=O.useState(!1),[_,K]=O.useState(l!=="system"?l:typeof window<"u"&&window.matchMedia&&window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light"),U=O.useRef(null),H=o.join("+").replace(/Key/g,"").replace(/Digit/g,""),b=O.useRef(null),R=O.useRef(!1),$=O.useCallback(L=>{var V;(V=E.find(X=>X.id===L.id))!=null&&V.delete||Ze.dismiss(L.id),P(X=>X.filter(({id:le})=>le!==L.id))},[E]);return O.useEffect(()=>Ze.subscribe(L=>{if(L.dismiss){P(V=>V.map(X=>X.id===L.id?{...X,delete:!0}:X));return}setTimeout(()=>{Oh.flushSync(()=>{P(V=>{let X=V.findIndex(le=>le.id===L.id);return X!==-1?[...V.slice(0,X),{...V[X],...L},...V.slice(X+1)]:[L,...V]})})})}),[]),O.useEffect(()=>{if(l!=="system"){K(l);return}l==="system"&&(window.matchMedia&&window.matchMedia("(prefers-color-scheme: dark)").matches?K("dark"):K("light")),typeof window<"u"&&window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change",({matches:L})=>{K(L?"dark":"light")})},[l]),O.useEffect(()=>{E.length<=1&&I(!1)},[E]),O.useEffect(()=>{let L=V=>{var X,le;o.every(je=>V[je]||V.code===je)&&(I(!0),(X=U.current)==null||X.focus()),V.code==="Escape"&&(document.activeElement===U.current||(le=U.current)!=null&&le.contains(document.activeElement))&&I(!1)};return document.addEventListener("keydown",L),()=>document.removeEventListener("keydown",L)},[o]),O.useEffect(()=>{if(U.current)return()=>{b.current&&(b.current.focus({preventScroll:!0}),b.current=null,R.current=!1)}},[U.current]),E.length?O.createElement("section",{"aria-label":`${v} ${H}`,tabIndex:-1},k.map((L,V)=>{var X;let[le,je]=L.split("-");return O.createElement("ol",{key:L,dir:S==="auto"?Nf():S,tabIndex:-1,ref:U,className:i,"data-sonner-toaster":!0,"data-theme":_,"data-y-position":le,"data-x-position":je,style:{"--front-toast-height":`${((X=N[0])==null?void 0:X.height)||0}px`,"--offset":typeof s=="number"?`${s}px`:s||Iw,"--width":`${Ow}px`,"--gap":`${h}px`,...d},onBlur:J=>{R.current&&!J.currentTarget.contains(J.relatedTarget)&&(R.current=!1,b.current&&(b.current.focus({preventScroll:!0}),b.current=null))},onFocus:J=>{J.target instanceof HTMLElement&&J.target.dataset.dismissible==="false"||R.current||(R.current=!0,b.current=J.relatedTarget)},onMouseEnter:()=>I(!0),onMouseMove:()=>I(!0),onMouseLeave:()=>{T||I(!1)},onPointerDown:J=>{J.target instanceof HTMLElement&&J.target.dataset.dismissible==="false"||F(!0)},onPointerUp:()=>F(!1)},E.filter(J=>!J.position&&V===0||J.position===L).map((J,Xe)=>{var Tt,Dt;return O.createElement(Bw,{key:J.id,icons:m,index:Xe,toast:J,defaultRichColors:c,duration:(Tt=y==null?void 0:y.duration)!=null?Tt:f,className:y==null?void 0:y.className,descriptionClassName:y==null?void 0:y.descriptionClassName,invert:t,visibleToasts:u,closeButton:(Dt=y==null?void 0:y.closeButton)!=null?Dt:a,interacting:T,position:L,style:y==null?void 0:y.style,unstyled:y==null?void 0:y.unstyled,classNames:y==null?void 0:y.classNames,cancelButtonStyle:y==null?void 0:y.cancelButtonStyle,actionButtonStyle:y==null?void 0:y.actionButtonStyle,removeToast:$,toasts:E.filter(At=>At.position==J.position),heights:N.filter(At=>At.position==J.position),setHeights:j,expandByDefault:r,gap:h,loadingIcon:x,expanded:M,pauseWhenPageIsHidden:g,cn:C})}))})):null};const $w=({...e})=>{const{theme:t="system"}=vw();return w.jsx(zw,{"data-lov-id":"src/components/ui/sonner.tsx:10:4","data-lov-name":"Sonner","data-component-path":"src/components/ui/sonner.tsx","data-component-line":"10","data-component-file":"sonner.tsx","data-component-name":"Sonner","data-component-content":"%7B%22className%22%3A%22toaster%20group%22%7D",theme:t,className:"toaster group",toastOptions:{classNames:{toast:"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",description:"group-[.toast]:text-muted-foreground",actionButton:"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",cancelButton:"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground"}},...e})};var Uw=Rp.useId||(()=>{}),Vw=0;function sl(e){const[t,n]=p.useState(Uw());return Bn(()=>{e||n(o=>o??String(Vw++))},[e]),e||(t?`radix-${t}`:"")}const Ww=["top","right","bottom","left"],zn=Math.min,et=Math.max,$i=Math.round,Ha=Math.floor,$n=e=>({x:e,y:e}),Hw={left:"right",right:"left",bottom:"top",top:"bottom"},Kw={start:"end",end:"start"};function gc(e,t,n){return et(e,zn(t,n))}function on(e,t){return typeof e=="function"?e(t):e}function rn(e){return e.split("-")[0]}function xr(e){return e.split("-")[1]}function Iu(e){return e==="x"?"y":"x"}function _u(e){return e==="y"?"height":"width"}function Un(e){return["top","bottom"].includes(rn(e))?"y":"x"}function Ou(e){return Iu(Un(e))}function Qw(e,t,n){n===void 0&&(n=!1);const o=xr(e),r=Ou(e),a=_u(r);let i=r==="x"?o===(n?"end":"start")?"right":"left":o==="start"?"bottom":"top";return t.reference[a]>t.floating[a]&&(i=Ui(i)),[i,Ui(i)]}function Yw(e){const t=Ui(e);return[yc(e),t,yc(t)]}function yc(e){return e.replace(/start|end/g,t=>Kw[t])}function Gw(e,t,n){const o=["left","right"],r=["right","left"],a=["top","bottom"],i=["bottom","top"];switch(e){case"top":case"bottom":return n?t?r:o:t?o:r;case"left":case"right":return t?a:i;default:return[]}}function Xw(e,t,n,o){const r=xr(e);let a=Gw(rn(e),n==="start",o);return r&&(a=a.map(i=>i+"-"+r),t&&(a=a.concat(a.map(yc)))),a}function Ui(e){return e.replace(/left|right|bottom|top/g,t=>Hw[t])}function qw(e){return{top:0,right:0,bottom:0,left:0,...e}}function Sv(e){return typeof e!="number"?qw(e):{top:e,right:e,bottom:e,left:e}}function Vi(e){const{x:t,y:n,width:o,height:r}=e;return{width:o,height:r,top:n,left:t,right:t+o,bottom:n+r,x:t,y:n}}function Tf(e,t,n){let{reference:o,floating:r}=e;const a=Un(t),i=Ou(t),s=_u(i),l=rn(t),c=a==="y",f=o.x+o.width/2-r.width/2,d=o.y+o.height/2-r.height/2,u=o[s]/2-r[s]/2;let y;switch(l){case"top":y={x:f,y:o.y-r.height};break;case"bottom":y={x:f,y:o.y+o.height};break;case"right":y={x:o.x+o.width,y:d};break;case"left":y={x:o.x-r.width,y:d};break;default:y={x:o.x,y:o.y}}switch(xr(t)){case"start":y[i]-=u*(n&&c?-1:1);break;case"end":y[i]+=u*(n&&c?-1:1);break}return y}const Zw=async(e,t,n)=>{const{placement:o="bottom",strategy:r="absolute",middleware:a=[],platform:i}=n,s=a.filter(Boolean),l=await(i.isRTL==null?void 0:i.isRTL(t));let c=await i.getElementRects({reference:e,floating:t,strategy:r}),{x:f,y:d}=Tf(c,o,l),u=o,y={},S=0;for(let h=0;h<s.length;h++){const{name:x,fn:m}=s[h],{x:v,y:g,data:C,reset:E}=await m({x:f,y:d,initialPlacement:o,placement:u,strategy:r,middlewareData:y,rects:c,platform:i,elements:{reference:e,floating:t}});f=v??f,d=g??d,y={...y,[x]:{...y[x],...C}},E&&S<=50&&(S++,typeof E=="object"&&(E.placement&&(u=E.placement),E.rects&&(c=E.rects===!0?await i.getElementRects({reference:e,floating:t,strategy:r}):E.rects),{x:f,y:d}=Tf(c,u,l)),h=-1)}return{x:f,y:d,placement:u,strategy:r,middlewareData:y}};async function ua(e,t){var n;t===void 0&&(t={});const{x:o,y:r,platform:a,rects:i,elements:s,strategy:l}=e,{boundary:c="clippingAncestors",rootBoundary:f="viewport",elementContext:d="floating",altBoundary:u=!1,padding:y=0}=on(t,e),S=Sv(y),x=s[u?d==="floating"?"reference":"floating":d],m=Vi(await a.getClippingRect({element:(n=await(a.isElement==null?void 0:a.isElement(x)))==null||n?x:x.contextElement||await(a.getDocumentElement==null?void 0:a.getDocumentElement(s.floating)),boundary:c,rootBoundary:f,strategy:l})),v=d==="floating"?{x:o,y:r,width:i.floating.width,height:i.floating.height}:i.reference,g=await(a.getOffsetParent==null?void 0:a.getOffsetParent(s.floating)),C=await(a.isElement==null?void 0:a.isElement(g))?await(a.getScale==null?void 0:a.getScale(g))||{x:1,y:1}:{x:1,y:1},E=Vi(a.convertOffsetParentRelativeRectToViewportRelativeRect?await a.convertOffsetParentRelativeRectToViewportRelativeRect({elements:s,rect:v,offsetParent:g,strategy:l}):v);return{top:(m.top-E.top+S.top)/C.y,bottom:(E.bottom-m.bottom+S.bottom)/C.y,left:(m.left-E.left+S.left)/C.x,right:(E.right-m.right+S.right)/C.x}}const Jw=e=>({name:"arrow",options:e,async fn(t){const{x:n,y:o,placement:r,rects:a,platform:i,elements:s,middlewareData:l}=t,{element:c,padding:f=0}=on(e,t)||{};if(c==null)return{};const d=Sv(f),u={x:n,y:o},y=Ou(r),S=_u(y),h=await i.getDimensions(c),x=y==="y",m=x?"top":"left",v=x?"bottom":"right",g=x?"clientHeight":"clientWidth",C=a.reference[S]+a.reference[y]-u[y]-a.floating[S],E=u[y]-a.reference[y],P=await(i.getOffsetParent==null?void 0:i.getOffsetParent(c));let k=P?P[g]:0;(!k||!await(i.isElement==null?void 0:i.isElement(P)))&&(k=s.floating[g]||a.floating[S]);const N=C/2-E/2,j=k/2-h[S]/2-1,M=zn(d[m],j),I=zn(d[v],j),T=M,F=k-h[S]-I,_=k/2-h[S]/2+N,K=gc(T,_,F),U=!l.arrow&&xr(r)!=null&&_!==K&&a.reference[S]/2-(_<T?M:I)-h[S]/2<0,H=U?_<T?_-T:_-F:0;return{[y]:u[y]+H,data:{[y]:K,centerOffset:_-K-H,...U&&{alignmentOffset:H}},reset:U}}}),eS=function(e){return e===void 0&&(e={}),{name:"flip",options:e,async fn(t){var n,o;const{placement:r,middlewareData:a,rects:i,initialPlacement:s,platform:l,elements:c}=t,{mainAxis:f=!0,crossAxis:d=!0,fallbackPlacements:u,fallbackStrategy:y="bestFit",fallbackAxisSideDirection:S="none",flipAlignment:h=!0,...x}=on(e,t);if((n=a.arrow)!=null&&n.alignmentOffset)return{};const m=rn(r),v=Un(s),g=rn(s)===s,C=await(l.isRTL==null?void 0:l.isRTL(c.floating)),E=u||(g||!h?[Ui(s)]:Yw(s)),P=S!=="none";!u&&P&&E.push(...Xw(s,h,S,C));const k=[s,...E],N=await ua(t,x),j=[];let M=((o=a.flip)==null?void 0:o.overflows)||[];if(f&&j.push(N[m]),d){const _=Qw(r,i,C);j.push(N[_[0]],N[_[1]])}if(M=[...M,{placement:r,overflows:j}],!j.every(_=>_<=0)){var I,T;const _=(((I=a.flip)==null?void 0:I.index)||0)+1,K=k[_];if(K)return{data:{index:_,overflows:M},reset:{placement:K}};let U=(T=M.filter(H=>H.overflows[0]<=0).sort((H,b)=>H.overflows[1]-b.overflows[1])[0])==null?void 0:T.placement;if(!U)switch(y){case"bestFit":{var F;const H=(F=M.filter(b=>{if(P){const R=Un(b.placement);return R===v||R==="y"}return!0}).map(b=>[b.placement,b.overflows.filter(R=>R>0).reduce((R,$)=>R+$,0)]).sort((b,R)=>b[1]-R[1])[0])==null?void 0:F[0];H&&(U=H);break}case"initialPlacement":U=s;break}if(r!==U)return{reset:{placement:U}}}return{}}}};function Df(e,t){return{top:e.top-t.height,right:e.right-t.width,bottom:e.bottom-t.height,left:e.left-t.width}}function Af(e){return Ww.some(t=>e[t]>=0)}const tS=function(e){return e===void 0&&(e={}),{name:"hide",options:e,async fn(t){const{rects:n}=t,{strategy:o="referenceHidden",...r}=on(e,t);switch(o){case"referenceHidden":{const a=await ua(t,{...r,elementContext:"reference"}),i=Df(a,n.reference);return{data:{referenceHiddenOffsets:i,referenceHidden:Af(i)}}}case"escaped":{const a=await ua(t,{...r,altBoundary:!0}),i=Df(a,n.floating);return{data:{escapedOffsets:i,escaped:Af(i)}}}default:return{}}}}};async function nS(e,t){const{placement:n,platform:o,elements:r}=e,a=await(o.isRTL==null?void 0:o.isRTL(r.floating)),i=rn(n),s=xr(n),l=Un(n)==="y",c=["left","top"].includes(i)?-1:1,f=a&&l?-1:1,d=on(t,e);let{mainAxis:u,crossAxis:y,alignmentAxis:S}=typeof d=="number"?{mainAxis:d,crossAxis:0,alignmentAxis:null}:{mainAxis:d.mainAxis||0,crossAxis:d.crossAxis||0,alignmentAxis:d.alignmentAxis};return s&&typeof S=="number"&&(y=s==="end"?S*-1:S),l?{x:y*f,y:u*c}:{x:u*c,y:y*f}}const oS=function(e){return e===void 0&&(e=0),{name:"offset",options:e,async fn(t){var n,o;const{x:r,y:a,placement:i,middlewareData:s}=t,l=await nS(t,e);return i===((n=s.offset)==null?void 0:n.placement)&&(o=s.arrow)!=null&&o.alignmentOffset?{}:{x:r+l.x,y:a+l.y,data:{...l,placement:i}}}}},rS=function(e){return e===void 0&&(e={}),{name:"shift",options:e,async fn(t){const{x:n,y:o,placement:r}=t,{mainAxis:a=!0,crossAxis:i=!1,limiter:s={fn:x=>{let{x:m,y:v}=x;return{x:m,y:v}}},...l}=on(e,t),c={x:n,y:o},f=await ua(t,l),d=Un(rn(r)),u=Iu(d);let y=c[u],S=c[d];if(a){const x=u==="y"?"top":"left",m=u==="y"?"bottom":"right",v=y+f[x],g=y-f[m];y=gc(v,y,g)}if(i){const x=d==="y"?"top":"left",m=d==="y"?"bottom":"right",v=S+f[x],g=S-f[m];S=gc(v,S,g)}const h=s.fn({...t,[u]:y,[d]:S});return{...h,data:{x:h.x-n,y:h.y-o,enabled:{[u]:a,[d]:i}}}}}},aS=function(e){return e===void 0&&(e={}),{options:e,fn(t){const{x:n,y:o,placement:r,rects:a,middlewareData:i}=t,{offset:s=0,mainAxis:l=!0,crossAxis:c=!0}=on(e,t),f={x:n,y:o},d=Un(r),u=Iu(d);let y=f[u],S=f[d];const h=on(s,t),x=typeof h=="number"?{mainAxis:h,crossAxis:0}:{mainAxis:0,crossAxis:0,...h};if(l){const g=u==="y"?"height":"width",C=a.reference[u]-a.floating[g]+x.mainAxis,E=a.reference[u]+a.reference[g]-x.mainAxis;y<C?y=C:y>E&&(y=E)}if(c){var m,v;const g=u==="y"?"width":"height",C=["top","left"].includes(rn(r)),E=a.reference[d]-a.floating[g]+(C&&((m=i.offset)==null?void 0:m[d])||0)+(C?0:x.crossAxis),P=a.reference[d]+a.reference[g]+(C?0:((v=i.offset)==null?void 0:v[d])||0)-(C?x.crossAxis:0);S<E?S=E:S>P&&(S=P)}return{[u]:y,[d]:S}}}},iS=function(e){return e===void 0&&(e={}),{name:"size",options:e,async fn(t){var n,o;const{placement:r,rects:a,platform:i,elements:s}=t,{apply:l=()=>{},...c}=on(e,t),f=await ua(t,c),d=rn(r),u=xr(r),y=Un(r)==="y",{width:S,height:h}=a.floating;let x,m;d==="top"||d==="bottom"?(x=d,m=u===(await(i.isRTL==null?void 0:i.isRTL(s.floating))?"start":"end")?"left":"right"):(m=d,x=u==="end"?"top":"bottom");const v=h-f.top-f.bottom,g=S-f.left-f.right,C=zn(h-f[x],v),E=zn(S-f[m],g),P=!t.middlewareData.shift;let k=C,N=E;if((n=t.middlewareData.shift)!=null&&n.enabled.x&&(N=g),(o=t.middlewareData.shift)!=null&&o.enabled.y&&(k=v),P&&!u){const M=et(f.left,0),I=et(f.right,0),T=et(f.top,0),F=et(f.bottom,0);y?N=S-2*(M!==0||I!==0?M+I:et(f.left,f.right)):k=h-2*(T!==0||F!==0?T+F:et(f.top,f.bottom))}await l({...t,availableWidth:N,availableHeight:k});const j=await i.getDimensions(s.floating);return S!==j.width||h!==j.height?{reset:{rects:!0}}:{}}}};function vs(){return typeof window<"u"}function wr(e){return Cv(e)?(e.nodeName||"").toLowerCase():"#document"}function ot(e){var t;return(e==null||(t=e.ownerDocument)==null?void 0:t.defaultView)||window}function Wt(e){var t;return(t=(Cv(e)?e.ownerDocument:e.document)||window.document)==null?void 0:t.documentElement}function Cv(e){return vs()?e instanceof Node||e instanceof ot(e).Node:!1}function bt(e){return vs()?e instanceof Element||e instanceof ot(e).Element:!1}function Vt(e){return vs()?e instanceof HTMLElement||e instanceof ot(e).HTMLElement:!1}function Rf(e){return!vs()||typeof ShadowRoot>"u"?!1:e instanceof ShadowRoot||e instanceof ot(e).ShadowRoot}function Ca(e){const{overflow:t,overflowX:n,overflowY:o,display:r}=kt(e);return/auto|scroll|overlay|hidden|clip/.test(t+o+n)&&!["inline","contents"].includes(r)}function sS(e){return["table","td","th"].includes(wr(e))}function gs(e){return[":popover-open",":modal"].some(t=>{try{return e.matches(t)}catch{return!1}})}function Mu(e){const t=ju(),n=bt(e)?kt(e):e;return n.transform!=="none"||n.perspective!=="none"||(n.containerType?n.containerType!=="normal":!1)||!t&&(n.backdropFilter?n.backdropFilter!=="none":!1)||!t&&(n.filter?n.filter!=="none":!1)||["transform","perspective","filter"].some(o=>(n.willChange||"").includes(o))||["paint","layout","strict","content"].some(o=>(n.contain||"").includes(o))}function lS(e){let t=Vn(e);for(;Vt(t)&&!dr(t);){if(Mu(t))return t;if(gs(t))return null;t=Vn(t)}return null}function ju(){return typeof CSS>"u"||!CSS.supports?!1:CSS.supports("-webkit-backdrop-filter","none")}function dr(e){return["html","body","#document"].includes(wr(e))}function kt(e){return ot(e).getComputedStyle(e)}function ys(e){return bt(e)?{scrollLeft:e.scrollLeft,scrollTop:e.scrollTop}:{scrollLeft:e.scrollX,scrollTop:e.scrollY}}function Vn(e){if(wr(e)==="html")return e;const t=e.assignedSlot||e.parentNode||Rf(e)&&e.host||Wt(e);return Rf(t)?t.host:t}function Ev(e){const t=Vn(e);return dr(t)?e.ownerDocument?e.ownerDocument.body:e.body:Vt(t)&&Ca(t)?t:Ev(t)}function da(e,t,n){var o;t===void 0&&(t=[]),n===void 0&&(n=!0);const r=Ev(e),a=r===((o=e.ownerDocument)==null?void 0:o.body),i=ot(r);if(a){const s=xc(i);return t.concat(i,i.visualViewport||[],Ca(r)?r:[],s&&n?da(s):[])}return t.concat(r,da(r,[],n))}function xc(e){return e.parent&&Object.getPrototypeOf(e.parent)?e.frameElement:null}function Pv(e){const t=kt(e);let n=parseFloat(t.width)||0,o=parseFloat(t.height)||0;const r=Vt(e),a=r?e.offsetWidth:n,i=r?e.offsetHeight:o,s=$i(n)!==a||$i(o)!==i;return s&&(n=a,o=i),{width:n,height:o,$:s}}function Lu(e){return bt(e)?e:e.contextElement}function Wo(e){const t=Lu(e);if(!Vt(t))return $n(1);const n=t.getBoundingClientRect(),{width:o,height:r,$:a}=Pv(t);let i=(a?$i(n.width):n.width)/o,s=(a?$i(n.height):n.height)/r;return(!i||!Number.isFinite(i))&&(i=1),(!s||!Number.isFinite(s))&&(s=1),{x:i,y:s}}const cS=$n(0);function bv(e){const t=ot(e);return!ju()||!t.visualViewport?cS:{x:t.visualViewport.offsetLeft,y:t.visualViewport.offsetTop}}function uS(e,t,n){return t===void 0&&(t=!1),!n||t&&n!==ot(e)?!1:t}function uo(e,t,n,o){t===void 0&&(t=!1),n===void 0&&(n=!1);const r=e.getBoundingClientRect(),a=Lu(e);let i=$n(1);t&&(o?bt(o)&&(i=Wo(o)):i=Wo(e));const s=uS(a,n,o)?bv(a):$n(0);let l=(r.left+s.x)/i.x,c=(r.top+s.y)/i.y,f=r.width/i.x,d=r.height/i.y;if(a){const u=ot(a),y=o&&bt(o)?ot(o):o;let S=u,h=xc(S);for(;h&&o&&y!==S;){const x=Wo(h),m=h.getBoundingClientRect(),v=kt(h),g=m.left+(h.clientLeft+parseFloat(v.paddingLeft))*x.x,C=m.top+(h.clientTop+parseFloat(v.paddingTop))*x.y;l*=x.x,c*=x.y,f*=x.x,d*=x.y,l+=g,c+=C,S=ot(h),h=xc(S)}}return Vi({width:f,height:d,x:l,y:c})}function dS(e){let{elements:t,rect:n,offsetParent:o,strategy:r}=e;const a=r==="fixed",i=Wt(o),s=t?gs(t.floating):!1;if(o===i||s&&a)return n;let l={scrollLeft:0,scrollTop:0},c=$n(1);const f=$n(0),d=Vt(o);if((d||!d&&!a)&&((wr(o)!=="body"||Ca(i))&&(l=ys(o)),Vt(o))){const u=uo(o);c=Wo(o),f.x=u.x+o.clientLeft,f.y=u.y+o.clientTop}return{width:n.width*c.x,height:n.height*c.y,x:n.x*c.x-l.scrollLeft*c.x+f.x,y:n.y*c.y-l.scrollTop*c.y+f.y}}function fS(e){return Array.from(e.getClientRects())}function wc(e,t){const n=ys(e).scrollLeft;return t?t.left+n:uo(Wt(e)).left+n}function pS(e){const t=Wt(e),n=ys(e),o=e.ownerDocument.body,r=et(t.scrollWidth,t.clientWidth,o.scrollWidth,o.clientWidth),a=et(t.scrollHeight,t.clientHeight,o.scrollHeight,o.clientHeight);let i=-n.scrollLeft+wc(e);const s=-n.scrollTop;return kt(o).direction==="rtl"&&(i+=et(t.clientWidth,o.clientWidth)-r),{width:r,height:a,x:i,y:s}}function mS(e,t){const n=ot(e),o=Wt(e),r=n.visualViewport;let a=o.clientWidth,i=o.clientHeight,s=0,l=0;if(r){a=r.width,i=r.height;const c=ju();(!c||c&&t==="fixed")&&(s=r.offsetLeft,l=r.offsetTop)}return{width:a,height:i,x:s,y:l}}function hS(e,t){const n=uo(e,!0,t==="fixed"),o=n.top+e.clientTop,r=n.left+e.clientLeft,a=Vt(e)?Wo(e):$n(1),i=e.clientWidth*a.x,s=e.clientHeight*a.y,l=r*a.x,c=o*a.y;return{width:i,height:s,x:l,y:c}}function If(e,t,n){let o;if(t==="viewport")o=mS(e,n);else if(t==="document")o=pS(Wt(e));else if(bt(t))o=hS(t,n);else{const r=bv(e);o={...t,x:t.x-r.x,y:t.y-r.y}}return Vi(o)}function kv(e,t){const n=Vn(e);return n===t||!bt(n)||dr(n)?!1:kt(n).position==="fixed"||kv(n,t)}function vS(e,t){const n=t.get(e);if(n)return n;let o=da(e,[],!1).filter(s=>bt(s)&&wr(s)!=="body"),r=null;const a=kt(e).position==="fixed";let i=a?Vn(e):e;for(;bt(i)&&!dr(i);){const s=kt(i),l=Mu(i);!l&&s.position==="fixed"&&(r=null),(a?!l&&!r:!l&&s.position==="static"&&!!r&&["absolute","fixed"].includes(r.position)||Ca(i)&&!l&&kv(e,i))?o=o.filter(f=>f!==i):r=s,i=Vn(i)}return t.set(e,o),o}function gS(e){let{element:t,boundary:n,rootBoundary:o,strategy:r}=e;const i=[...n==="clippingAncestors"?gs(t)?[]:vS(t,this._c):[].concat(n),o],s=i[0],l=i.reduce((c,f)=>{const d=If(t,f,r);return c.top=et(d.top,c.top),c.right=zn(d.right,c.right),c.bottom=zn(d.bottom,c.bottom),c.left=et(d.left,c.left),c},If(t,s,r));return{width:l.right-l.left,height:l.bottom-l.top,x:l.left,y:l.top}}function yS(e){const{width:t,height:n}=Pv(e);return{width:t,height:n}}function xS(e,t,n){const o=Vt(t),r=Wt(t),a=n==="fixed",i=uo(e,!0,a,t);let s={scrollLeft:0,scrollTop:0};const l=$n(0);if(o||!o&&!a)if((wr(t)!=="body"||Ca(r))&&(s=ys(t)),o){const y=uo(t,!0,a,t);l.x=y.x+t.clientLeft,l.y=y.y+t.clientTop}else r&&(l.x=wc(r));let c=0,f=0;if(r&&!o&&!a){const y=r.getBoundingClientRect();f=y.top+s.scrollTop,c=y.left+s.scrollLeft-wc(r,y)}const d=i.left+s.scrollLeft-l.x-c,u=i.top+s.scrollTop-l.y-f;return{x:d,y:u,width:i.width,height:i.height}}function ll(e){return kt(e).position==="static"}function _f(e,t){if(!Vt(e)||kt(e).position==="fixed")return null;if(t)return t(e);let n=e.offsetParent;return Wt(e)===n&&(n=n.ownerDocument.body),n}function Nv(e,t){const n=ot(e);if(gs(e))return n;if(!Vt(e)){let r=Vn(e);for(;r&&!dr(r);){if(bt(r)&&!ll(r))return r;r=Vn(r)}return n}let o=_f(e,t);for(;o&&sS(o)&&ll(o);)o=_f(o,t);return o&&dr(o)&&ll(o)&&!Mu(o)?n:o||lS(e)||n}const wS=async function(e){const t=this.getOffsetParent||Nv,n=this.getDimensions,o=await n(e.floating);return{reference:xS(e.reference,await t(e.floating),e.strategy),floating:{x:0,y:0,width:o.width,height:o.height}}};function SS(e){return kt(e).direction==="rtl"}const CS={convertOffsetParentRelativeRectToViewportRelativeRect:dS,getDocumentElement:Wt,getClippingRect:gS,getOffsetParent:Nv,getElementRects:wS,getClientRects:fS,getDimensions:yS,getScale:Wo,isElement:bt,isRTL:SS};function ES(e,t){let n=null,o;const r=Wt(e);function a(){var s;clearTimeout(o),(s=n)==null||s.disconnect(),n=null}function i(s,l){s===void 0&&(s=!1),l===void 0&&(l=1),a();const{left:c,top:f,width:d,height:u}=e.getBoundingClientRect();if(s||t(),!d||!u)return;const y=Ha(f),S=Ha(r.clientWidth-(c+d)),h=Ha(r.clientHeight-(f+u)),x=Ha(c),v={rootMargin:-y+"px "+-S+"px "+-h+"px "+-x+"px",threshold:et(0,zn(1,l))||1};let g=!0;function C(E){const P=E[0].intersectionRatio;if(P!==l){if(!g)return i();P?i(!1,P):o=setTimeout(()=>{i(!1,1e-7)},1e3)}g=!1}try{n=new IntersectionObserver(C,{...v,root:r.ownerDocument})}catch{n=new IntersectionObserver(C,v)}n.observe(e)}return i(!0),a}function PS(e,t,n,o){o===void 0&&(o={});const{ancestorScroll:r=!0,ancestorResize:a=!0,elementResize:i=typeof ResizeObserver=="function",layoutShift:s=typeof IntersectionObserver=="function",animationFrame:l=!1}=o,c=Lu(e),f=r||a?[...c?da(c):[],...da(t)]:[];f.forEach(m=>{r&&m.addEventListener("scroll",n,{passive:!0}),a&&m.addEventListener("resize",n)});const d=c&&s?ES(c,n):null;let u=-1,y=null;i&&(y=new ResizeObserver(m=>{let[v]=m;v&&v.target===c&&y&&(y.unobserve(t),cancelAnimationFrame(u),u=requestAnimationFrame(()=>{var g;(g=y)==null||g.observe(t)})),n()}),c&&!l&&y.observe(c),y.observe(t));let S,h=l?uo(e):null;l&&x();function x(){const m=uo(e);h&&(m.x!==h.x||m.y!==h.y||m.width!==h.width||m.height!==h.height)&&n(),h=m,S=requestAnimationFrame(x)}return n(),()=>{var m;f.forEach(v=>{r&&v.removeEventListener("scroll",n),a&&v.removeEventListener("resize",n)}),d==null||d(),(m=y)==null||m.disconnect(),y=null,l&&cancelAnimationFrame(S)}}const bS=oS,kS=rS,NS=eS,TS=iS,DS=tS,Of=Jw,AS=aS,RS=(e,t,n)=>{const o=new Map,r={platform:CS,...n},a={...r.platform,_c:o};return Zw(e,t,{...r,platform:a})};var di=typeof document<"u"?p.useLayoutEffect:p.useEffect;function Wi(e,t){if(e===t)return!0;if(typeof e!=typeof t)return!1;if(typeof e=="function"&&e.toString()===t.toString())return!0;let n,o,r;if(e&&t&&typeof e=="object"){if(Array.isArray(e)){if(n=e.length,n!==t.length)return!1;for(o=n;o--!==0;)if(!Wi(e[o],t[o]))return!1;return!0}if(r=Object.keys(e),n=r.length,n!==Object.keys(t).length)return!1;for(o=n;o--!==0;)if(!{}.hasOwnProperty.call(t,r[o]))return!1;for(o=n;o--!==0;){const a=r[o];if(!(a==="_owner"&&e.$$typeof)&&!Wi(e[a],t[a]))return!1}return!0}return e!==e&&t!==t}function Tv(e){return typeof window>"u"?1:(e.ownerDocument.defaultView||window).devicePixelRatio||1}function Mf(e,t){const n=Tv(e);return Math.round(t*n)/n}function cl(e){const t=p.useRef(e);return di(()=>{t.current=e}),t}function IS(e){e===void 0&&(e={});const{placement:t="bottom",strategy:n="absolute",middleware:o=[],platform:r,elements:{reference:a,floating:i}={},transform:s=!0,whileElementsMounted:l,open:c}=e,[f,d]=p.useState({x:0,y:0,strategy:n,placement:t,middlewareData:{},isPositioned:!1}),[u,y]=p.useState(o);Wi(u,o)||y(o);const[S,h]=p.useState(null),[x,m]=p.useState(null),v=p.useCallback(b=>{b!==P.current&&(P.current=b,h(b))},[]),g=p.useCallback(b=>{b!==k.current&&(k.current=b,m(b))},[]),C=a||S,E=i||x,P=p.useRef(null),k=p.useRef(null),N=p.useRef(f),j=l!=null,M=cl(l),I=cl(r),T=cl(c),F=p.useCallback(()=>{if(!P.current||!k.current)return;const b={placement:t,strategy:n,middleware:u};I.current&&(b.platform=I.current),RS(P.current,k.current,b).then(R=>{const $={...R,isPositioned:T.current!==!1};_.current&&!Wi(N.current,$)&&(N.current=$,Sa.flushSync(()=>{d($)}))})},[u,t,n,I,T]);di(()=>{c===!1&&N.current.isPositioned&&(N.current.isPositioned=!1,d(b=>({...b,isPositioned:!1})))},[c]);const _=p.useRef(!1);di(()=>(_.current=!0,()=>{_.current=!1}),[]),di(()=>{if(C&&(P.current=C),E&&(k.current=E),C&&E){if(M.current)return M.current(C,E,F);F()}},[C,E,F,M,j]);const K=p.useMemo(()=>({reference:P,floating:k,setReference:v,setFloating:g}),[v,g]),U=p.useMemo(()=>({reference:C,floating:E}),[C,E]),H=p.useMemo(()=>{const b={position:n,left:0,top:0};if(!U.floating)return b;const R=Mf(U.floating,f.x),$=Mf(U.floating,f.y);return s?{...b,transform:"translate("+R+"px, "+$+"px)",...Tv(U.floating)>=1.5&&{willChange:"transform"}}:{position:n,left:R,top:$}},[n,s,U.floating,f.x,f.y]);return p.useMemo(()=>({...f,update:F,refs:K,elements:U,floatingStyles:H}),[f,F,K,U,H])}const _S=e=>{function t(n){return{}.hasOwnProperty.call(n,"current")}return{name:"arrow",options:e,fn(n){const{element:o,padding:r}=typeof e=="function"?e(n):e;return o&&t(o)?o.current!=null?Of({element:o.current,padding:r}).fn(n):{}:o?Of({element:o,padding:r}).fn(n):{}}}},OS=(e,t)=>({...bS(e),options:[e,t]}),MS=(e,t)=>({...kS(e),options:[e,t]}),jS=(e,t)=>({...AS(e),options:[e,t]}),LS=(e,t)=>({...NS(e),options:[e,t]}),FS=(e,t)=>({...TS(e),options:[e,t]}),BS=(e,t)=>({...DS(e),options:[e,t]}),zS=(e,t)=>({..._S(e),options:[e,t]});var $S="Arrow",Dv=p.forwardRef((e,t)=>{const{children:n,width:o=10,height:r=5,...a}=e;return w.jsx(re.svg,{...a,ref:t,width:o,height:r,viewBox:"0 0 30 10",preserveAspectRatio:"none",children:e.asChild?n:w.jsx("polygon",{points:"0,0 30,0 15,10"})})});Dv.displayName=$S;var US=Dv;function VS(e,t=[]){let n=[];function o(a,i){const s=p.createContext(i),l=n.length;n=[...n,i];function c(d){const{scope:u,children:y,...S}=d,h=(u==null?void 0:u[e][l])||s,x=p.useMemo(()=>S,Object.values(S));return w.jsx(h.Provider,{value:x,children:y})}function f(d,u){const y=(u==null?void 0:u[e][l])||s,S=p.useContext(y);if(S)return S;if(i!==void 0)return i;throw new Error(`\`${d}\` must be used within \`${a}\``)}return c.displayName=a+"Provider",[c,f]}const r=()=>{const a=n.map(i=>p.createContext(i));return function(s){const l=(s==null?void 0:s[e])||a;return p.useMemo(()=>({[`__scope${e}`]:{...s,[e]:l}}),[s,l])}};return r.scopeName=e,[o,WS(r,...t)]}function WS(...e){const t=e[0];if(e.length===1)return t;const n=()=>{const o=e.map(r=>({useScope:r(),scopeName:r.scopeName}));return function(a){const i=o.reduce((s,{useScope:l,scopeName:c})=>{const d=l(a)[`__scope${c}`];return{...s,...d}},{});return p.useMemo(()=>({[`__scope${t.scopeName}`]:i}),[i])}};return n.scopeName=t.scopeName,n}function Fu(e){const[t,n]=p.useState(void 0);return Bn(()=>{if(e){n({width:e.offsetWidth,height:e.offsetHeight});const o=new ResizeObserver(r=>{if(!Array.isArray(r)||!r.length)return;const a=r[0];let i,s;if("borderBoxSize"in a){const l=a.borderBoxSize,c=Array.isArray(l)?l[0]:l;i=c.inlineSize,s=c.blockSize}else i=e.offsetWidth,s=e.offsetHeight;n({width:i,height:s})});return o.observe(e,{box:"border-box"}),()=>o.unobserve(e)}else n(void 0)},[e]),t}var Av="Popper",[Rv,Iv]=VS(Av),[Db,_v]=Rv(Av),Ov="PopperAnchor",Mv=p.forwardRef((e,t)=>{const{__scopePopper:n,virtualRef:o,...r}=e,a=_v(Ov,n),i=p.useRef(null),s=ge(t,i);return p.useEffect(()=>{a.onAnchorChange((o==null?void 0:o.current)||i.current)}),o?null:w.jsx(re.div,{...r,ref:s})});Mv.displayName=Ov;var Bu="PopperContent",[HS,KS]=Rv(Bu),jv=p.forwardRef((e,t)=>{var Xe,Tt,Dt,At,ho,ln;const{__scopePopper:n,side:o="bottom",sideOffset:r=0,align:a="center",alignOffset:i=0,arrowPadding:s=0,avoidCollisions:l=!0,collisionBoundary:c=[],collisionPadding:f=0,sticky:d="partial",hideWhenDetached:u=!1,updatePositionStrategy:y="optimized",onPlaced:S,...h}=e,x=_v(Bu,n),[m,v]=p.useState(null),g=ge(t,Ht=>v(Ht)),[C,E]=p.useState(null),P=Fu(C),k=(P==null?void 0:P.width)??0,N=(P==null?void 0:P.height)??0,j=o+(a!=="center"?"-"+a:""),M=typeof f=="number"?f:{top:0,right:0,bottom:0,left:0,...f},I=Array.isArray(c)?c:[c],T=I.length>0,F={padding:M,boundary:I.filter(YS),altBoundary:T},{refs:_,floatingStyles:K,placement:U,isPositioned:H,middlewareData:b}=IS({strategy:"fixed",placement:j,whileElementsMounted:(...Ht)=>PS(...Ht,{animationFrame:y==="always"}),elements:{reference:x.anchor},middleware:[OS({mainAxis:r+N,alignmentAxis:i}),l&&MS({mainAxis:!0,crossAxis:!1,limiter:d==="partial"?jS():void 0,...F}),l&&LS({...F}),FS({...F,apply:({elements:Ht,rects:cn,availableWidth:Qn,availableHeight:ht})=>{const{width:Cr,height:B}=cn.reference,W=Ht.floating.style;W.setProperty("--radix-popper-available-width",`${Qn}px`),W.setProperty("--radix-popper-available-height",`${ht}px`),W.setProperty("--radix-popper-anchor-width",`${Cr}px`),W.setProperty("--radix-popper-anchor-height",`${B}px`)}}),C&&zS({element:C,padding:s}),GS({arrowWidth:k,arrowHeight:N}),u&&BS({strategy:"referenceHidden",...F})]}),[R,$]=Bv(U),L=mt(S);Bn(()=>{H&&(L==null||L())},[H,L]);const V=(Xe=b.arrow)==null?void 0:Xe.x,X=(Tt=b.arrow)==null?void 0:Tt.y,le=((Dt=b.arrow)==null?void 0:Dt.centerOffset)!==0,[je,J]=p.useState();return Bn(()=>{m&&J(window.getComputedStyle(m).zIndex)},[m]),w.jsx("div",{ref:_.setFloating,"data-radix-popper-content-wrapper":"",style:{...K,transform:H?K.transform:"translate(0, -200%)",minWidth:"max-content",zIndex:je,"--radix-popper-transform-origin":[(At=b.transformOrigin)==null?void 0:At.x,(ho=b.transformOrigin)==null?void 0:ho.y].join(" "),...((ln=b.hide)==null?void 0:ln.referenceHidden)&&{visibility:"hidden",pointerEvents:"none"}},dir:e.dir,children:w.jsx(HS,{scope:n,placedSide:R,onArrowChange:E,arrowX:V,arrowY:X,shouldHideArrow:le,children:w.jsx(re.div,{"data-side":R,"data-align":$,...h,ref:g,style:{...h.style,animation:H?void 0:"none"}})})})});jv.displayName=Bu;var Lv="PopperArrow",QS={top:"bottom",right:"left",bottom:"top",left:"right"},Fv=p.forwardRef(function(t,n){const{__scopePopper:o,...r}=t,a=KS(Lv,o),i=QS[a.placedSide];return w.jsx("span",{ref:a.onArrowChange,style:{position:"absolute",left:a.arrowX,top:a.arrowY,[i]:0,transformOrigin:{top:"",right:"0 0",bottom:"center 0",left:"100% 0"}[a.placedSide],transform:{top:"translateY(100%)",right:"translateY(50%) rotate(90deg) translateX(-50%)",bottom:"rotate(180deg)",left:"translateY(50%) rotate(-90deg) translateX(50%)"}[a.placedSide],visibility:a.shouldHideArrow?"hidden":void 0},children:w.jsx(US,{...r,ref:n,style:{...r.style,display:"block"}})})});Fv.displayName=Lv;function YS(e){return e!==null}var GS=e=>({name:"transformOrigin",options:e,fn(t){var x,m,v;const{placement:n,rects:o,middlewareData:r}=t,i=((x=r.arrow)==null?void 0:x.centerOffset)!==0,s=i?0:e.arrowWidth,l=i?0:e.arrowHeight,[c,f]=Bv(n),d={start:"0%",center:"50%",end:"100%"}[f],u=(((m=r.arrow)==null?void 0:m.x)??0)+s/2,y=(((v=r.arrow)==null?void 0:v.y)??0)+l/2;let S="",h="";return c==="bottom"?(S=i?d:`${u}px`,h=`${-l}px`):c==="top"?(S=i?d:`${u}px`,h=`${o.floating.height+l}px`):c==="right"?(S=`${-l}px`,h=i?d:`${y}px`):c==="left"&&(S=`${o.floating.width+l}px`,h=i?d:`${y}px`),{data:{x:S,y:h}}}});function Bv(e){const[t,n="center"]=e.split("-");return[t,n]}var XS=Mv,qS=jv,ZS=Fv,[xs,Ab]=vr("Tooltip",[Iv]),zu=Iv(),zv="TooltipProvider",JS=700,jf="tooltip.open",[eC,$v]=xs(zv),Uv=e=>{const{__scopeTooltip:t,delayDuration:n=JS,skipDelayDuration:o=300,disableHoverableContent:r=!1,children:a}=e,[i,s]=p.useState(!0),l=p.useRef(!1),c=p.useRef(0);return p.useEffect(()=>{const f=c.current;return()=>window.clearTimeout(f)},[]),w.jsx(eC,{scope:t,isOpenDelayed:i,delayDuration:n,onOpen:p.useCallback(()=>{window.clearTimeout(c.current),s(!1)},[]),onClose:p.useCallback(()=>{window.clearTimeout(c.current),c.current=window.setTimeout(()=>s(!0),o)},[o]),isPointerInTransitRef:l,onPointerInTransitChange:p.useCallback(f=>{l.current=f},[]),disableHoverableContent:r,children:a})};Uv.displayName=zv;var Vv="Tooltip",[Rb,ws]=xs(Vv),Sc="TooltipTrigger",tC=p.forwardRef((e,t)=>{const{__scopeTooltip:n,...o}=e,r=ws(Sc,n),a=$v(Sc,n),i=zu(n),s=p.useRef(null),l=ge(t,s,r.onTriggerChange),c=p.useRef(!1),f=p.useRef(!1),d=p.useCallback(()=>c.current=!1,[]);return p.useEffect(()=>()=>document.removeEventListener("pointerup",d),[d]),w.jsx(XS,{asChild:!0,...i,children:w.jsx(re.button,{"aria-describedby":r.open?r.contentId:void 0,"data-state":r.stateAttribute,...o,ref:l,onPointerMove:ee(e.onPointerMove,u=>{u.pointerType!=="touch"&&!f.current&&!a.isPointerInTransitRef.current&&(r.onTriggerEnter(),f.current=!0)}),onPointerLeave:ee(e.onPointerLeave,()=>{r.onTriggerLeave(),f.current=!1}),onPointerDown:ee(e.onPointerDown,()=>{c.current=!0,document.addEventListener("pointerup",d,{once:!0})}),onFocus:ee(e.onFocus,()=>{c.current||r.onOpen()}),onBlur:ee(e.onBlur,r.onClose),onClick:ee(e.onClick,r.onClose)})})});tC.displayName=Sc;var nC="TooltipPortal",[Ib,oC]=xs(nC,{forceMount:void 0}),fr="TooltipContent",Wv=p.forwardRef((e,t)=>{const n=oC(fr,e.__scopeTooltip),{forceMount:o=n.forceMount,side:r="top",...a}=e,i=ws(fr,e.__scopeTooltip);return w.jsx(gr,{present:o||i.open,children:i.disableHoverableContent?w.jsx(Hv,{side:r,...a,ref:t}):w.jsx(rC,{side:r,...a,ref:t})})}),rC=p.forwardRef((e,t)=>{const n=ws(fr,e.__scopeTooltip),o=$v(fr,e.__scopeTooltip),r=p.useRef(null),a=ge(t,r),[i,s]=p.useState(null),{trigger:l,onClose:c}=n,f=r.current,{onPointerInTransitChange:d}=o,u=p.useCallback(()=>{s(null),d(!1)},[d]),y=p.useCallback((S,h)=>{const x=S.currentTarget,m={x:S.clientX,y:S.clientY},v=lC(m,x.getBoundingClientRect()),g=cC(m,v),C=uC(h.getBoundingClientRect()),E=fC([...g,...C]);s(E),d(!0)},[d]);return p.useEffect(()=>()=>u(),[u]),p.useEffect(()=>{if(l&&f){const S=x=>y(x,f),h=x=>y(x,l);return l.addEventListener("pointerleave",S),f.addEventListener("pointerleave",h),()=>{l.removeEventListener("pointerleave",S),f.removeEventListener("pointerleave",h)}}},[l,f,y,u]),p.useEffect(()=>{if(i){const S=h=>{const x=h.target,m={x:h.clientX,y:h.clientY},v=(l==null?void 0:l.contains(x))||(f==null?void 0:f.contains(x)),g=!dC(m,i);v?u():g&&(u(),c())};return document.addEventListener("pointermove",S),()=>document.removeEventListener("pointermove",S)}},[l,f,i,c,u]),w.jsx(Hv,{...e,ref:a})}),[aC,iC]=xs(Vv,{isInside:!1}),Hv=p.forwardRef((e,t)=>{const{__scopeTooltip:n,children:o,"aria-label":r,onEscapeKeyDown:a,onPointerDownOutside:i,...s}=e,l=ws(fr,n),c=zu(n),{onClose:f}=l;return p.useEffect(()=>(document.addEventListener(jf,f),()=>document.removeEventListener(jf,f)),[f]),p.useEffect(()=>{if(l.trigger){const d=u=>{const y=u.target;y!=null&&y.contains(l.trigger)&&f()};return window.addEventListener("scroll",d,{capture:!0}),()=>window.removeEventListener("scroll",d,{capture:!0})}},[l.trigger,f]),w.jsx(ds,{asChild:!0,disableOutsidePointerEvents:!1,onEscapeKeyDown:a,onPointerDownOutside:i,onFocusOutside:d=>d.preventDefault(),onDismiss:f,children:w.jsxs(qS,{"data-state":l.stateAttribute,...c,...s,ref:t,style:{...s.style,"--radix-tooltip-content-transform-origin":"var(--radix-popper-transform-origin)","--radix-tooltip-content-available-width":"var(--radix-popper-available-width)","--radix-tooltip-content-available-height":"var(--radix-popper-available-height)","--radix-tooltip-trigger-width":"var(--radix-popper-anchor-width)","--radix-tooltip-trigger-height":"var(--radix-popper-anchor-height)"},children:[w.jsx(bu,{children:o}),w.jsx(aC,{scope:n,isInside:!0,children:w.jsx(G2,{id:l.contentId,role:"tooltip",children:r||o})})]})})});Wv.displayName=fr;var Kv="TooltipArrow",sC=p.forwardRef((e,t)=>{const{__scopeTooltip:n,...o}=e,r=zu(n);return iC(Kv,n).isInside?null:w.jsx(ZS,{...r,...o,ref:t})});sC.displayName=Kv;function lC(e,t){const n=Math.abs(t.top-e.y),o=Math.abs(t.bottom-e.y),r=Math.abs(t.right-e.x),a=Math.abs(t.left-e.x);switch(Math.min(n,o,r,a)){case a:return"left";case r:return"right";case n:return"top";case o:return"bottom";default:throw new Error("unreachable")}}function cC(e,t,n=5){const o=[];switch(t){case"top":o.push({x:e.x-n,y:e.y+n},{x:e.x+n,y:e.y+n});break;case"bottom":o.push({x:e.x-n,y:e.y-n},{x:e.x+n,y:e.y-n});break;case"left":o.push({x:e.x+n,y:e.y-n},{x:e.x+n,y:e.y+n});break;case"right":o.push({x:e.x-n,y:e.y-n},{x:e.x-n,y:e.y+n});break}return o}function uC(e){const{top:t,right:n,bottom:o,left:r}=e;return[{x:r,y:t},{x:n,y:t},{x:n,y:o},{x:r,y:o}]}function dC(e,t){const{x:n,y:o}=e;let r=!1;for(let a=0,i=t.length-1;a<t.length;i=a++){const s=t[a].x,l=t[a].y,c=t[i].x,f=t[i].y;l>o!=f>o&&n<(c-s)*(o-l)/(f-l)+s&&(r=!r)}return r}function fC(e){const t=e.slice();return t.sort((n,o)=>n.x<o.x?-1:n.x>o.x?1:n.y<o.y?-1:n.y>o.y?1:0),pC(t)}function pC(e){if(e.length<=1)return e.slice();const t=[];for(let o=0;o<e.length;o++){const r=e[o];for(;t.length>=2;){const a=t[t.length-1],i=t[t.length-2];if((a.x-i.x)*(r.y-i.y)>=(a.y-i.y)*(r.x-i.x))t.pop();else break}t.push(r)}t.pop();const n=[];for(let o=e.length-1;o>=0;o--){const r=e[o];for(;n.length>=2;){const a=n[n.length-1],i=n[n.length-2];if((a.x-i.x)*(r.y-i.y)>=(a.y-i.y)*(r.x-i.x))n.pop();else break}n.push(r)}return n.pop(),t.length===1&&n.length===1&&t[0].x===n[0].x&&t[0].y===n[0].y?t:t.concat(n)}var mC=Uv,Qv=Wv;const hC=mC,vC=p.forwardRef(({className:e,sideOffset:t=4,...n},o)=>w.jsx(Qv,{"data-lov-id":"src/components/ui/tooltip.tsx:16:2","data-lov-name":"TooltipPrimitive.Content","data-component-path":"src/components/ui/tooltip.tsx","data-component-line":"16","data-component-file":"tooltip.tsx","data-component-name":"TooltipPrimitive.Content","data-component-content":"%7B%7D",ref:o,sideOffset:t,className:ae("z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",e),...n}));vC.displayName=Qv.displayName;var Ss=class{constructor(){this.listeners=new Set,this.subscribe=this.subscribe.bind(this)}subscribe(e){return this.listeners.add(e),this.onSubscribe(),()=>{this.listeners.delete(e),this.onUnsubscribe()}}hasListeners(){return this.listeners.size>0}onSubscribe(){}onUnsubscribe(){}},Cs=typeof window>"u"||"Deno"in globalThis;function yt(){}function gC(e,t){return typeof e=="function"?e(t):e}function yC(e){return typeof e=="number"&&e>=0&&e!==1/0}function xC(e,t){return Math.max(e+(t||0)-Date.now(),0)}function Lf(e,t){return typeof e=="function"?e(t):e}function wC(e,t){return typeof e=="function"?e(t):e}function Ff(e,t){const{type:n="all",exact:o,fetchStatus:r,predicate:a,queryKey:i,stale:s}=e;if(i){if(o){if(t.queryHash!==$u(i,t.options))return!1}else if(!pa(t.queryKey,i))return!1}if(n!=="all"){const l=t.isActive();if(n==="active"&&!l||n==="inactive"&&l)return!1}return!(typeof s=="boolean"&&t.isStale()!==s||r&&r!==t.state.fetchStatus||a&&!a(t))}function Bf(e,t){const{exact:n,status:o,predicate:r,mutationKey:a}=e;if(a){if(!t.options.mutationKey)return!1;if(n){if(fa(t.options.mutationKey)!==fa(a))return!1}else if(!pa(t.options.mutationKey,a))return!1}return!(o&&t.state.status!==o||r&&!r(t))}function $u(e,t){return((t==null?void 0:t.queryKeyHashFn)||fa)(e)}function fa(e){return JSON.stringify(e,(t,n)=>Cc(n)?Object.keys(n).sort().reduce((o,r)=>(o[r]=n[r],o),{}):n)}function pa(e,t){return e===t?!0:typeof e!=typeof t?!1:e&&t&&typeof e=="object"&&typeof t=="object"?!Object.keys(t).some(n=>!pa(e[n],t[n])):!1}function Yv(e,t){if(e===t)return e;const n=zf(e)&&zf(t);if(n||Cc(e)&&Cc(t)){const o=n?e:Object.keys(e),r=o.length,a=n?t:Object.keys(t),i=a.length,s=n?[]:{};let l=0;for(let c=0;c<i;c++){const f=n?c:a[c];(!n&&o.includes(f)||n)&&e[f]===void 0&&t[f]===void 0?(s[f]=void 0,l++):(s[f]=Yv(e[f],t[f]),s[f]===e[f]&&e[f]!==void 0&&l++)}return r===i&&l===r?e:s}return t}function zf(e){return Array.isArray(e)&&e.length===Object.keys(e).length}function Cc(e){if(!$f(e))return!1;const t=e.constructor;if(t===void 0)return!0;const n=t.prototype;return!(!$f(n)||!n.hasOwnProperty("isPrototypeOf")||Object.getPrototypeOf(e)!==Object.prototype)}function $f(e){return Object.prototype.toString.call(e)==="[object Object]"}function SC(e){return new Promise(t=>{setTimeout(t,e)})}function CC(e,t,n){return typeof n.structuralSharing=="function"?n.structuralSharing(e,t):n.structuralSharing!==!1?Yv(e,t):t}function EC(e,t,n=0){const o=[...e,t];return n&&o.length>n?o.slice(1):o}function PC(e,t,n=0){const o=[t,...e];return n&&o.length>n?o.slice(0,-1):o}var Uu=Symbol();function Gv(e,t){return!e.queryFn&&(t!=null&&t.initialPromise)?()=>t.initialPromise:!e.queryFn||e.queryFn===Uu?()=>Promise.reject(new Error(`Missing queryFn: '${e.queryHash}'`)):e.queryFn}var Jn,wn,Yo,fp,bC=(fp=class extends Ss{constructor(){super();te(this,Jn);te(this,wn);te(this,Yo);G(this,Yo,t=>{if(!Cs&&window.addEventListener){const n=()=>t();return window.addEventListener("visibilitychange",n,!1),()=>{window.removeEventListener("visibilitychange",n)}}})}onSubscribe(){D(this,wn)||this.setEventListener(D(this,Yo))}onUnsubscribe(){var t;this.hasListeners()||((t=D(this,wn))==null||t.call(this),G(this,wn,void 0))}setEventListener(t){var n;G(this,Yo,t),(n=D(this,wn))==null||n.call(this),G(this,wn,t(o=>{typeof o=="boolean"?this.setFocused(o):this.onFocus()}))}setFocused(t){D(this,Jn)!==t&&(G(this,Jn,t),this.onFocus())}onFocus(){const t=this.isFocused();this.listeners.forEach(n=>{n(t)})}isFocused(){var t;return typeof D(this,Jn)=="boolean"?D(this,Jn):((t=globalThis.document)==null?void 0:t.visibilityState)!=="hidden"}},Jn=new WeakMap,wn=new WeakMap,Yo=new WeakMap,fp),Xv=new bC,Go,Sn,Xo,pp,kC=(pp=class extends Ss{constructor(){super();te(this,Go,!0);te(this,Sn);te(this,Xo);G(this,Xo,t=>{if(!Cs&&window.addEventListener){const n=()=>t(!0),o=()=>t(!1);return window.addEventListener("online",n,!1),window.addEventListener("offline",o,!1),()=>{window.removeEventListener("online",n),window.removeEventListener("offline",o)}}})}onSubscribe(){D(this,Sn)||this.setEventListener(D(this,Xo))}onUnsubscribe(){var t;this.hasListeners()||((t=D(this,Sn))==null||t.call(this),G(this,Sn,void 0))}setEventListener(t){var n;G(this,Xo,t),(n=D(this,Sn))==null||n.call(this),G(this,Sn,t(this.setOnline.bind(this)))}setOnline(t){D(this,Go)!==t&&(G(this,Go,t),this.listeners.forEach(o=>{o(t)}))}isOnline(){return D(this,Go)}},Go=new WeakMap,Sn=new WeakMap,Xo=new WeakMap,pp),Hi=new kC;function NC(){let e,t;const n=new Promise((r,a)=>{e=r,t=a});n.status="pending",n.catch(()=>{});function o(r){Object.assign(n,r),delete n.resolve,delete n.reject}return n.resolve=r=>{o({status:"fulfilled",value:r}),e(r)},n.reject=r=>{o({status:"rejected",reason:r}),t(r)},n}function TC(e){return Math.min(1e3*2**e,3e4)}function qv(e){return(e??"online")==="online"?Hi.isOnline():!0}var Zv=class extends Error{constructor(e){super("CancelledError"),this.revert=e==null?void 0:e.revert,this.silent=e==null?void 0:e.silent}};function ul(e){return e instanceof Zv}function Jv(e){let t=!1,n=0,o=!1,r;const a=NC(),i=h=>{var x;o||(u(new Zv(h)),(x=e.abort)==null||x.call(e))},s=()=>{t=!0},l=()=>{t=!1},c=()=>Xv.isFocused()&&(e.networkMode==="always"||Hi.isOnline())&&e.canRun(),f=()=>qv(e.networkMode)&&e.canRun(),d=h=>{var x;o||(o=!0,(x=e.onSuccess)==null||x.call(e,h),r==null||r(),a.resolve(h))},u=h=>{var x;o||(o=!0,(x=e.onError)==null||x.call(e,h),r==null||r(),a.reject(h))},y=()=>new Promise(h=>{var x;r=m=>{(o||c())&&h(m)},(x=e.onPause)==null||x.call(e)}).then(()=>{var h;r=void 0,o||(h=e.onContinue)==null||h.call(e)}),S=()=>{if(o)return;let h;const x=n===0?e.initialPromise:void 0;try{h=x??e.fn()}catch(m){h=Promise.reject(m)}Promise.resolve(h).then(d).catch(m=>{var P;if(o)return;const v=e.retry??(Cs?0:3),g=e.retryDelay??TC,C=typeof g=="function"?g(n,m):g,E=v===!0||typeof v=="number"&&n<v||typeof v=="function"&&v(n,m);if(t||!E){u(m);return}n++,(P=e.onFail)==null||P.call(e,n,m),SC(C).then(()=>c()?void 0:y()).then(()=>{t?u(m):S()})})};return{promise:a,cancel:i,continue:()=>(r==null||r(),a),cancelRetry:s,continueRetry:l,canStart:f,start:()=>(f()?S():y().then(S),a)}}function DC(){let e=[],t=0,n=s=>{s()},o=s=>{s()},r=s=>setTimeout(s,0);const a=s=>{t?e.push(s):r(()=>{n(s)})},i=()=>{const s=e;e=[],s.length&&r(()=>{o(()=>{s.forEach(l=>{n(l)})})})};return{batch:s=>{let l;t++;try{l=s()}finally{t--,t||i()}return l},batchCalls:s=>(...l)=>{a(()=>{s(...l)})},schedule:a,setNotifyFunction:s=>{n=s},setBatchNotifyFunction:s=>{o=s},setScheduler:s=>{r=s}}}var Be=DC(),eo,mp,eg=(mp=class{constructor(){te(this,eo)}destroy(){this.clearGcTimeout()}scheduleGc(){this.clearGcTimeout(),yC(this.gcTime)&&G(this,eo,setTimeout(()=>{this.optionalRemove()},this.gcTime))}updateGcTime(e){this.gcTime=Math.max(this.gcTime||0,e??(Cs?1/0:5*60*1e3))}clearGcTimeout(){D(this,eo)&&(clearTimeout(D(this,eo)),G(this,eo,void 0))}},eo=new WeakMap,mp),qo,Zo,st,_e,ma,to,xt,Qt,hp,AC=(hp=class extends eg{constructor(t){super();te(this,xt);te(this,qo);te(this,Zo);te(this,st);te(this,_e);te(this,ma);te(this,to);G(this,to,!1),G(this,ma,t.defaultOptions),this.setOptions(t.options),this.observers=[],G(this,st,t.cache),this.queryKey=t.queryKey,this.queryHash=t.queryHash,G(this,qo,IC(this.options)),this.state=t.state??D(this,qo),this.scheduleGc()}get meta(){return this.options.meta}get promise(){var t;return(t=D(this,_e))==null?void 0:t.promise}setOptions(t){this.options={...D(this,ma),...t},this.updateGcTime(this.options.gcTime)}optionalRemove(){!this.observers.length&&this.state.fetchStatus==="idle"&&D(this,st).remove(this)}setData(t,n){const o=CC(this.state.data,t,this.options);return Ae(this,xt,Qt).call(this,{data:o,type:"success",dataUpdatedAt:n==null?void 0:n.updatedAt,manual:n==null?void 0:n.manual}),o}setState(t,n){Ae(this,xt,Qt).call(this,{type:"setState",state:t,setStateOptions:n})}cancel(t){var o,r;const n=(o=D(this,_e))==null?void 0:o.promise;return(r=D(this,_e))==null||r.cancel(t),n?n.then(yt).catch(yt):Promise.resolve()}destroy(){super.destroy(),this.cancel({silent:!0})}reset(){this.destroy(),this.setState(D(this,qo))}isActive(){return this.observers.some(t=>wC(t.options.enabled,this)!==!1)}isDisabled(){return this.getObserversCount()>0?!this.isActive():this.options.queryFn===Uu||this.state.dataUpdateCount+this.state.errorUpdateCount===0}isStale(){return this.state.isInvalidated?!0:this.getObserversCount()>0?this.observers.some(t=>t.getCurrentResult().isStale):this.state.data===void 0}isStaleByTime(t=0){return this.state.isInvalidated||this.state.data===void 0||!xC(this.state.dataUpdatedAt,t)}onFocus(){var n;const t=this.observers.find(o=>o.shouldFetchOnWindowFocus());t==null||t.refetch({cancelRefetch:!1}),(n=D(this,_e))==null||n.continue()}onOnline(){var n;const t=this.observers.find(o=>o.shouldFetchOnReconnect());t==null||t.refetch({cancelRefetch:!1}),(n=D(this,_e))==null||n.continue()}addObserver(t){this.observers.includes(t)||(this.observers.push(t),this.clearGcTimeout(),D(this,st).notify({type:"observerAdded",query:this,observer:t}))}removeObserver(t){this.observers.includes(t)&&(this.observers=this.observers.filter(n=>n!==t),this.observers.length||(D(this,_e)&&(D(this,to)?D(this,_e).cancel({revert:!0}):D(this,_e).cancelRetry()),this.scheduleGc()),D(this,st).notify({type:"observerRemoved",query:this,observer:t}))}getObserversCount(){return this.observers.length}invalidate(){this.state.isInvalidated||Ae(this,xt,Qt).call(this,{type:"invalidate"})}fetch(t,n){var l,c,f;if(this.state.fetchStatus!=="idle"){if(this.state.data!==void 0&&(n!=null&&n.cancelRefetch))this.cancel({silent:!0});else if(D(this,_e))return D(this,_e).continueRetry(),D(this,_e).promise}if(t&&this.setOptions(t),!this.options.queryFn){const d=this.observers.find(u=>u.options.queryFn);d&&this.setOptions(d.options)}const o=new AbortController,r=d=>{Object.defineProperty(d,"signal",{enumerable:!0,get:()=>(G(this,to,!0),o.signal)})},a=()=>{const d=Gv(this.options,n),u={queryKey:this.queryKey,meta:this.meta};return r(u),G(this,to,!1),this.options.persister?this.options.persister(d,u,this):d(u)},i={fetchOptions:n,options:this.options,queryKey:this.queryKey,state:this.state,fetchFn:a};r(i),(l=this.options.behavior)==null||l.onFetch(i,this),G(this,Zo,this.state),(this.state.fetchStatus==="idle"||this.state.fetchMeta!==((c=i.fetchOptions)==null?void 0:c.meta))&&Ae(this,xt,Qt).call(this,{type:"fetch",meta:(f=i.fetchOptions)==null?void 0:f.meta});const s=d=>{var u,y,S,h;ul(d)&&d.silent||Ae(this,xt,Qt).call(this,{type:"error",error:d}),ul(d)||((y=(u=D(this,st).config).onError)==null||y.call(u,d,this),(h=(S=D(this,st).config).onSettled)==null||h.call(S,this.state.data,d,this)),this.scheduleGc()};return G(this,_e,Jv({initialPromise:n==null?void 0:n.initialPromise,fn:i.fetchFn,abort:o.abort.bind(o),onSuccess:d=>{var u,y,S,h;if(d===void 0){s(new Error(`${this.queryHash} data is undefined`));return}try{this.setData(d)}catch(x){s(x);return}(y=(u=D(this,st).config).onSuccess)==null||y.call(u,d,this),(h=(S=D(this,st).config).onSettled)==null||h.call(S,d,this.state.error,this),this.scheduleGc()},onError:s,onFail:(d,u)=>{Ae(this,xt,Qt).call(this,{type:"failed",failureCount:d,error:u})},onPause:()=>{Ae(this,xt,Qt).call(this,{type:"pause"})},onContinue:()=>{Ae(this,xt,Qt).call(this,{type:"continue"})},retry:i.options.retry,retryDelay:i.options.retryDelay,networkMode:i.options.networkMode,canRun:()=>!0})),D(this,_e).start()}},qo=new WeakMap,Zo=new WeakMap,st=new WeakMap,_e=new WeakMap,ma=new WeakMap,to=new WeakMap,xt=new WeakSet,Qt=function(t){const n=o=>{switch(t.type){case"failed":return{...o,fetchFailureCount:t.failureCount,fetchFailureReason:t.error};case"pause":return{...o,fetchStatus:"paused"};case"continue":return{...o,fetchStatus:"fetching"};case"fetch":return{...o,...RC(o.data,this.options),fetchMeta:t.meta??null};case"success":return{...o,data:t.data,dataUpdateCount:o.dataUpdateCount+1,dataUpdatedAt:t.dataUpdatedAt??Date.now(),error:null,isInvalidated:!1,status:"success",...!t.manual&&{fetchStatus:"idle",fetchFailureCount:0,fetchFailureReason:null}};case"error":const r=t.error;return ul(r)&&r.revert&&D(this,Zo)?{...D(this,Zo),fetchStatus:"idle"}:{...o,error:r,errorUpdateCount:o.errorUpdateCount+1,errorUpdatedAt:Date.now(),fetchFailureCount:o.fetchFailureCount+1,fetchFailureReason:r,fetchStatus:"idle",status:"error"};case"invalidate":return{...o,isInvalidated:!0};case"setState":return{...o,...t.state}}};this.state=n(this.state),Be.batch(()=>{this.observers.forEach(o=>{o.onQueryUpdate()}),D(this,st).notify({query:this,type:"updated",action:t})})},hp);function RC(e,t){return{fetchFailureCount:0,fetchFailureReason:null,fetchStatus:qv(t.networkMode)?"fetching":"paused",...e===void 0&&{error:null,status:"pending"}}}function IC(e){const t=typeof e.initialData=="function"?e.initialData():e.initialData,n=t!==void 0,o=n?typeof e.initialDataUpdatedAt=="function"?e.initialDataUpdatedAt():e.initialDataUpdatedAt:0;return{data:t,dataUpdateCount:0,dataUpdatedAt:n?o??Date.now():0,error:null,errorUpdateCount:0,errorUpdatedAt:0,fetchFailureCount:0,fetchFailureReason:null,fetchMeta:null,isInvalidated:!1,status:n?"success":"pending",fetchStatus:"idle"}}var jt,vp,_C=(vp=class extends Ss{constructor(t={}){super();te(this,jt);this.config=t,G(this,jt,new Map)}build(t,n,o){const r=n.queryKey,a=n.queryHash??$u(r,n);let i=this.get(a);return i||(i=new AC({cache:this,queryKey:r,queryHash:a,options:t.defaultQueryOptions(n),state:o,defaultOptions:t.getQueryDefaults(r)}),this.add(i)),i}add(t){D(this,jt).has(t.queryHash)||(D(this,jt).set(t.queryHash,t),this.notify({type:"added",query:t}))}remove(t){const n=D(this,jt).get(t.queryHash);n&&(t.destroy(),n===t&&D(this,jt).delete(t.queryHash),this.notify({type:"removed",query:t}))}clear(){Be.batch(()=>{this.getAll().forEach(t=>{this.remove(t)})})}get(t){return D(this,jt).get(t)}getAll(){return[...D(this,jt).values()]}find(t){const n={exact:!0,...t};return this.getAll().find(o=>Ff(n,o))}findAll(t={}){const n=this.getAll();return Object.keys(t).length>0?n.filter(o=>Ff(t,o)):n}notify(t){Be.batch(()=>{this.listeners.forEach(n=>{n(t)})})}onFocus(){Be.batch(()=>{this.getAll().forEach(t=>{t.onFocus()})})}onOnline(){Be.batch(()=>{this.getAll().forEach(t=>{t.onOnline()})})}},jt=new WeakMap,vp),Lt,Le,no,Ft,mn,gp,OC=(gp=class extends eg{constructor(t){super();te(this,Ft);te(this,Lt);te(this,Le);te(this,no);this.mutationId=t.mutationId,G(this,Le,t.mutationCache),G(this,Lt,[]),this.state=t.state||MC(),this.setOptions(t.options),this.scheduleGc()}setOptions(t){this.options=t,this.updateGcTime(this.options.gcTime)}get meta(){return this.options.meta}addObserver(t){D(this,Lt).includes(t)||(D(this,Lt).push(t),this.clearGcTimeout(),D(this,Le).notify({type:"observerAdded",mutation:this,observer:t}))}removeObserver(t){G(this,Lt,D(this,Lt).filter(n=>n!==t)),this.scheduleGc(),D(this,Le).notify({type:"observerRemoved",mutation:this,observer:t})}optionalRemove(){D(this,Lt).length||(this.state.status==="pending"?this.scheduleGc():D(this,Le).remove(this))}continue(){var t;return((t=D(this,no))==null?void 0:t.continue())??this.execute(this.state.variables)}async execute(t){var r,a,i,s,l,c,f,d,u,y,S,h,x,m,v,g,C,E,P,k;G(this,no,Jv({fn:()=>this.options.mutationFn?this.options.mutationFn(t):Promise.reject(new Error("No mutationFn found")),onFail:(N,j)=>{Ae(this,Ft,mn).call(this,{type:"failed",failureCount:N,error:j})},onPause:()=>{Ae(this,Ft,mn).call(this,{type:"pause"})},onContinue:()=>{Ae(this,Ft,mn).call(this,{type:"continue"})},retry:this.options.retry??0,retryDelay:this.options.retryDelay,networkMode:this.options.networkMode,canRun:()=>D(this,Le).canRun(this)}));const n=this.state.status==="pending",o=!D(this,no).canStart();try{if(!n){Ae(this,Ft,mn).call(this,{type:"pending",variables:t,isPaused:o}),await((a=(r=D(this,Le).config).onMutate)==null?void 0:a.call(r,t,this));const j=await((s=(i=this.options).onMutate)==null?void 0:s.call(i,t));j!==this.state.context&&Ae(this,Ft,mn).call(this,{type:"pending",context:j,variables:t,isPaused:o})}const N=await D(this,no).start();return await((c=(l=D(this,Le).config).onSuccess)==null?void 0:c.call(l,N,t,this.state.context,this)),await((d=(f=this.options).onSuccess)==null?void 0:d.call(f,N,t,this.state.context)),await((y=(u=D(this,Le).config).onSettled)==null?void 0:y.call(u,N,null,this.state.variables,this.state.context,this)),await((h=(S=this.options).onSettled)==null?void 0:h.call(S,N,null,t,this.state.context)),Ae(this,Ft,mn).call(this,{type:"success",data:N}),N}catch(N){try{throw await((m=(x=D(this,Le).config).onError)==null?void 0:m.call(x,N,t,this.state.context,this)),await((g=(v=this.options).onError)==null?void 0:g.call(v,N,t,this.state.context)),await((E=(C=D(this,Le).config).onSettled)==null?void 0:E.call(C,void 0,N,this.state.variables,this.state.context,this)),await((k=(P=this.options).onSettled)==null?void 0:k.call(P,void 0,N,t,this.state.context)),N}finally{Ae(this,Ft,mn).call(this,{type:"error",error:N})}}finally{D(this,Le).runNext(this)}}},Lt=new WeakMap,Le=new WeakMap,no=new WeakMap,Ft=new WeakSet,mn=function(t){const n=o=>{switch(t.type){case"failed":return{...o,failureCount:t.failureCount,failureReason:t.error};case"pause":return{...o,isPaused:!0};case"continue":return{...o,isPaused:!1};case"pending":return{...o,context:t.context,data:void 0,failureCount:0,failureReason:null,error:null,isPaused:t.isPaused,status:"pending",variables:t.variables,submittedAt:Date.now()};case"success":return{...o,data:t.data,failureCount:0,failureReason:null,error:null,status:"success",isPaused:!1};case"error":return{...o,data:void 0,error:t.error,failureCount:o.failureCount+1,failureReason:t.error,isPaused:!1,status:"error"}}};this.state=n(this.state),Be.batch(()=>{D(this,Lt).forEach(o=>{o.onMutationUpdate(t)}),D(this,Le).notify({mutation:this,type:"updated",action:t})})},gp);function MC(){return{context:void 0,data:void 0,error:null,failureCount:0,failureReason:null,isPaused:!1,status:"idle",variables:void 0,submittedAt:0}}var qe,ha,yp,jC=(yp=class extends Ss{constructor(t={}){super();te(this,qe);te(this,ha);this.config=t,G(this,qe,new Map),G(this,ha,Date.now())}build(t,n,o){const r=new OC({mutationCache:this,mutationId:++Pa(this,ha)._,options:t.defaultMutationOptions(n),state:o});return this.add(r),r}add(t){const n=Ka(t),o=D(this,qe).get(n)??[];o.push(t),D(this,qe).set(n,o),this.notify({type:"added",mutation:t})}remove(t){var o;const n=Ka(t);if(D(this,qe).has(n)){const r=(o=D(this,qe).get(n))==null?void 0:o.filter(a=>a!==t);r&&(r.length===0?D(this,qe).delete(n):D(this,qe).set(n,r))}this.notify({type:"removed",mutation:t})}canRun(t){var o;const n=(o=D(this,qe).get(Ka(t)))==null?void 0:o.find(r=>r.state.status==="pending");return!n||n===t}runNext(t){var o;const n=(o=D(this,qe).get(Ka(t)))==null?void 0:o.find(r=>r!==t&&r.state.isPaused);return(n==null?void 0:n.continue())??Promise.resolve()}clear(){Be.batch(()=>{this.getAll().forEach(t=>{this.remove(t)})})}getAll(){return[...D(this,qe).values()].flat()}find(t){const n={exact:!0,...t};return this.getAll().find(o=>Bf(n,o))}findAll(t={}){return this.getAll().filter(n=>Bf(t,n))}notify(t){Be.batch(()=>{this.listeners.forEach(n=>{n(t)})})}resumePausedMutations(){const t=this.getAll().filter(n=>n.state.isPaused);return Be.batch(()=>Promise.all(t.map(n=>n.continue().catch(yt))))}},qe=new WeakMap,ha=new WeakMap,yp);function Ka(e){var t;return((t=e.options.scope)==null?void 0:t.id)??String(e.mutationId)}function Uf(e){return{onFetch:(t,n)=>{var f,d,u,y,S;const o=t.options,r=(u=(d=(f=t.fetchOptions)==null?void 0:f.meta)==null?void 0:d.fetchMore)==null?void 0:u.direction,a=((y=t.state.data)==null?void 0:y.pages)||[],i=((S=t.state.data)==null?void 0:S.pageParams)||[];let s={pages:[],pageParams:[]},l=0;const c=async()=>{let h=!1;const x=g=>{Object.defineProperty(g,"signal",{enumerable:!0,get:()=>(t.signal.aborted?h=!0:t.signal.addEventListener("abort",()=>{h=!0}),t.signal)})},m=Gv(t.options,t.fetchOptions),v=async(g,C,E)=>{if(h)return Promise.reject();if(C==null&&g.pages.length)return Promise.resolve(g);const P={queryKey:t.queryKey,pageParam:C,direction:E?"backward":"forward",meta:t.options.meta};x(P);const k=await m(P),{maxPages:N}=t.options,j=E?PC:EC;return{pages:j(g.pages,k,N),pageParams:j(g.pageParams,C,N)}};if(r&&a.length){const g=r==="backward",C=g?LC:Vf,E={pages:a,pageParams:i},P=C(o,E);s=await v(E,P,g)}else{const g=e??a.length;do{const C=l===0?i[0]??o.initialPageParam:Vf(o,s);if(l>0&&C==null)break;s=await v(s,C),l++}while(l<g)}return s};t.options.persister?t.fetchFn=()=>{var h,x;return(x=(h=t.options).persister)==null?void 0:x.call(h,c,{queryKey:t.queryKey,meta:t.options.meta,signal:t.signal},n)}:t.fetchFn=c}}}function Vf(e,{pages:t,pageParams:n}){const o=t.length-1;return t.length>0?e.getNextPageParam(t[o],t,n[o],n):void 0}function LC(e,{pages:t,pageParams:n}){var o;return t.length>0?(o=e.getPreviousPageParam)==null?void 0:o.call(e,t[0],t,n[0],n):void 0}var ye,Cn,En,Jo,er,Pn,tr,nr,xp,FC=(xp=class{constructor(e={}){te(this,ye);te(this,Cn);te(this,En);te(this,Jo);te(this,er);te(this,Pn);te(this,tr);te(this,nr);G(this,ye,e.queryCache||new _C),G(this,Cn,e.mutationCache||new jC),G(this,En,e.defaultOptions||{}),G(this,Jo,new Map),G(this,er,new Map),G(this,Pn,0)}mount(){Pa(this,Pn)._++,D(this,Pn)===1&&(G(this,tr,Xv.subscribe(async e=>{e&&(await this.resumePausedMutations(),D(this,ye).onFocus())})),G(this,nr,Hi.subscribe(async e=>{e&&(await this.resumePausedMutations(),D(this,ye).onOnline())})))}unmount(){var e,t;Pa(this,Pn)._--,D(this,Pn)===0&&((e=D(this,tr))==null||e.call(this),G(this,tr,void 0),(t=D(this,nr))==null||t.call(this),G(this,nr,void 0))}isFetching(e){return D(this,ye).findAll({...e,fetchStatus:"fetching"}).length}isMutating(e){return D(this,Cn).findAll({...e,status:"pending"}).length}getQueryData(e){var n;const t=this.defaultQueryOptions({queryKey:e});return(n=D(this,ye).get(t.queryHash))==null?void 0:n.state.data}ensureQueryData(e){const t=this.getQueryData(e.queryKey);if(t===void 0)return this.fetchQuery(e);{const n=this.defaultQueryOptions(e),o=D(this,ye).build(this,n);return e.revalidateIfStale&&o.isStaleByTime(Lf(n.staleTime,o))&&this.prefetchQuery(n),Promise.resolve(t)}}getQueriesData(e){return D(this,ye).findAll(e).map(({queryKey:t,state:n})=>{const o=n.data;return[t,o]})}setQueryData(e,t,n){const o=this.defaultQueryOptions({queryKey:e}),r=D(this,ye).get(o.queryHash),a=r==null?void 0:r.state.data,i=gC(t,a);if(i!==void 0)return D(this,ye).build(this,o).setData(i,{...n,manual:!0})}setQueriesData(e,t,n){return Be.batch(()=>D(this,ye).findAll(e).map(({queryKey:o})=>[o,this.setQueryData(o,t,n)]))}getQueryState(e){var n;const t=this.defaultQueryOptions({queryKey:e});return(n=D(this,ye).get(t.queryHash))==null?void 0:n.state}removeQueries(e){const t=D(this,ye);Be.batch(()=>{t.findAll(e).forEach(n=>{t.remove(n)})})}resetQueries(e,t){const n=D(this,ye),o={type:"active",...e};return Be.batch(()=>(n.findAll(e).forEach(r=>{r.reset()}),this.refetchQueries(o,t)))}cancelQueries(e={},t={}){const n={revert:!0,...t},o=Be.batch(()=>D(this,ye).findAll(e).map(r=>r.cancel(n)));return Promise.all(o).then(yt).catch(yt)}invalidateQueries(e={},t={}){return Be.batch(()=>{if(D(this,ye).findAll(e).forEach(o=>{o.invalidate()}),e.refetchType==="none")return Promise.resolve();const n={...e,type:e.refetchType??e.type??"active"};return this.refetchQueries(n,t)})}refetchQueries(e={},t){const n={...t,cancelRefetch:(t==null?void 0:t.cancelRefetch)??!0},o=Be.batch(()=>D(this,ye).findAll(e).filter(r=>!r.isDisabled()).map(r=>{let a=r.fetch(void 0,n);return n.throwOnError||(a=a.catch(yt)),r.state.fetchStatus==="paused"?Promise.resolve():a}));return Promise.all(o).then(yt)}fetchQuery(e){const t=this.defaultQueryOptions(e);t.retry===void 0&&(t.retry=!1);const n=D(this,ye).build(this,t);return n.isStaleByTime(Lf(t.staleTime,n))?n.fetch(t):Promise.resolve(n.state.data)}prefetchQuery(e){return this.fetchQuery(e).then(yt).catch(yt)}fetchInfiniteQuery(e){return e.behavior=Uf(e.pages),this.fetchQuery(e)}prefetchInfiniteQuery(e){return this.fetchInfiniteQuery(e).then(yt).catch(yt)}ensureInfiniteQueryData(e){return e.behavior=Uf(e.pages),this.ensureQueryData(e)}resumePausedMutations(){return Hi.isOnline()?D(this,Cn).resumePausedMutations():Promise.resolve()}getQueryCache(){return D(this,ye)}getMutationCache(){return D(this,Cn)}getDefaultOptions(){return D(this,En)}setDefaultOptions(e){G(this,En,e)}setQueryDefaults(e,t){D(this,Jo).set(fa(e),{queryKey:e,defaultOptions:t})}getQueryDefaults(e){const t=[...D(this,Jo).values()];let n={};return t.forEach(o=>{pa(e,o.queryKey)&&(n={...n,...o.defaultOptions})}),n}setMutationDefaults(e,t){D(this,er).set(fa(e),{mutationKey:e,defaultOptions:t})}getMutationDefaults(e){const t=[...D(this,er).values()];let n={};return t.forEach(o=>{pa(e,o.mutationKey)&&(n={...n,...o.defaultOptions})}),n}defaultQueryOptions(e){if(e._defaulted)return e;const t={...D(this,En).queries,...this.getQueryDefaults(e.queryKey),...e,_defaulted:!0};return t.queryHash||(t.queryHash=$u(t.queryKey,t)),t.refetchOnReconnect===void 0&&(t.refetchOnReconnect=t.networkMode!=="always"),t.throwOnError===void 0&&(t.throwOnError=!!t.suspense),!t.networkMode&&t.persister&&(t.networkMode="offlineFirst"),t.enabled!==!0&&t.queryFn===Uu&&(t.enabled=!1),t}defaultMutationOptions(e){return e!=null&&e._defaulted?e:{...D(this,En).mutations,...(e==null?void 0:e.mutationKey)&&this.getMutationDefaults(e.mutationKey),...e,_defaulted:!0}}clear(){D(this,ye).clear(),D(this,Cn).clear()}},ye=new WeakMap,Cn=new WeakMap,En=new WeakMap,Jo=new WeakMap,er=new WeakMap,Pn=new WeakMap,tr=new WeakMap,nr=new WeakMap,xp),BC=p.createContext(void 0),zC=({client:e,children:t})=>(p.useEffect(()=>(e.mount(),()=>{e.unmount()}),[e]),w.jsx(BC.Provider,{value:e,children:t}));/**
 * @remix-run/router v1.20.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */function Ki(){return Ki=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},Ki.apply(this,arguments)}var Nn;(function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"})(Nn||(Nn={}));const Wf="popstate";function $C(e){e===void 0&&(e={});function t(o,r){let{pathname:a,search:i,hash:s}=o.location;return Ec("",{pathname:a,search:i,hash:s},r.state&&r.state.usr||null,r.state&&r.state.key||"default")}function n(o,r){return typeof r=="string"?r:ng(r)}return VC(t,n,null,e)}function Ge(e,t){if(e===!1||e===null||typeof e>"u")throw new Error(t)}function tg(e,t){if(!e){typeof console<"u"&&console.warn(t);try{throw new Error(t)}catch{}}}function UC(){return Math.random().toString(36).substr(2,8)}function Hf(e,t){return{usr:e.state,key:e.key,idx:t}}function Ec(e,t,n,o){return n===void 0&&(n=null),Ki({pathname:typeof e=="string"?e:e.pathname,search:"",hash:""},typeof t=="string"?Es(t):t,{state:n,key:t&&t.key||o||UC()})}function ng(e){let{pathname:t="/",search:n="",hash:o=""}=e;return n&&n!=="?"&&(t+=n.charAt(0)==="?"?n:"?"+n),o&&o!=="#"&&(t+=o.charAt(0)==="#"?o:"#"+o),t}function Es(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let o=e.indexOf("?");o>=0&&(t.search=e.substr(o),e=e.substr(0,o)),e&&(t.pathname=e)}return t}function VC(e,t,n,o){o===void 0&&(o={});let{window:r=document.defaultView,v5Compat:a=!1}=o,i=r.history,s=Nn.Pop,l=null,c=f();c==null&&(c=0,i.replaceState(Ki({},i.state,{idx:c}),""));function f(){return(i.state||{idx:null}).idx}function d(){s=Nn.Pop;let x=f(),m=x==null?null:x-c;c=x,l&&l({action:s,location:h.location,delta:m})}function u(x,m){s=Nn.Push;let v=Ec(h.location,x,m);c=f()+1;let g=Hf(v,c),C=h.createHref(v);try{i.pushState(g,"",C)}catch(E){if(E instanceof DOMException&&E.name==="DataCloneError")throw E;r.location.assign(C)}a&&l&&l({action:s,location:h.location,delta:1})}function y(x,m){s=Nn.Replace;let v=Ec(h.location,x,m);c=f();let g=Hf(v,c),C=h.createHref(v);i.replaceState(g,"",C),a&&l&&l({action:s,location:h.location,delta:0})}function S(x){let m=r.location.origin!=="null"?r.location.origin:r.location.href,v=typeof x=="string"?x:ng(x);return v=v.replace(/ $/,"%20"),Ge(m,"No window.location.(origin|href) available to create URL for href: "+v),new URL(v,m)}let h={get action(){return s},get location(){return e(r,i)},listen(x){if(l)throw new Error("A history only accepts one active listener");return r.addEventListener(Wf,d),l=x,()=>{r.removeEventListener(Wf,d),l=null}},createHref(x){return t(r,x)},createURL:S,encodeLocation(x){let m=S(x);return{pathname:m.pathname,search:m.search,hash:m.hash}},push:u,replace:y,go(x){return i.go(x)}};return h}var Kf;(function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"})(Kf||(Kf={}));function WC(e,t,n){return n===void 0&&(n="/"),HC(e,t,n,!1)}function HC(e,t,n,o){let r=typeof t=="string"?Es(t):t,a=ag(r.pathname||"/",n);if(a==null)return null;let i=og(e);KC(i);let s=null;for(let l=0;s==null&&l<i.length;++l){let c=oE(a);s=tE(i[l],c,o)}return s}function og(e,t,n,o){t===void 0&&(t=[]),n===void 0&&(n=[]),o===void 0&&(o="");let r=(a,i,s)=>{let l={relativePath:s===void 0?a.path||"":s,caseSensitive:a.caseSensitive===!0,childrenIndex:i,route:a};l.relativePath.startsWith("/")&&(Ge(l.relativePath.startsWith(o),'Absolute route path "'+l.relativePath+'" nested under path '+('"'+o+'" is not valid. An absolute child route path ')+"must start with the combined path of all its parent routes."),l.relativePath=l.relativePath.slice(o.length));let c=Ho([o,l.relativePath]),f=n.concat(l);a.children&&a.children.length>0&&(Ge(a.index!==!0,"Index routes must not have child routes. Please remove "+('all child routes from route path "'+c+'".')),og(a.children,t,f,c)),!(a.path==null&&!a.index)&&t.push({path:c,score:JC(c,a.index),routesMeta:f})};return e.forEach((a,i)=>{var s;if(a.path===""||!((s=a.path)!=null&&s.includes("?")))r(a,i);else for(let l of rg(a.path))r(a,i,l)}),t}function rg(e){let t=e.split("/");if(t.length===0)return[];let[n,...o]=t,r=n.endsWith("?"),a=n.replace(/\?$/,"");if(o.length===0)return r?[a,""]:[a];let i=rg(o.join("/")),s=[];return s.push(...i.map(l=>l===""?a:[a,l].join("/"))),r&&s.push(...i),s.map(l=>e.startsWith("/")&&l===""?"/":l)}function KC(e){e.sort((t,n)=>t.score!==n.score?n.score-t.score:eE(t.routesMeta.map(o=>o.childrenIndex),n.routesMeta.map(o=>o.childrenIndex)))}const QC=/^:[\w-]+$/,YC=3,GC=2,XC=1,qC=10,ZC=-2,Qf=e=>e==="*";function JC(e,t){let n=e.split("/"),o=n.length;return n.some(Qf)&&(o+=ZC),t&&(o+=GC),n.filter(r=>!Qf(r)).reduce((r,a)=>r+(QC.test(a)?YC:a===""?XC:qC),o)}function eE(e,t){return e.length===t.length&&e.slice(0,-1).every((o,r)=>o===t[r])?e[e.length-1]-t[t.length-1]:0}function tE(e,t,n){let{routesMeta:o}=e,r={},a="/",i=[];for(let s=0;s<o.length;++s){let l=o[s],c=s===o.length-1,f=a==="/"?t:t.slice(a.length)||"/",d=Yf({path:l.relativePath,caseSensitive:l.caseSensitive,end:c},f),u=l.route;if(!d&&c&&n&&!o[o.length-1].route.index&&(d=Yf({path:l.relativePath,caseSensitive:l.caseSensitive,end:!1},f)),!d)return null;Object.assign(r,d.params),i.push({params:r,pathname:Ho([a,d.pathname]),pathnameBase:rE(Ho([a,d.pathnameBase])),route:u}),d.pathnameBase!=="/"&&(a=Ho([a,d.pathnameBase]))}return i}function Yf(e,t){typeof e=="string"&&(e={path:e,caseSensitive:!1,end:!0});let[n,o]=nE(e.path,e.caseSensitive,e.end),r=t.match(n);if(!r)return null;let a=r[0],i=a.replace(/(.)\/+$/,"$1"),s=r.slice(1);return{params:o.reduce((c,f,d)=>{let{paramName:u,isOptional:y}=f;if(u==="*"){let h=s[d]||"";i=a.slice(0,a.length-h.length).replace(/(.)\/+$/,"$1")}const S=s[d];return y&&!S?c[u]=void 0:c[u]=(S||"").replace(/%2F/g,"/"),c},{}),pathname:a,pathnameBase:i,pattern:e}}function nE(e,t,n){t===void 0&&(t=!1),n===void 0&&(n=!0),tg(e==="*"||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were '+('"'+e.replace(/\*$/,"/*")+'" because the `*` character must ')+"always follow a `/` in the pattern. To get rid of this warning, "+('please change the route path to "'+e.replace(/\*$/,"/*")+'".'));let o=[],r="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:([\w-]+)(\?)?/g,(i,s,l)=>(o.push({paramName:s,isOptional:l!=null}),l?"/?([^\\/]+)?":"/([^\\/]+)"));return e.endsWith("*")?(o.push({paramName:"*"}),r+=e==="*"||e==="/*"?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?r+="\\/*$":e!==""&&e!=="/"&&(r+="(?:(?=\\/|$))"),[new RegExp(r,t?void 0:"i"),o]}function oE(e){try{return e.split("/").map(t=>decodeURIComponent(t).replace(/\//g,"%2F")).join("/")}catch(t){return tg(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent '+("encoding ("+t+").")),e}}function ag(e,t){if(t==="/")return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,o=e.charAt(n);return o&&o!=="/"?null:e.slice(n)||"/"}const Ho=e=>e.join("/").replace(/\/\/+/g,"/"),rE=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/");function aE(e){return e!=null&&typeof e.status=="number"&&typeof e.statusText=="string"&&typeof e.internal=="boolean"&&"data"in e}const ig=["post","put","patch","delete"];new Set(ig);const iE=["get",...ig];new Set(iE);/**
 * React Router v6.27.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */function Qi(){return Qi=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},Qi.apply(this,arguments)}const sE=p.createContext(null),lE=p.createContext(null),sg=p.createContext(null),Ps=p.createContext(null),bs=p.createContext({outlet:null,matches:[],isDataRoute:!1}),lg=p.createContext(null);function Vu(){return p.useContext(Ps)!=null}function cg(){return Vu()||Ge(!1),p.useContext(Ps).location}function cE(e,t){return uE(e,t)}function uE(e,t,n,o){Vu()||Ge(!1);let{navigator:r}=p.useContext(sg),{matches:a}=p.useContext(bs),i=a[a.length-1],s=i?i.params:{};i&&i.pathname;let l=i?i.pathnameBase:"/";i&&i.route;let c=cg(),f;if(t){var d;let x=typeof t=="string"?Es(t):t;l==="/"||(d=x.pathname)!=null&&d.startsWith(l)||Ge(!1),f=x}else f=c;let u=f.pathname||"/",y=u;if(l!=="/"){let x=l.replace(/^\//,"").split("/");y="/"+u.replace(/^\//,"").split("/").slice(x.length).join("/")}let S=WC(e,{pathname:y}),h=hE(S&&S.map(x=>Object.assign({},x,{params:Object.assign({},s,x.params),pathname:Ho([l,r.encodeLocation?r.encodeLocation(x.pathname).pathname:x.pathname]),pathnameBase:x.pathnameBase==="/"?l:Ho([l,r.encodeLocation?r.encodeLocation(x.pathnameBase).pathname:x.pathnameBase])})),a,n,o);return t&&h?p.createElement(Ps.Provider,{value:{location:Qi({pathname:"/",search:"",hash:"",state:null,key:"default"},f),navigationType:Nn.Pop}},h):h}function dE(){let e=xE(),t=aE(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),n=e instanceof Error?e.stack:null,r={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return p.createElement(p.Fragment,null,p.createElement("h2",null,"Unexpected Application Error!"),p.createElement("h3",{style:{fontStyle:"italic"}},t),n?p.createElement("pre",{style:r},n):null,null)}const fE=p.createElement(dE,null);class pE extends p.Component{constructor(t){super(t),this.state={location:t.location,revalidation:t.revalidation,error:t.error}}static getDerivedStateFromError(t){return{error:t}}static getDerivedStateFromProps(t,n){return n.location!==t.location||n.revalidation!=="idle"&&t.revalidation==="idle"?{error:t.error,location:t.location,revalidation:t.revalidation}:{error:t.error!==void 0?t.error:n.error,location:n.location,revalidation:t.revalidation||n.revalidation}}componentDidCatch(t,n){console.error("React Router caught the following error during render",t,n)}render(){return this.state.error!==void 0?p.createElement(bs.Provider,{value:this.props.routeContext},p.createElement(lg.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function mE(e){let{routeContext:t,match:n,children:o}=e,r=p.useContext(sE);return r&&r.static&&r.staticContext&&(n.route.errorElement||n.route.ErrorBoundary)&&(r.staticContext._deepestRenderedBoundaryId=n.route.id),p.createElement(bs.Provider,{value:t},o)}function hE(e,t,n,o){var r;if(t===void 0&&(t=[]),n===void 0&&(n=null),o===void 0&&(o=null),e==null){var a;if(!n)return null;if(n.errors)e=n.matches;else if((a=o)!=null&&a.v7_partialHydration&&t.length===0&&!n.initialized&&n.matches.length>0)e=n.matches;else return null}let i=e,s=(r=n)==null?void 0:r.errors;if(s!=null){let f=i.findIndex(d=>d.route.id&&(s==null?void 0:s[d.route.id])!==void 0);f>=0||Ge(!1),i=i.slice(0,Math.min(i.length,f+1))}let l=!1,c=-1;if(n&&o&&o.v7_partialHydration)for(let f=0;f<i.length;f++){let d=i[f];if((d.route.HydrateFallback||d.route.hydrateFallbackElement)&&(c=f),d.route.id){let{loaderData:u,errors:y}=n,S=d.route.loader&&u[d.route.id]===void 0&&(!y||y[d.route.id]===void 0);if(d.route.lazy||S){l=!0,c>=0?i=i.slice(0,c+1):i=[i[0]];break}}}return i.reduceRight((f,d,u)=>{let y,S=!1,h=null,x=null;n&&(y=s&&d.route.id?s[d.route.id]:void 0,h=d.route.errorElement||fE,l&&(c<0&&u===0?(S=!0,x=null):c===u&&(S=!0,x=d.route.hydrateFallbackElement||null)));let m=t.concat(i.slice(0,u+1)),v=()=>{let g;return y?g=h:S?g=x:d.route.Component?g=p.createElement(d.route.Component,null):d.route.element?g=d.route.element:g=f,p.createElement(mE,{match:d,routeContext:{outlet:f,matches:m,isDataRoute:n!=null},children:g})};return n&&(d.route.ErrorBoundary||d.route.errorElement||u===0)?p.createElement(pE,{location:n.location,revalidation:n.revalidation,component:h,error:y,children:v(),routeContext:{outlet:null,matches:m,isDataRoute:!0}}):v()},null)}var Pc=function(e){return e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId",e}(Pc||{});function vE(e){let t=p.useContext(lE);return t||Ge(!1),t}function gE(e){let t=p.useContext(bs);return t||Ge(!1),t}function yE(e){let t=gE(),n=t.matches[t.matches.length-1];return n.route.id||Ge(!1),n.route.id}function xE(){var e;let t=p.useContext(lg),n=vE(Pc.UseRouteError),o=yE(Pc.UseRouteError);return t!==void 0?t:(e=n.errors)==null?void 0:e[o]}function bc(e){Ge(!1)}function wE(e){let{basename:t="/",children:n=null,location:o,navigationType:r=Nn.Pop,navigator:a,static:i=!1,future:s}=e;Vu()&&Ge(!1);let l=t.replace(/^\/*/,"/"),c=p.useMemo(()=>({basename:l,navigator:a,static:i,future:Qi({v7_relativeSplatPath:!1},s)}),[l,s,a,i]);typeof o=="string"&&(o=Es(o));let{pathname:f="/",search:d="",hash:u="",state:y=null,key:S="default"}=o,h=p.useMemo(()=>{let x=ag(f,l);return x==null?null:{location:{pathname:x,search:d,hash:u,state:y,key:S},navigationType:r}},[l,f,d,u,y,S,r]);return h==null?null:p.createElement(sg.Provider,{value:c},p.createElement(Ps.Provider,{children:n,value:h}))}function SE(e){let{children:t,location:n}=e;return cE(kc(t),n)}new Promise(()=>{});function kc(e,t){t===void 0&&(t=[]);let n=[];return p.Children.forEach(e,(o,r)=>{if(!p.isValidElement(o))return;let a=[...t,r];if(o.type===p.Fragment){n.push.apply(n,kc(o.props.children,a));return}o.type!==bc&&Ge(!1),!o.props.index||!o.props.children||Ge(!1);let i={id:o.props.id||a.join("-"),caseSensitive:o.props.caseSensitive,element:o.props.element,Component:o.props.Component,index:o.props.index,path:o.props.path,loader:o.props.loader,action:o.props.action,errorElement:o.props.errorElement,ErrorBoundary:o.props.ErrorBoundary,hasErrorBoundary:o.props.ErrorBoundary!=null||o.props.errorElement!=null,shouldRevalidate:o.props.shouldRevalidate,handle:o.props.handle,lazy:o.props.lazy};o.props.children&&(i.children=kc(o.props.children,a)),n.push(i)}),n}/**
 * React Router DOM v6.27.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */const CE="6";try{window.__reactRouterVersion=CE}catch{}const EE="startTransition",Gf=Rp[EE];function PE(e){let{basename:t,children:n,future:o,window:r}=e,a=p.useRef();a.current==null&&(a.current=$C({window:r,v5Compat:!0}));let i=a.current,[s,l]=p.useState({action:i.action,location:i.location}),{v7_startTransition:c}=o||{},f=p.useCallback(d=>{c&&Gf?Gf(()=>l(d)):l(d)},[l,c]);return p.useLayoutEffect(()=>i.listen(f),[i,f]),p.createElement(wE,{basename:t,children:n,location:s.location,navigationType:s.action,navigator:i,future:o})}var Xf;(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher",e.useViewTransitionState="useViewTransitionState"})(Xf||(Xf={}));var qf;(function(e){e.UseFetcher="useFetcher",e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"})(qf||(qf={}));const Wu=Au("inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",{variants:{variant:{default:"bg-primary text-primary-foreground hover:bg-primary/90",destructive:"bg-destructive text-destructive-foreground hover:bg-destructive/90",outline:"border border-input bg-background hover:bg-accent hover:text-accent-foreground",secondary:"bg-secondary text-secondary-foreground hover:bg-secondary/80",ghost:"hover:bg-accent hover:text-accent-foreground",link:"text-primary underline-offset-4 hover:underline"},size:{default:"h-10 px-4 py-2",sm:"h-9 rounded-md px-3",lg:"h-11 rounded-md px-8",icon:"h-10 w-10"}},defaultVariants:{variant:"default",size:"default"}}),Tn=p.forwardRef(({className:e,variant:t,size:n,asChild:o=!1,...r},a)=>{const i=o?ur:"button";return w.jsx(i,{"data-lov-id":"src/components/ui/button.tsx:46:6","data-lov-name":"Comp","data-component-path":"src/components/ui/button.tsx","data-component-line":"46","data-component-file":"button.tsx","data-component-name":"Comp","data-component-content":"%7B%7D",className:ae(Wu({variant:t,size:n,className:e})),ref:a,...r})});Tn.displayName="Button";var dl="focusScope.autoFocusOnMount",fl="focusScope.autoFocusOnUnmount",Zf={bubbles:!1,cancelable:!0},bE="FocusScope",ug=p.forwardRef((e,t)=>{const{loop:n=!1,trapped:o=!1,onMountAutoFocus:r,onUnmountAutoFocus:a,...i}=e,[s,l]=p.useState(null),c=mt(r),f=mt(a),d=p.useRef(null),u=ge(t,h=>l(h)),y=p.useRef({paused:!1,pause(){this.paused=!0},resume(){this.paused=!1}}).current;p.useEffect(()=>{if(o){let h=function(g){if(y.paused||!s)return;const C=g.target;s.contains(C)?d.current=C:hn(d.current,{select:!0})},x=function(g){if(y.paused||!s)return;const C=g.relatedTarget;C!==null&&(s.contains(C)||hn(d.current,{select:!0}))},m=function(g){if(document.activeElement===document.body)for(const E of g)E.removedNodes.length>0&&hn(s)};document.addEventListener("focusin",h),document.addEventListener("focusout",x);const v=new MutationObserver(m);return s&&v.observe(s,{childList:!0,subtree:!0}),()=>{document.removeEventListener("focusin",h),document.removeEventListener("focusout",x),v.disconnect()}}},[o,s,y.paused]),p.useEffect(()=>{if(s){ep.add(y);const h=document.activeElement;if(!s.contains(h)){const m=new CustomEvent(dl,Zf);s.addEventListener(dl,c),s.dispatchEvent(m),m.defaultPrevented||(kE(RE(dg(s)),{select:!0}),document.activeElement===h&&hn(s))}return()=>{s.removeEventListener(dl,c),setTimeout(()=>{const m=new CustomEvent(fl,Zf);s.addEventListener(fl,f),s.dispatchEvent(m),m.defaultPrevented||hn(h??document.body,{select:!0}),s.removeEventListener(fl,f),ep.remove(y)},0)}}},[s,c,f,y]);const S=p.useCallback(h=>{if(!n&&!o||y.paused)return;const x=h.key==="Tab"&&!h.altKey&&!h.ctrlKey&&!h.metaKey,m=document.activeElement;if(x&&m){const v=h.currentTarget,[g,C]=NE(v);g&&C?!h.shiftKey&&m===C?(h.preventDefault(),n&&hn(g,{select:!0})):h.shiftKey&&m===g&&(h.preventDefault(),n&&hn(C,{select:!0})):m===v&&h.preventDefault()}},[n,o,y.paused]);return w.jsx(re.div,{tabIndex:-1,...i,ref:u,onKeyDown:S})});ug.displayName=bE;function kE(e,{select:t=!1}={}){const n=document.activeElement;for(const o of e)if(hn(o,{select:t}),document.activeElement!==n)return}function NE(e){const t=dg(e),n=Jf(t,e),o=Jf(t.reverse(),e);return[n,o]}function dg(e){const t=[],n=document.createTreeWalker(e,NodeFilter.SHOW_ELEMENT,{acceptNode:o=>{const r=o.tagName==="INPUT"&&o.type==="hidden";return o.disabled||o.hidden||r?NodeFilter.FILTER_SKIP:o.tabIndex>=0?NodeFilter.FILTER_ACCEPT:NodeFilter.FILTER_SKIP}});for(;n.nextNode();)t.push(n.currentNode);return t}function Jf(e,t){for(const n of e)if(!TE(n,{upTo:t}))return n}function TE(e,{upTo:t}){if(getComputedStyle(e).visibility==="hidden")return!0;for(;e;){if(t!==void 0&&e===t)return!1;if(getComputedStyle(e).display==="none")return!0;e=e.parentElement}return!1}function DE(e){return e instanceof HTMLInputElement&&"select"in e}function hn(e,{select:t=!1}={}){if(e&&e.focus){const n=document.activeElement;e.focus({preventScroll:!0}),e!==n&&DE(e)&&t&&e.select()}}var ep=AE();function AE(){let e=[];return{add(t){const n=e[0];t!==n&&(n==null||n.pause()),e=tp(e,t),e.unshift(t)},remove(t){var n;e=tp(e,t),(n=e[0])==null||n.resume()}}}function tp(e,t){const n=[...e],o=n.indexOf(t);return o!==-1&&n.splice(o,1),n}function RE(e){return e.filter(t=>t.tagName!=="A")}var pl=0;function IE(){p.useEffect(()=>{const e=document.querySelectorAll("[data-radix-focus-guard]");return document.body.insertAdjacentElement("afterbegin",e[0]??np()),document.body.insertAdjacentElement("beforeend",e[1]??np()),pl++,()=>{pl===1&&document.querySelectorAll("[data-radix-focus-guard]").forEach(t=>t.remove()),pl--}},[])}function np(){const e=document.createElement("span");return e.setAttribute("data-radix-focus-guard",""),e.tabIndex=0,e.style.outline="none",e.style.opacity="0",e.style.position="fixed",e.style.pointerEvents="none",e}var zt=function(){return zt=Object.assign||function(t){for(var n,o=1,r=arguments.length;o<r;o++){n=arguments[o];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(t[a]=n[a])}return t},zt.apply(this,arguments)};function fg(e,t){var n={};for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.indexOf(o)<0&&(n[o]=e[o]);if(e!=null&&typeof Object.getOwnPropertySymbols=="function")for(var r=0,o=Object.getOwnPropertySymbols(e);r<o.length;r++)t.indexOf(o[r])<0&&Object.prototype.propertyIsEnumerable.call(e,o[r])&&(n[o[r]]=e[o[r]]);return n}function _E(e,t,n){if(n||arguments.length===2)for(var o=0,r=t.length,a;o<r;o++)(a||!(o in t))&&(a||(a=Array.prototype.slice.call(t,0,o)),a[o]=t[o]);return e.concat(a||Array.prototype.slice.call(t))}var fi="right-scroll-bar-position",pi="width-before-scroll-bar",OE="with-scroll-bars-hidden",ME="--removed-body-scroll-bar-size";function ml(e,t){return typeof e=="function"?e(t):e&&(e.current=t),e}function jE(e,t){var n=p.useState(function(){return{value:e,callback:t,facade:{get current(){return n.value},set current(o){var r=n.value;r!==o&&(n.value=o,n.callback(o,r))}}}})[0];return n.callback=t,n.facade}var LE=typeof window<"u"?p.useLayoutEffect:p.useEffect,op=new WeakMap;function FE(e,t){var n=jE(null,function(o){return e.forEach(function(r){return ml(r,o)})});return LE(function(){var o=op.get(n);if(o){var r=new Set(o),a=new Set(e),i=n.current;r.forEach(function(s){a.has(s)||ml(s,null)}),a.forEach(function(s){r.has(s)||ml(s,i)})}op.set(n,e)},[e]),n}function BE(e){return e}function zE(e,t){t===void 0&&(t=BE);var n=[],o=!1,r={read:function(){if(o)throw new Error("Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.");return n.length?n[n.length-1]:e},useMedium:function(a){var i=t(a,o);return n.push(i),function(){n=n.filter(function(s){return s!==i})}},assignSyncMedium:function(a){for(o=!0;n.length;){var i=n;n=[],i.forEach(a)}n={push:function(s){return a(s)},filter:function(){return n}}},assignMedium:function(a){o=!0;var i=[];if(n.length){var s=n;n=[],s.forEach(a),i=n}var l=function(){var f=i;i=[],f.forEach(a)},c=function(){return Promise.resolve().then(l)};c(),n={push:function(f){i.push(f),c()},filter:function(f){return i=i.filter(f),n}}}};return r}function $E(e){e===void 0&&(e={});var t=zE(null);return t.options=zt({async:!0,ssr:!1},e),t}var pg=function(e){var t=e.sideCar,n=fg(e,["sideCar"]);if(!t)throw new Error("Sidecar: please provide `sideCar` property to import the right car");var o=t.read();if(!o)throw new Error("Sidecar medium not found");return p.createElement(o,zt({},n))};pg.isSideCarExport=!0;function UE(e,t){return e.useMedium(t),pg}var mg=$E(),hl=function(){},ks=p.forwardRef(function(e,t){var n=p.useRef(null),o=p.useState({onScrollCapture:hl,onWheelCapture:hl,onTouchMoveCapture:hl}),r=o[0],a=o[1],i=e.forwardProps,s=e.children,l=e.className,c=e.removeScrollBar,f=e.enabled,d=e.shards,u=e.sideCar,y=e.noIsolation,S=e.inert,h=e.allowPinchZoom,x=e.as,m=x===void 0?"div":x,v=e.gapMode,g=fg(e,["forwardProps","children","className","removeScrollBar","enabled","shards","sideCar","noIsolation","inert","allowPinchZoom","as","gapMode"]),C=u,E=FE([n,t]),P=zt(zt({},g),r);return p.createElement(p.Fragment,null,f&&p.createElement(C,{sideCar:mg,removeScrollBar:c,shards:d,noIsolation:y,inert:S,setCallbacks:a,allowPinchZoom:!!h,lockRef:n,gapMode:v}),i?p.cloneElement(p.Children.only(s),zt(zt({},P),{ref:E})):p.createElement(m,zt({},P,{className:l,ref:E}),s))});ks.defaultProps={enabled:!0,removeScrollBar:!0,inert:!1};ks.classNames={fullWidth:pi,zeroRight:fi};var VE=function(){if(typeof __webpack_nonce__<"u")return __webpack_nonce__};function WE(){if(!document)return null;var e=document.createElement("style");e.type="text/css";var t=VE();return t&&e.setAttribute("nonce",t),e}function HE(e,t){e.styleSheet?e.styleSheet.cssText=t:e.appendChild(document.createTextNode(t))}function KE(e){var t=document.head||document.getElementsByTagName("head")[0];t.appendChild(e)}var QE=function(){var e=0,t=null;return{add:function(n){e==0&&(t=WE())&&(HE(t,n),KE(t)),e++},remove:function(){e--,!e&&t&&(t.parentNode&&t.parentNode.removeChild(t),t=null)}}},YE=function(){var e=QE();return function(t,n){p.useEffect(function(){return e.add(t),function(){e.remove()}},[t&&n])}},hg=function(){var e=YE(),t=function(n){var o=n.styles,r=n.dynamic;return e(o,r),null};return t},GE={left:0,top:0,right:0,gap:0},vl=function(e){return parseInt(e||"",10)||0},XE=function(e){var t=window.getComputedStyle(document.body),n=t[e==="padding"?"paddingLeft":"marginLeft"],o=t[e==="padding"?"paddingTop":"marginTop"],r=t[e==="padding"?"paddingRight":"marginRight"];return[vl(n),vl(o),vl(r)]},qE=function(e){if(e===void 0&&(e="margin"),typeof window>"u")return GE;var t=XE(e),n=document.documentElement.clientWidth,o=window.innerWidth;return{left:t[0],top:t[1],right:t[2],gap:Math.max(0,o-n+t[2]-t[0])}},ZE=hg(),Ko="data-scroll-locked",JE=function(e,t,n,o){var r=e.left,a=e.top,i=e.right,s=e.gap;return n===void 0&&(n="margin"),`
  .`.concat(OE,` {
   overflow: hidden `).concat(o,`;
   padding-right: `).concat(s,"px ").concat(o,`;
  }
  body[`).concat(Ko,`] {
    overflow: hidden `).concat(o,`;
    overscroll-behavior: contain;
    `).concat([t&&"position: relative ".concat(o,";"),n==="margin"&&`
    padding-left: `.concat(r,`px;
    padding-top: `).concat(a,`px;
    padding-right: `).concat(i,`px;
    margin-left:0;
    margin-top:0;
    margin-right: `).concat(s,"px ").concat(o,`;
    `),n==="padding"&&"padding-right: ".concat(s,"px ").concat(o,";")].filter(Boolean).join(""),`
  }
  
  .`).concat(fi,` {
    right: `).concat(s,"px ").concat(o,`;
  }
  
  .`).concat(pi,` {
    margin-right: `).concat(s,"px ").concat(o,`;
  }
  
  .`).concat(fi," .").concat(fi,` {
    right: 0 `).concat(o,`;
  }
  
  .`).concat(pi," .").concat(pi,` {
    margin-right: 0 `).concat(o,`;
  }
  
  body[`).concat(Ko,`] {
    `).concat(ME,": ").concat(s,`px;
  }
`)},rp=function(){var e=parseInt(document.body.getAttribute(Ko)||"0",10);return isFinite(e)?e:0},eP=function(){p.useEffect(function(){return document.body.setAttribute(Ko,(rp()+1).toString()),function(){var e=rp()-1;e<=0?document.body.removeAttribute(Ko):document.body.setAttribute(Ko,e.toString())}},[])},tP=function(e){var t=e.noRelative,n=e.noImportant,o=e.gapMode,r=o===void 0?"margin":o;eP();var a=p.useMemo(function(){return qE(r)},[r]);return p.createElement(ZE,{styles:JE(a,!t,r,n?"":"!important")})},Nc=!1;if(typeof window<"u")try{var Qa=Object.defineProperty({},"passive",{get:function(){return Nc=!0,!0}});window.addEventListener("test",Qa,Qa),window.removeEventListener("test",Qa,Qa)}catch{Nc=!1}var So=Nc?{passive:!1}:!1,nP=function(e){return e.tagName==="TEXTAREA"},vg=function(e,t){if(!(e instanceof Element))return!1;var n=window.getComputedStyle(e);return n[t]!=="hidden"&&!(n.overflowY===n.overflowX&&!nP(e)&&n[t]==="visible")},oP=function(e){return vg(e,"overflowY")},rP=function(e){return vg(e,"overflowX")},ap=function(e,t){var n=t.ownerDocument,o=t;do{typeof ShadowRoot<"u"&&o instanceof ShadowRoot&&(o=o.host);var r=gg(e,o);if(r){var a=yg(e,o),i=a[1],s=a[2];if(i>s)return!0}o=o.parentNode}while(o&&o!==n.body);return!1},aP=function(e){var t=e.scrollTop,n=e.scrollHeight,o=e.clientHeight;return[t,n,o]},iP=function(e){var t=e.scrollLeft,n=e.scrollWidth,o=e.clientWidth;return[t,n,o]},gg=function(e,t){return e==="v"?oP(t):rP(t)},yg=function(e,t){return e==="v"?aP(t):iP(t)},sP=function(e,t){return e==="h"&&t==="rtl"?-1:1},lP=function(e,t,n,o,r){var a=sP(e,window.getComputedStyle(t).direction),i=a*o,s=n.target,l=t.contains(s),c=!1,f=i>0,d=0,u=0;do{var y=yg(e,s),S=y[0],h=y[1],x=y[2],m=h-x-a*S;(S||m)&&gg(e,s)&&(d+=m,u+=S),s instanceof ShadowRoot?s=s.host:s=s.parentNode}while(!l&&s!==document.body||l&&(t.contains(s)||t===s));return(f&&(Math.abs(d)<1||!r)||!f&&(Math.abs(u)<1||!r))&&(c=!0),c},Ya=function(e){return"changedTouches"in e?[e.changedTouches[0].clientX,e.changedTouches[0].clientY]:[0,0]},ip=function(e){return[e.deltaX,e.deltaY]},sp=function(e){return e&&"current"in e?e.current:e},cP=function(e,t){return e[0]===t[0]&&e[1]===t[1]},uP=function(e){return`
  .block-interactivity-`.concat(e,` {pointer-events: none;}
  .allow-interactivity-`).concat(e,` {pointer-events: all;}
`)},dP=0,Co=[];function fP(e){var t=p.useRef([]),n=p.useRef([0,0]),o=p.useRef(),r=p.useState(dP++)[0],a=p.useState(hg)[0],i=p.useRef(e);p.useEffect(function(){i.current=e},[e]),p.useEffect(function(){if(e.inert){document.body.classList.add("block-interactivity-".concat(r));var h=_E([e.lockRef.current],(e.shards||[]).map(sp),!0).filter(Boolean);return h.forEach(function(x){return x.classList.add("allow-interactivity-".concat(r))}),function(){document.body.classList.remove("block-interactivity-".concat(r)),h.forEach(function(x){return x.classList.remove("allow-interactivity-".concat(r))})}}},[e.inert,e.lockRef.current,e.shards]);var s=p.useCallback(function(h,x){if("touches"in h&&h.touches.length===2||h.type==="wheel"&&h.ctrlKey)return!i.current.allowPinchZoom;var m=Ya(h),v=n.current,g="deltaX"in h?h.deltaX:v[0]-m[0],C="deltaY"in h?h.deltaY:v[1]-m[1],E,P=h.target,k=Math.abs(g)>Math.abs(C)?"h":"v";if("touches"in h&&k==="h"&&P.type==="range")return!1;var N=ap(k,P);if(!N)return!0;if(N?E=k:(E=k==="v"?"h":"v",N=ap(k,P)),!N)return!1;if(!o.current&&"changedTouches"in h&&(g||C)&&(o.current=E),!E)return!0;var j=o.current||E;return lP(j,x,h,j==="h"?g:C,!0)},[]),l=p.useCallback(function(h){var x=h;if(!(!Co.length||Co[Co.length-1]!==a)){var m="deltaY"in x?ip(x):Ya(x),v=t.current.filter(function(E){return E.name===x.type&&(E.target===x.target||x.target===E.shadowParent)&&cP(E.delta,m)})[0];if(v&&v.should){x.cancelable&&x.preventDefault();return}if(!v){var g=(i.current.shards||[]).map(sp).filter(Boolean).filter(function(E){return E.contains(x.target)}),C=g.length>0?s(x,g[0]):!i.current.noIsolation;C&&x.cancelable&&x.preventDefault()}}},[]),c=p.useCallback(function(h,x,m,v){var g={name:h,delta:x,target:m,should:v,shadowParent:pP(m)};t.current.push(g),setTimeout(function(){t.current=t.current.filter(function(C){return C!==g})},1)},[]),f=p.useCallback(function(h){n.current=Ya(h),o.current=void 0},[]),d=p.useCallback(function(h){c(h.type,ip(h),h.target,s(h,e.lockRef.current))},[]),u=p.useCallback(function(h){c(h.type,Ya(h),h.target,s(h,e.lockRef.current))},[]);p.useEffect(function(){return Co.push(a),e.setCallbacks({onScrollCapture:d,onWheelCapture:d,onTouchMoveCapture:u}),document.addEventListener("wheel",l,So),document.addEventListener("touchmove",l,So),document.addEventListener("touchstart",f,So),function(){Co=Co.filter(function(h){return h!==a}),document.removeEventListener("wheel",l,So),document.removeEventListener("touchmove",l,So),document.removeEventListener("touchstart",f,So)}},[]);var y=e.removeScrollBar,S=e.inert;return p.createElement(p.Fragment,null,S?p.createElement(a,{styles:uP(r)}):null,y?p.createElement(tP,{gapMode:e.gapMode}):null)}function pP(e){for(var t=null;e!==null;)e instanceof ShadowRoot&&(t=e.host,e=e.host),e=e.parentNode;return t}const mP=UE(mg,fP);var xg=p.forwardRef(function(e,t){return p.createElement(ks,zt({},e,{ref:t,sideCar:mP}))});xg.classNames=ks.classNames;var hP=function(e){if(typeof document>"u")return null;var t=Array.isArray(e)?e[0]:e;return t.ownerDocument.body},Eo=new WeakMap,Ga=new WeakMap,Xa={},gl=0,wg=function(e){return e&&(e.host||wg(e.parentNode))},vP=function(e,t){return t.map(function(n){if(e.contains(n))return n;var o=wg(n);return o&&e.contains(o)?o:(console.error("aria-hidden",n,"in not contained inside",e,". Doing nothing"),null)}).filter(function(n){return!!n})},gP=function(e,t,n,o){var r=vP(t,Array.isArray(e)?e:[e]);Xa[n]||(Xa[n]=new WeakMap);var a=Xa[n],i=[],s=new Set,l=new Set(r),c=function(d){!d||s.has(d)||(s.add(d),c(d.parentNode))};r.forEach(c);var f=function(d){!d||l.has(d)||Array.prototype.forEach.call(d.children,function(u){if(s.has(u))f(u);else try{var y=u.getAttribute(o),S=y!==null&&y!=="false",h=(Eo.get(u)||0)+1,x=(a.get(u)||0)+1;Eo.set(u,h),a.set(u,x),i.push(u),h===1&&S&&Ga.set(u,!0),x===1&&u.setAttribute(n,"true"),S||u.setAttribute(o,"true")}catch(m){console.error("aria-hidden: cannot operate on ",u,m)}})};return f(t),s.clear(),gl++,function(){i.forEach(function(d){var u=Eo.get(d)-1,y=a.get(d)-1;Eo.set(d,u),a.set(d,y),u||(Ga.has(d)||d.removeAttribute(o),Ga.delete(d)),y||d.removeAttribute(n)}),gl--,gl||(Eo=new WeakMap,Eo=new WeakMap,Ga=new WeakMap,Xa={})}},yP=function(e,t,n){n===void 0&&(n="data-aria-hidden");var o=Array.from(Array.isArray(e)?e:[e]),r=hP(e);return r?(o.push.apply(o,Array.from(r.querySelectorAll("[aria-live]"))),gP(o,r,n,"aria-hidden")):function(){return null}},Hu="Dialog",[Sg,Cg]=vr(Hu),[xP,Nt]=Sg(Hu),Eg=e=>{const{__scopeDialog:t,children:n,open:o,defaultOpen:r,onOpenChange:a,modal:i=!0}=e,s=p.useRef(null),l=p.useRef(null),[c=!1,f]=fs({prop:o,defaultProp:r,onChange:a});return w.jsx(xP,{scope:t,triggerRef:s,contentRef:l,contentId:sl(),titleId:sl(),descriptionId:sl(),open:c,onOpenChange:f,onOpenToggle:p.useCallback(()=>f(d=>!d),[f]),modal:i,children:n})};Eg.displayName=Hu;var Pg="DialogTrigger",bg=p.forwardRef((e,t)=>{const{__scopeDialog:n,...o}=e,r=Nt(Pg,n),a=ge(t,r.triggerRef);return w.jsx(re.button,{type:"button","aria-haspopup":"dialog","aria-expanded":r.open,"aria-controls":r.contentId,"data-state":Yu(r.open),...o,ref:a,onClick:ee(e.onClick,r.onOpenToggle)})});bg.displayName=Pg;var Ku="DialogPortal",[wP,kg]=Sg(Ku,{forceMount:void 0}),Ng=e=>{const{__scopeDialog:t,forceMount:n,children:o,container:r}=e,a=Nt(Ku,t);return w.jsx(wP,{scope:t,forceMount:n,children:p.Children.map(o,i=>w.jsx(gr,{present:n||a.open,children:w.jsx(ku,{asChild:!0,container:r,children:i})}))})};Ng.displayName=Ku;var Yi="DialogOverlay",Tg=p.forwardRef((e,t)=>{const n=kg(Yi,e.__scopeDialog),{forceMount:o=n.forceMount,...r}=e,a=Nt(Yi,e.__scopeDialog);return a.modal?w.jsx(gr,{present:o||a.open,children:w.jsx(SP,{...r,ref:t})}):null});Tg.displayName=Yi;var SP=p.forwardRef((e,t)=>{const{__scopeDialog:n,...o}=e,r=Nt(Yi,n);return w.jsx(xg,{as:ur,allowPinchZoom:!0,shards:[r.contentRef],children:w.jsx(re.div,{"data-state":Yu(r.open),...o,ref:t,style:{pointerEvents:"auto",...o.style}})})}),fo="DialogContent",Dg=p.forwardRef((e,t)=>{const n=kg(fo,e.__scopeDialog),{forceMount:o=n.forceMount,...r}=e,a=Nt(fo,e.__scopeDialog);return w.jsx(gr,{present:o||a.open,children:a.modal?w.jsx(CP,{...r,ref:t}):w.jsx(EP,{...r,ref:t})})});Dg.displayName=fo;var CP=p.forwardRef((e,t)=>{const n=Nt(fo,e.__scopeDialog),o=p.useRef(null),r=ge(t,n.contentRef,o);return p.useEffect(()=>{const a=o.current;if(a)return yP(a)},[]),w.jsx(Ag,{...e,ref:r,trapFocus:n.open,disableOutsidePointerEvents:!0,onCloseAutoFocus:ee(e.onCloseAutoFocus,a=>{var i;a.preventDefault(),(i=n.triggerRef.current)==null||i.focus()}),onPointerDownOutside:ee(e.onPointerDownOutside,a=>{const i=a.detail.originalEvent,s=i.button===0&&i.ctrlKey===!0;(i.button===2||s)&&a.preventDefault()}),onFocusOutside:ee(e.onFocusOutside,a=>a.preventDefault())})}),EP=p.forwardRef((e,t)=>{const n=Nt(fo,e.__scopeDialog),o=p.useRef(!1),r=p.useRef(!1);return w.jsx(Ag,{...e,ref:t,trapFocus:!1,disableOutsidePointerEvents:!1,onCloseAutoFocus:a=>{var i,s;(i=e.onCloseAutoFocus)==null||i.call(e,a),a.defaultPrevented||(o.current||(s=n.triggerRef.current)==null||s.focus(),a.preventDefault()),o.current=!1,r.current=!1},onInteractOutside:a=>{var l,c;(l=e.onInteractOutside)==null||l.call(e,a),a.defaultPrevented||(o.current=!0,a.detail.originalEvent.type==="pointerdown"&&(r.current=!0));const i=a.target;((c=n.triggerRef.current)==null?void 0:c.contains(i))&&a.preventDefault(),a.detail.originalEvent.type==="focusin"&&r.current&&a.preventDefault()}})}),Ag=p.forwardRef((e,t)=>{const{__scopeDialog:n,trapFocus:o,onOpenAutoFocus:r,onCloseAutoFocus:a,...i}=e,s=Nt(fo,n),l=p.useRef(null),c=ge(t,l);return IE(),w.jsxs(w.Fragment,{children:[w.jsx(ug,{asChild:!0,loop:!0,trapped:o,onMountAutoFocus:r,onUnmountAutoFocus:a,children:w.jsx(ds,{role:"dialog",id:s.contentId,"aria-describedby":s.descriptionId,"aria-labelledby":s.titleId,"data-state":Yu(s.open),...i,ref:c,onDismiss:()=>s.onOpenChange(!1)})}),w.jsxs(w.Fragment,{children:[w.jsx(bP,{titleId:s.titleId}),w.jsx(NP,{contentRef:l,descriptionId:s.descriptionId})]})]})}),Qu="DialogTitle",Rg=p.forwardRef((e,t)=>{const{__scopeDialog:n,...o}=e,r=Nt(Qu,n);return w.jsx(re.h2,{id:r.titleId,...o,ref:t})});Rg.displayName=Qu;var Ig="DialogDescription",_g=p.forwardRef((e,t)=>{const{__scopeDialog:n,...o}=e,r=Nt(Ig,n);return w.jsx(re.p,{id:r.descriptionId,...o,ref:t})});_g.displayName=Ig;var Og="DialogClose",Mg=p.forwardRef((e,t)=>{const{__scopeDialog:n,...o}=e,r=Nt(Og,n);return w.jsx(re.button,{type:"button",...o,ref:t,onClick:ee(e.onClick,()=>r.onOpenChange(!1))})});Mg.displayName=Og;function Yu(e){return e?"open":"closed"}var jg="DialogTitleWarning",[PP,Lg]=R2(jg,{contentName:fo,titleName:Qu,docsSlug:"dialog"}),bP=({titleId:e})=>{const t=Lg(jg),n=`\`${t.contentName}\` requires a \`${t.titleName}\` for the component to be accessible for screen reader users.

If you want to hide the \`${t.titleName}\`, you can wrap it with our VisuallyHidden component.

For more information, see https://radix-ui.com/primitives/docs/components/${t.docsSlug}`;return p.useEffect(()=>{e&&(document.getElementById(e)||console.error(n))},[n,e]),null},kP="DialogDescriptionWarning",NP=({contentRef:e,descriptionId:t})=>{const o=`Warning: Missing \`Description\` or \`aria-describedby={undefined}\` for {${Lg(kP).contentName}}.`;return p.useEffect(()=>{var a;const r=(a=e.current)==null?void 0:a.getAttribute("aria-describedby");t&&r&&(document.getElementById(t)||console.warn(o))},[o,e,t]),null},Fg=Eg,TP=bg,Bg=Ng,Gu=Tg,Xu=Dg,qu=Rg,Zu=_g,Ju=Mg;const DP=Fg,AP=Bg,zg=p.forwardRef(({className:e,...t},n)=>w.jsx(Gu,{"data-lov-id":"src/components/ui/dialog.tsx:19:2","data-lov-name":"DialogPrimitive.Overlay","data-component-path":"src/components/ui/dialog.tsx","data-component-line":"19","data-component-file":"dialog.tsx","data-component-name":"DialogPrimitive.Overlay","data-component-content":"%7B%7D",ref:n,className:ae("fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",e),...t}));zg.displayName=Gu.displayName;const $g=p.forwardRef(({className:e,children:t,...n},o)=>w.jsxs(AP,{"data-lov-id":"src/components/ui/dialog.tsx:34:2","data-lov-name":"DialogPortal","data-component-path":"src/components/ui/dialog.tsx","data-component-line":"34","data-component-file":"dialog.tsx","data-component-name":"DialogPortal","data-component-content":"%7B%7D",children:[w.jsx(zg,{"data-lov-id":"src/components/ui/dialog.tsx:35:4","data-lov-name":"DialogOverlay","data-component-path":"src/components/ui/dialog.tsx","data-component-line":"35","data-component-file":"dialog.tsx","data-component-name":"DialogOverlay","data-component-content":"%7B%7D"}),w.jsxs(Xu,{"data-lov-id":"src/components/ui/dialog.tsx:36:4","data-lov-name":"DialogPrimitive.Content","data-component-path":"src/components/ui/dialog.tsx","data-component-line":"36","data-component-file":"dialog.tsx","data-component-name":"DialogPrimitive.Content","data-component-content":"%7B%7D",ref:o,className:ae("fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",e),...n,children:[t,w.jsxs(Ju,{"data-lov-id":"src/components/ui/dialog.tsx:45:6","data-lov-name":"DialogPrimitive.Close","data-component-path":"src/components/ui/dialog.tsx","data-component-line":"45","data-component-file":"dialog.tsx","data-component-name":"DialogPrimitive.Close","data-component-content":"%7B%22className%22%3A%22absolute%20right-4%20top-4%20rounded-sm%20opacity-70%20ring-offset-background%20transition-opacity%20hover%3Aopacity-100%20focus%3Aoutline-none%20focus%3Aring-2%20focus%3Aring-ring%20focus%3Aring-offset-2%20disabled%3Apointer-events-none%20data-%5Bstate%3Dopen%5D%3Abg-accent%20data-%5Bstate%3Dopen%5D%3Atext-muted-foreground%22%7D",className:"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground",children:[w.jsx(uv,{"data-lov-id":"src/components/ui/dialog.tsx:46:8","data-lov-name":"X","data-component-path":"src/components/ui/dialog.tsx","data-component-line":"46","data-component-file":"dialog.tsx","data-component-name":"X","data-component-content":"%7B%22className%22%3A%22h-4%20w-4%22%7D",className:"h-4 w-4"}),w.jsx("span",{"data-lov-id":"src/components/ui/dialog.tsx:47:8","data-lov-name":"span","data-component-path":"src/components/ui/dialog.tsx","data-component-line":"47","data-component-file":"dialog.tsx","data-component-name":"span","data-component-content":"%7B%22text%22%3A%22Close%22%2C%22className%22%3A%22sr-only%22%7D",className:"sr-only",children:"Close"})]})]})]}));$g.displayName=Xu.displayName;const Ug=({className:e,...t})=>w.jsx("div",{"data-lov-id":"src/components/ui/dialog.tsx:58:2","data-lov-name":"div","data-component-path":"src/components/ui/dialog.tsx","data-component-line":"58","data-component-file":"dialog.tsx","data-component-name":"div","data-component-content":"%7B%7D",className:ae("flex flex-col space-y-1.5 text-center sm:text-left",e),...t});Ug.displayName="DialogHeader";const Vg=p.forwardRef(({className:e,...t},n)=>w.jsx(qu,{"data-lov-id":"src/components/ui/dialog.tsx:86:2","data-lov-name":"DialogPrimitive.Title","data-component-path":"src/components/ui/dialog.tsx","data-component-line":"86","data-component-file":"dialog.tsx","data-component-name":"DialogPrimitive.Title","data-component-content":"%7B%7D",ref:n,className:ae("text-lg font-semibold leading-none tracking-tight",e),...t}));Vg.displayName=qu.displayName;const RP=p.forwardRef(({className:e,...t},n)=>w.jsx(Zu,{"data-lov-id":"src/components/ui/dialog.tsx:101:2","data-lov-name":"DialogPrimitive.Description","data-component-path":"src/components/ui/dialog.tsx","data-component-line":"101","data-component-file":"dialog.tsx","data-component-name":"DialogPrimitive.Description","data-component-content":"%7B%7D",ref:n,className:ae("text-sm text-muted-foreground",e),...t}));RP.displayName=Zu.displayName;const Wg=p.forwardRef(({className:e,type:t,...n},o)=>w.jsx("input",{"data-lov-id":"src/components/ui/input.tsx:8:6","data-lov-name":"input","data-component-path":"src/components/ui/input.tsx","data-component-line":"8","data-component-file":"input.tsx","data-component-name":"input","data-component-content":"%7B%7D",type:t,className:ae("flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",e),ref:o,...n}));Wg.displayName="Input";var IP="Label",Hg=p.forwardRef((e,t)=>w.jsx(re.label,{...e,ref:t,onMouseDown:n=>{var r;n.target.closest("button, input, select, textarea")||((r=e.onMouseDown)==null||r.call(e,n),!n.defaultPrevented&&n.detail>1&&n.preventDefault())}}));Hg.displayName=IP;var Kg=Hg;const _P=Au("text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"),Mt=p.forwardRef(({className:e,...t},n)=>w.jsx(Kg,{"data-lov-id":"src/components/ui/label.tsx:16:2","data-lov-name":"LabelPrimitive.Root","data-component-path":"src/components/ui/label.tsx","data-component-line":"16","data-component-file":"label.tsx","data-component-name":"LabelPrimitive.Root","data-component-content":"%7B%7D",ref:n,className:ae(_P(),e),...t}));Mt.displayName=Kg.displayName;var Qg="AlertDialog",[OP,_b]=vr(Qg,[Cg]),sn=Cg(),Yg=e=>{const{__scopeAlertDialog:t,...n}=e,o=sn(t);return w.jsx(Fg,{...o,...n,modal:!0})};Yg.displayName=Qg;var MP="AlertDialogTrigger",jP=p.forwardRef((e,t)=>{const{__scopeAlertDialog:n,...o}=e,r=sn(n);return w.jsx(TP,{...r,...o,ref:t})});jP.displayName=MP;var LP="AlertDialogPortal",Gg=e=>{const{__scopeAlertDialog:t,...n}=e,o=sn(t);return w.jsx(Bg,{...o,...n})};Gg.displayName=LP;var FP="AlertDialogOverlay",Xg=p.forwardRef((e,t)=>{const{__scopeAlertDialog:n,...o}=e,r=sn(n);return w.jsx(Gu,{...r,...o,ref:t})});Xg.displayName=FP;var Qo="AlertDialogContent",[BP,zP]=OP(Qo),qg=p.forwardRef((e,t)=>{const{__scopeAlertDialog:n,children:o,...r}=e,a=sn(n),i=p.useRef(null),s=ge(t,i),l=p.useRef(null);return w.jsx(PP,{contentName:Qo,titleName:Zg,docsSlug:"alert-dialog",children:w.jsx(BP,{scope:n,cancelRef:l,children:w.jsxs(Xu,{role:"alertdialog",...a,...r,ref:s,onOpenAutoFocus:ee(r.onOpenAutoFocus,c=>{var f;c.preventDefault(),(f=l.current)==null||f.focus({preventScroll:!0})}),onPointerDownOutside:c=>c.preventDefault(),onInteractOutside:c=>c.preventDefault(),children:[w.jsx(bu,{children:o}),w.jsx(UP,{contentRef:i})]})})})});qg.displayName=Qo;var Zg="AlertDialogTitle",Jg=p.forwardRef((e,t)=>{const{__scopeAlertDialog:n,...o}=e,r=sn(n);return w.jsx(qu,{...r,...o,ref:t})});Jg.displayName=Zg;var e0="AlertDialogDescription",t0=p.forwardRef((e,t)=>{const{__scopeAlertDialog:n,...o}=e,r=sn(n);return w.jsx(Zu,{...r,...o,ref:t})});t0.displayName=e0;var $P="AlertDialogAction",n0=p.forwardRef((e,t)=>{const{__scopeAlertDialog:n,...o}=e,r=sn(n);return w.jsx(Ju,{...r,...o,ref:t})});n0.displayName=$P;var o0="AlertDialogCancel",r0=p.forwardRef((e,t)=>{const{__scopeAlertDialog:n,...o}=e,{cancelRef:r}=zP(o0,n),a=sn(n),i=ge(t,r);return w.jsx(Ju,{...a,...o,ref:i})});r0.displayName=o0;var UP=({contentRef:e})=>{const t=`\`${Qo}\` requires a description for the component to be accessible for screen reader users.

You can add a description to the \`${Qo}\` by passing a \`${e0}\` component as a child, which also benefits sighted users by adding visible context to the dialog.

Alternatively, you can use your own component as a description by assigning it an \`id\` and passing the same value to the \`aria-describedby\` prop in \`${Qo}\`. If the description is confusing or duplicative for sighted users, you can use the \`@radix-ui/react-visually-hidden\` primitive as a wrapper around your description component.

For more information, see https://radix-ui.com/primitives/docs/components/alert-dialog`;return p.useEffect(()=>{var o;document.getElementById((o=e.current)==null?void 0:o.getAttribute("aria-describedby"))||console.warn(t)},[t,e]),null},VP=Yg,WP=Gg,a0=Xg,i0=qg,s0=n0,l0=r0,c0=Jg,u0=t0;const HP=VP,KP=WP,d0=p.forwardRef(({className:e,...t},n)=>w.jsx(a0,{"data-lov-id":"src/components/ui/alert-dialog.tsx:17:2","data-lov-name":"AlertDialogPrimitive.Overlay","data-component-path":"src/components/ui/alert-dialog.tsx","data-component-line":"17","data-component-file":"alert-dialog.tsx","data-component-name":"AlertDialogPrimitive.Overlay","data-component-content":"%7B%7D",className:ae("fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",e),...t,ref:n}));d0.displayName=a0.displayName;const f0=p.forwardRef(({className:e,...t},n)=>w.jsxs(KP,{"data-lov-id":"src/components/ui/alert-dialog.tsx:32:2","data-lov-name":"AlertDialogPortal","data-component-path":"src/components/ui/alert-dialog.tsx","data-component-line":"32","data-component-file":"alert-dialog.tsx","data-component-name":"AlertDialogPortal","data-component-content":"%7B%7D",children:[w.jsx(d0,{"data-lov-id":"src/components/ui/alert-dialog.tsx:33:4","data-lov-name":"AlertDialogOverlay","data-component-path":"src/components/ui/alert-dialog.tsx","data-component-line":"33","data-component-file":"alert-dialog.tsx","data-component-name":"AlertDialogOverlay","data-component-content":"%7B%7D"}),w.jsx(i0,{"data-lov-id":"src/components/ui/alert-dialog.tsx:34:4","data-lov-name":"AlertDialogPrimitive.Content","data-component-path":"src/components/ui/alert-dialog.tsx","data-component-line":"34","data-component-file":"alert-dialog.tsx","data-component-name":"AlertDialogPrimitive.Content","data-component-content":"%7B%7D",ref:n,className:ae("fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",e),...t})]}));f0.displayName=i0.displayName;const p0=({className:e,...t})=>w.jsx("div",{"data-lov-id":"src/components/ui/alert-dialog.tsx:50:2","data-lov-name":"div","data-component-path":"src/components/ui/alert-dialog.tsx","data-component-line":"50","data-component-file":"alert-dialog.tsx","data-component-name":"div","data-component-content":"%7B%7D",className:ae("flex flex-col space-y-2 text-center sm:text-left",e),...t});p0.displayName="AlertDialogHeader";const m0=({className:e,...t})=>w.jsx("div",{"data-lov-id":"src/components/ui/alert-dialog.tsx:64:2","data-lov-name":"div","data-component-path":"src/components/ui/alert-dialog.tsx","data-component-line":"64","data-component-file":"alert-dialog.tsx","data-component-name":"div","data-component-content":"%7B%7D",className:ae("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",e),...t});m0.displayName="AlertDialogFooter";const h0=p.forwardRef(({className:e,...t},n)=>w.jsx(c0,{"data-lov-id":"src/components/ui/alert-dialog.tsx:78:2","data-lov-name":"AlertDialogPrimitive.Title","data-component-path":"src/components/ui/alert-dialog.tsx","data-component-line":"78","data-component-file":"alert-dialog.tsx","data-component-name":"AlertDialogPrimitive.Title","data-component-content":"%7B%7D",ref:n,className:ae("text-lg font-semibold",e),...t}));h0.displayName=c0.displayName;const v0=p.forwardRef(({className:e,...t},n)=>w.jsx(u0,{"data-lov-id":"src/components/ui/alert-dialog.tsx:90:2","data-lov-name":"AlertDialogPrimitive.Description","data-component-path":"src/components/ui/alert-dialog.tsx","data-component-line":"90","data-component-file":"alert-dialog.tsx","data-component-name":"AlertDialogPrimitive.Description","data-component-content":"%7B%7D",ref:n,className:ae("text-sm text-muted-foreground",e),...t}));v0.displayName=u0.displayName;const g0=p.forwardRef(({className:e,...t},n)=>w.jsx(s0,{"data-lov-id":"src/components/ui/alert-dialog.tsx:103:2","data-lov-name":"AlertDialogPrimitive.Action","data-component-path":"src/components/ui/alert-dialog.tsx","data-component-line":"103","data-component-file":"alert-dialog.tsx","data-component-name":"AlertDialogPrimitive.Action","data-component-content":"%7B%7D",ref:n,className:ae(Wu(),e),...t}));g0.displayName=s0.displayName;const y0=p.forwardRef(({className:e,...t},n)=>w.jsx(l0,{"data-lov-id":"src/components/ui/alert-dialog.tsx:115:2","data-lov-name":"AlertDialogPrimitive.Cancel","data-component-path":"src/components/ui/alert-dialog.tsx","data-component-line":"115","data-component-file":"alert-dialog.tsx","data-component-name":"AlertDialogPrimitive.Cancel","data-component-content":"%7B%7D",ref:n,className:ae(Wu({variant:"outline"}),"mt-2 sm:mt-0",e),...t}));y0.displayName=l0.displayName;function x0(e,[t,n]){return Math.min(n,Math.max(t,e))}var QP=p.createContext(void 0);function YP(e){const t=p.useContext(QP);return e||t||"ltr"}function w0(e){const t=p.useRef({value:e,previous:e});return p.useMemo(()=>(t.current.value!==e&&(t.current.previous=t.current.value,t.current.value=e),t.current.previous),[e])}var S0=["PageUp","PageDown"],C0=["ArrowUp","ArrowDown","ArrowLeft","ArrowRight"],E0={"from-left":["Home","PageDown","ArrowDown","ArrowLeft"],"from-right":["Home","PageDown","ArrowDown","ArrowRight"],"from-bottom":["Home","PageDown","ArrowDown","ArrowLeft"],"from-top":["Home","PageDown","ArrowUp","ArrowLeft"]},Sr="Slider",[Tc,GP,XP]=Lh(Sr),[P0,Ob]=vr(Sr,[XP]),[qP,Ns]=P0(Sr),b0=p.forwardRef((e,t)=>{const{name:n,min:o=0,max:r=100,step:a=1,orientation:i="horizontal",disabled:s=!1,minStepsBetweenThumbs:l=0,defaultValue:c=[o],value:f,onValueChange:d=()=>{},onValueCommit:u=()=>{},inverted:y=!1,form:S,...h}=e,x=p.useRef(new Set),m=p.useRef(0),g=i==="horizontal"?ZP:JP,[C=[],E]=fs({prop:f,defaultProp:c,onChange:I=>{var F;(F=[...x.current][m.current])==null||F.focus(),d(I)}}),P=p.useRef(C);function k(I){const T=rb(C,I);M(I,T)}function N(I){M(I,m.current)}function j(){const I=P.current[m.current];C[m.current]!==I&&u(C)}function M(I,T,{commit:F}={commit:!1}){const _=lb(a),K=cb(Math.round((I-o)/a)*a+o,_),U=x0(K,[o,r]);E((H=[])=>{const b=nb(H,U,T);if(sb(b,l*a)){m.current=b.indexOf(U);const R=String(b)!==String(H);return R&&F&&u(b),R?b:H}else return H})}return w.jsx(qP,{scope:e.__scopeSlider,name:n,disabled:s,min:o,max:r,valueIndexToChangeRef:m,thumbs:x.current,values:C,orientation:i,form:S,children:w.jsx(Tc.Provider,{scope:e.__scopeSlider,children:w.jsx(Tc.Slot,{scope:e.__scopeSlider,children:w.jsx(g,{"aria-disabled":s,"data-disabled":s?"":void 0,...h,ref:t,onPointerDown:ee(h.onPointerDown,()=>{s||(P.current=C)}),min:o,max:r,inverted:y,onSlideStart:s?void 0:k,onSlideMove:s?void 0:N,onSlideEnd:s?void 0:j,onHomeKeyDown:()=>!s&&M(o,0,{commit:!0}),onEndKeyDown:()=>!s&&M(r,C.length-1,{commit:!0}),onStepKeyDown:({event:I,direction:T})=>{if(!s){const K=S0.includes(I.key)||I.shiftKey&&C0.includes(I.key)?10:1,U=m.current,H=C[U],b=a*K*T;M(H+b,U,{commit:!0})}}})})})})});b0.displayName=Sr;var[k0,N0]=P0(Sr,{startEdge:"left",endEdge:"right",size:"width",direction:1}),ZP=p.forwardRef((e,t)=>{const{min:n,max:o,dir:r,inverted:a,onSlideStart:i,onSlideMove:s,onSlideEnd:l,onStepKeyDown:c,...f}=e,[d,u]=p.useState(null),y=ge(t,g=>u(g)),S=p.useRef(),h=YP(r),x=h==="ltr",m=x&&!a||!x&&a;function v(g){const C=S.current||d.getBoundingClientRect(),E=[0,C.width],k=ed(E,m?[n,o]:[o,n]);return S.current=C,k(g-C.left)}return w.jsx(k0,{scope:e.__scopeSlider,startEdge:m?"left":"right",endEdge:m?"right":"left",direction:m?1:-1,size:"width",children:w.jsx(T0,{dir:h,"data-orientation":"horizontal",...f,ref:y,style:{...f.style,"--radix-slider-thumb-transform":"translateX(-50%)"},onSlideStart:g=>{const C=v(g.clientX);i==null||i(C)},onSlideMove:g=>{const C=v(g.clientX);s==null||s(C)},onSlideEnd:()=>{S.current=void 0,l==null||l()},onStepKeyDown:g=>{const E=E0[m?"from-left":"from-right"].includes(g.key);c==null||c({event:g,direction:E?-1:1})}})})}),JP=p.forwardRef((e,t)=>{const{min:n,max:o,inverted:r,onSlideStart:a,onSlideMove:i,onSlideEnd:s,onStepKeyDown:l,...c}=e,f=p.useRef(null),d=ge(t,f),u=p.useRef(),y=!r;function S(h){const x=u.current||f.current.getBoundingClientRect(),m=[0,x.height],g=ed(m,y?[o,n]:[n,o]);return u.current=x,g(h-x.top)}return w.jsx(k0,{scope:e.__scopeSlider,startEdge:y?"bottom":"top",endEdge:y?"top":"bottom",size:"height",direction:y?1:-1,children:w.jsx(T0,{"data-orientation":"vertical",...c,ref:d,style:{...c.style,"--radix-slider-thumb-transform":"translateY(50%)"},onSlideStart:h=>{const x=S(h.clientY);a==null||a(x)},onSlideMove:h=>{const x=S(h.clientY);i==null||i(x)},onSlideEnd:()=>{u.current=void 0,s==null||s()},onStepKeyDown:h=>{const m=E0[y?"from-bottom":"from-top"].includes(h.key);l==null||l({event:h,direction:m?-1:1})}})})}),T0=p.forwardRef((e,t)=>{const{__scopeSlider:n,onSlideStart:o,onSlideMove:r,onSlideEnd:a,onHomeKeyDown:i,onEndKeyDown:s,onStepKeyDown:l,...c}=e,f=Ns(Sr,n);return w.jsx(re.span,{...c,ref:t,onKeyDown:ee(e.onKeyDown,d=>{d.key==="Home"?(i(d),d.preventDefault()):d.key==="End"?(s(d),d.preventDefault()):S0.concat(C0).includes(d.key)&&(l(d),d.preventDefault())}),onPointerDown:ee(e.onPointerDown,d=>{const u=d.target;u.setPointerCapture(d.pointerId),d.preventDefault(),f.thumbs.has(u)?u.focus():o(d)}),onPointerMove:ee(e.onPointerMove,d=>{d.target.hasPointerCapture(d.pointerId)&&r(d)}),onPointerUp:ee(e.onPointerUp,d=>{const u=d.target;u.hasPointerCapture(d.pointerId)&&(u.releasePointerCapture(d.pointerId),a(d))})})}),D0="SliderTrack",A0=p.forwardRef((e,t)=>{const{__scopeSlider:n,...o}=e,r=Ns(D0,n);return w.jsx(re.span,{"data-disabled":r.disabled?"":void 0,"data-orientation":r.orientation,...o,ref:t})});A0.displayName=D0;var Dc="SliderRange",R0=p.forwardRef((e,t)=>{const{__scopeSlider:n,...o}=e,r=Ns(Dc,n),a=N0(Dc,n),i=p.useRef(null),s=ge(t,i),l=r.values.length,c=r.values.map(u=>_0(u,r.min,r.max)),f=l>1?Math.min(...c):0,d=100-Math.max(...c);return w.jsx(re.span,{"data-orientation":r.orientation,"data-disabled":r.disabled?"":void 0,...o,ref:s,style:{...e.style,[a.startEdge]:f+"%",[a.endEdge]:d+"%"}})});R0.displayName=Dc;var Ac="SliderThumb",I0=p.forwardRef((e,t)=>{const n=GP(e.__scopeSlider),[o,r]=p.useState(null),a=ge(t,s=>r(s)),i=p.useMemo(()=>o?n().findIndex(s=>s.ref.current===o):-1,[n,o]);return w.jsx(eb,{...e,ref:a,index:i})}),eb=p.forwardRef((e,t)=>{const{__scopeSlider:n,index:o,name:r,...a}=e,i=Ns(Ac,n),s=N0(Ac,n),[l,c]=p.useState(null),f=ge(t,v=>c(v)),d=l?i.form||!!l.closest("form"):!0,u=Fu(l),y=i.values[o],S=y===void 0?0:_0(y,i.min,i.max),h=ob(o,i.values.length),x=u==null?void 0:u[s.size],m=x?ab(x,S,s.direction):0;return p.useEffect(()=>{if(l)return i.thumbs.add(l),()=>{i.thumbs.delete(l)}},[l,i.thumbs]),w.jsxs("span",{style:{transform:"var(--radix-slider-thumb-transform)",position:"absolute",[s.startEdge]:`calc(${S}% + ${m}px)`},children:[w.jsx(Tc.ItemSlot,{scope:e.__scopeSlider,children:w.jsx(re.span,{role:"slider","aria-label":e["aria-label"]||h,"aria-valuemin":i.min,"aria-valuenow":y,"aria-valuemax":i.max,"aria-orientation":i.orientation,"data-orientation":i.orientation,"data-disabled":i.disabled?"":void 0,tabIndex:i.disabled?void 0:0,...a,ref:f,style:y===void 0?{display:"none"}:e.style,onFocus:ee(e.onFocus,()=>{i.valueIndexToChangeRef.current=o})})}),d&&w.jsx(tb,{name:r??(i.name?i.name+(i.values.length>1?"[]":""):void 0),form:i.form,value:y},o)]})});I0.displayName=Ac;var tb=e=>{const{value:t,...n}=e,o=p.useRef(null),r=w0(t);return p.useEffect(()=>{const a=o.current,i=window.HTMLInputElement.prototype,l=Object.getOwnPropertyDescriptor(i,"value").set;if(r!==t&&l){const c=new Event("input",{bubbles:!0});l.call(a,t),a.dispatchEvent(c)}},[r,t]),w.jsx("input",{style:{display:"none"},...n,ref:o,defaultValue:t})};function nb(e=[],t,n){const o=[...e];return o[n]=t,o.sort((r,a)=>r-a)}function _0(e,t,n){const a=100/(n-t)*(e-t);return x0(a,[0,100])}function ob(e,t){return t>2?`Value ${e+1} of ${t}`:t===2?["Minimum","Maximum"][e]:void 0}function rb(e,t){if(e.length===1)return 0;const n=e.map(r=>Math.abs(r-t)),o=Math.min(...n);return n.indexOf(o)}function ab(e,t,n){const o=e/2,a=ed([0,50],[0,o]);return(o-a(t)*n)*n}function ib(e){return e.slice(0,-1).map((t,n)=>e[n+1]-t)}function sb(e,t){if(t>0){const n=ib(e);return Math.min(...n)>=t}return!0}function ed(e,t){return n=>{if(e[0]===e[1]||t[0]===t[1])return t[0];const o=(t[1]-t[0])/(e[1]-e[0]);return t[0]+o*(n-e[0])}}function lb(e){return(String(e).split(".")[1]||"").length}function cb(e,t){const n=Math.pow(10,t);return Math.round(e*n)/n}var O0=b0,ub=A0,db=R0,fb=I0;const mi=p.forwardRef(({className:e,...t},n)=>w.jsxs(O0,{"data-lov-id":"src/components/ui/slider.tsx:10:2","data-lov-name":"SliderPrimitive.Root","data-component-path":"src/components/ui/slider.tsx","data-component-line":"10","data-component-file":"slider.tsx","data-component-name":"SliderPrimitive.Root","data-component-content":"%7B%7D",ref:n,className:ae("relative flex w-full touch-none select-none items-center",e),...t,children:[w.jsx(ub,{"data-lov-id":"src/components/ui/slider.tsx:18:4","data-lov-name":"SliderPrimitive.Track","data-component-path":"src/components/ui/slider.tsx","data-component-line":"18","data-component-file":"slider.tsx","data-component-name":"SliderPrimitive.Track","data-component-content":"%7B%22className%22%3A%22relative%20h-2%20w-full%20grow%20overflow-hidden%20rounded-full%20bg-secondary%22%7D",className:"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary",children:w.jsx(db,{"data-lov-id":"src/components/ui/slider.tsx:19:6","data-lov-name":"SliderPrimitive.Range","data-component-path":"src/components/ui/slider.tsx","data-component-line":"19","data-component-file":"slider.tsx","data-component-name":"SliderPrimitive.Range","data-component-content":"%7B%22className%22%3A%22absolute%20h-full%20bg-primary%22%7D",className:"absolute h-full bg-primary"})}),w.jsx(fb,{"data-lov-id":"src/components/ui/slider.tsx:21:4","data-lov-name":"SliderPrimitive.Thumb","data-component-path":"src/components/ui/slider.tsx","data-component-line":"21","data-component-file":"slider.tsx","data-component-name":"SliderPrimitive.Thumb","data-component-content":"%7B%22className%22%3A%22block%20h-5%20w-5%20rounded-full%20border-2%20border-primary%20bg-background%20ring-offset-background%20transition-colors%20focus-visible%3Aoutline-none%20focus-visible%3Aring-2%20focus-visible%3Aring-ring%20focus-visible%3Aring-offset-2%20disabled%3Apointer-events-none%20disabled%3Aopacity-50%22%7D",className:"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50"})]}));mi.displayName=O0.displayName;var td="Switch",[pb,Mb]=vr(td),[mb,hb]=pb(td),M0=p.forwardRef((e,t)=>{const{__scopeSwitch:n,name:o,checked:r,defaultChecked:a,required:i,disabled:s,value:l="on",onCheckedChange:c,form:f,...d}=e,[u,y]=p.useState(null),S=ge(t,g=>y(g)),h=p.useRef(!1),x=u?f||!!u.closest("form"):!0,[m=!1,v]=fs({prop:r,defaultProp:a,onChange:c});return w.jsxs(mb,{scope:n,checked:m,disabled:s,children:[w.jsx(re.button,{type:"button",role:"switch","aria-checked":m,"aria-required":i,"data-state":F0(m),"data-disabled":s?"":void 0,disabled:s,value:l,...d,ref:S,onClick:ee(e.onClick,g=>{v(C=>!C),x&&(h.current=g.isPropagationStopped(),h.current||g.stopPropagation())})}),x&&w.jsx(vb,{control:u,bubbles:!h.current,name:o,value:l,checked:m,required:i,disabled:s,form:f,style:{transform:"translateX(-100%)"}})]})});M0.displayName=td;var j0="SwitchThumb",L0=p.forwardRef((e,t)=>{const{__scopeSwitch:n,...o}=e,r=hb(j0,n);return w.jsx(re.span,{"data-state":F0(r.checked),"data-disabled":r.disabled?"":void 0,...o,ref:t})});L0.displayName=j0;var vb=e=>{const{control:t,checked:n,bubbles:o=!0,...r}=e,a=p.useRef(null),i=w0(n),s=Fu(t);return p.useEffect(()=>{const l=a.current,c=window.HTMLInputElement.prototype,d=Object.getOwnPropertyDescriptor(c,"checked").set;if(i!==n&&d){const u=new Event("click",{bubbles:o});d.call(l,n),l.dispatchEvent(u)}},[i,n,o]),w.jsx("input",{type:"checkbox","aria-hidden":!0,defaultChecked:n,...r,tabIndex:-1,ref:a,style:{...e.style,...s,position:"absolute",pointerEvents:"none",opacity:0,margin:0}})};function F0(e){return e?"checked":"unchecked"}var B0=M0,gb=L0;const hi=p.forwardRef(({className:e,...t},n)=>w.jsx(B0,{"data-lov-id":"src/components/ui/switch.tsx:10:2","data-lov-name":"SwitchPrimitives.Root","data-component-path":"src/components/ui/switch.tsx","data-component-line":"10","data-component-file":"switch.tsx","data-component-name":"SwitchPrimitives.Root","data-component-content":"%7B%7D",className:ae("peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",e),...t,ref:n,children:w.jsx(gb,{"data-lov-id":"src/components/ui/switch.tsx:18:4","data-lov-name":"SwitchPrimitives.Thumb","data-component-path":"src/components/ui/switch.tsx","data-component-line":"18","data-component-file":"switch.tsx","data-component-name":"SwitchPrimitives.Thumb","data-component-content":"%7B%7D",className:ae("pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0")})}));hi.displayName=B0.displayName;var yb="Separator",lp="horizontal",xb=["horizontal","vertical"],z0=p.forwardRef((e,t)=>{const{decorative:n,orientation:o=lp,...r}=e,a=wb(o)?o:lp,s=n?{role:"none"}:{"aria-orientation":a==="vertical"?a:void 0,role:"separator"};return w.jsx(re.div,{"data-orientation":a,...s,...r,ref:t})});z0.displayName=yb;function wb(e){return xb.includes(e)}var $0=z0;const vi=p.forwardRef(({className:e,orientation:t="horizontal",decorative:n=!0,...o},r)=>w.jsx($0,{"data-lov-id":"src/components/ui/separator.tsx:14:4","data-lov-name":"SeparatorPrimitive.Root","data-component-path":"src/components/ui/separator.tsx","data-component-line":"14","data-component-file":"separator.tsx","data-component-name":"SeparatorPrimitive.Root","data-component-content":"%7B%7D",ref:r,decorative:n,orientation:t,className:ae("shrink-0 bg-border",t==="horizontal"?"h-[1px] w-full":"h-full w-[1px]",e),...o}));vi.displayName=$0.displayName;const cp="type-b-panel-position";function Sb({isVisible:e,onClose:t,gearButtonRef:n,fontSize:o,onFontSizeChange:r,isDarkMode:a,onThemeToggle:i,showWordCount:s,onWordCountToggle:l,showCountDisplay:c,onCountDisplayToggle:f,leftMargin:d,rightMargin:u,onLeftMarginChange:y,onRightMarginChange:S,onNew:h,onOpen:x,onSaveAs:m}){const[v,g]=p.useState({x:100,y:100}),[C,E]=p.useState(!1),P=p.useRef(null),k=p.useRef({x:0,y:0}),N=p.useRef({x:100,y:100});p.useEffect(()=>{const I=sessionStorage.getItem(cp);if(I){const T=JSON.parse(I);g(T),N.current=T}},[]);const j=p.useCallback(I=>{sessionStorage.setItem(cp,JSON.stringify(I))},[]),M=p.useCallback(I=>{if(P.current){const T=P.current.getBoundingClientRect();k.current={x:I.clientX-T.left,y:I.clientY-T.top},E(!0),I.preventDefault()}},[]);return p.useEffect(()=>{const I=F=>{if(C&&P.current){const _={x:F.clientX-k.current.x,y:F.clientY-k.current.y};P.current.style.left=`${_.x}px`,P.current.style.top=`${_.y}px`,N.current=_}},T=()=>{if(C){const F=N.current;g(F),j(F),E(!1)}};return C&&(document.addEventListener("mousemove",I),document.addEventListener("mouseup",T),document.body.style.userSelect="none"),()=>{document.removeEventListener("mousemove",I),document.removeEventListener("mouseup",T),document.body.style.userSelect=""}},[C,j]),p.useEffect(()=>{const I=T=>{const F=T.target;P.current&&P.current.contains(F)||n.current&&n.current.contains(F)||t()};return e&&document.addEventListener("mousedown",I),()=>{document.removeEventListener("mousedown",I)}},[e,t,n]),e?w.jsxs("div",{"data-lov-id":"src/components/ControlPanel.tsx:158:4","data-lov-name":"div","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"158","data-component-file":"ControlPanel.tsx","data-component-name":"div","data-component-content":"%7B%7D",ref:P,className:`fixed z-50 border rounded-lg shadow-lg p-4 w-72 transition-all duration-200 ${a?"bg-editor-bg border-editor-text/20 text-editor-text":"bg-editor-bg-light border-editor-text-light/20 text-editor-text-light"} ${C?"transition-none":""}`,style:{left:`${v.x}px`,top:`${v.y}px`,cursor:C?"grabbing":"grab"},onMouseDown:M,children:[w.jsxs("div",{"data-lov-id":"src/components/ControlPanel.tsx:173:6","data-lov-name":"div","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"173","data-component-file":"ControlPanel.tsx","data-component-name":"div","data-component-content":"%7B%22className%22%3A%22flex%20items-center%20justify-between%20mb-4%22%7D",className:"flex items-center justify-between mb-4",children:[w.jsx("h3",{"data-lov-id":"src/components/ControlPanel.tsx:174:8","data-lov-name":"h3","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"174","data-component-file":"ControlPanel.tsx","data-component-name":"h3","data-component-content":"%7B%22text%22%3A%22Settings%22%7D",className:`text-sm font-medium ${a?"text-editor-text":"text-editor-text-light"}`,children:"Settings"}),w.jsx(Tn,{"data-lov-id":"src/components/ControlPanel.tsx:177:8","data-lov-name":"Button","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"177","data-component-file":"ControlPanel.tsx","data-component-name":"Button","data-component-content":"%7B%22text%22%3A%22%C3%97%22%7D",variant:"ghost",size:"sm",onClick:t,className:`h-6 w-6 p-0 transition-colors duration-200 ${a?"text-editor-text/60 hover:text-editor-text hover:bg-editor-text/10":"text-editor-text-light/60 hover:text-editor-text-light hover:bg-editor-text-light/10"}`,children:"×"})]}),w.jsxs("div",{"data-lov-id":"src/components/ControlPanel.tsx:192:6","data-lov-name":"div","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"192","data-component-file":"ControlPanel.tsx","data-component-name":"div","data-component-content":"%7B%22className%22%3A%22space-y-3%20mb-4%22%7D",className:"space-y-3 mb-4",children:[w.jsxs(Mt,{"data-lov-id":"src/components/ControlPanel.tsx:193:8","data-lov-name":"Label","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"193","data-component-file":"ControlPanel.tsx","data-component-name":"Label","data-component-content":"%7B%22text%22%3A%22Font%20Size%3A%20px%22%7D",className:`text-sm ${a?"text-editor-text/80":"text-editor-text-light/80"}`,children:["Font Size: ",o,"px"]}),w.jsx(mi,{"data-lov-id":"src/components/ControlPanel.tsx:196:8","data-lov-name":"Slider","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"196","data-component-file":"ControlPanel.tsx","data-component-name":"Slider","data-component-content":"%7B%22className%22%3A%22w-full%22%7D",value:[o],onValueChange:I=>r(I[0]),min:12,max:24,step:1,className:"w-full"})]}),w.jsx(vi,{"data-lov-id":"src/components/ControlPanel.tsx:206:6","data-lov-name":"Separator","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"206","data-component-file":"ControlPanel.tsx","data-component-name":"Separator","data-component-content":"%7B%7D",className:a?"bg-editor-text/20":"bg-editor-text-light/20"}),w.jsxs("div",{"data-lov-id":"src/components/ControlPanel.tsx:209:6","data-lov-name":"div","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"209","data-component-file":"ControlPanel.tsx","data-component-name":"div","data-component-content":"%7B%22className%22%3A%22space-y-4%20my-4%22%7D",className:"space-y-4 my-4",children:[w.jsx(Mt,{"data-lov-id":"src/components/ControlPanel.tsx:210:8","data-lov-name":"Label","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"210","data-component-file":"ControlPanel.tsx","data-component-name":"Label","data-component-content":"%7B%22text%22%3A%22Margins%22%7D",className:`text-sm ${a?"text-editor-text/80":"text-editor-text-light/80"}`,children:"Margins"}),w.jsxs("div",{"data-lov-id":"src/components/ControlPanel.tsx:215:8","data-lov-name":"div","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"215","data-component-file":"ControlPanel.tsx","data-component-name":"div","data-component-content":"%7B%22className%22%3A%22space-y-2%22%7D",className:"space-y-2",children:[w.jsxs("div",{"data-lov-id":"src/components/ControlPanel.tsx:216:10","data-lov-name":"div","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"216","data-component-file":"ControlPanel.tsx","data-component-name":"div","data-component-content":"%7B%22className%22%3A%22flex%20items-center%20gap-2%22%7D",className:"flex items-center gap-2",children:[w.jsx(g1,{"data-lov-id":"src/components/ControlPanel.tsx:217:12","data-lov-name":"AlignLeft","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"217","data-component-file":"ControlPanel.tsx","data-component-name":"AlignLeft","data-component-content":"%7B%22className%22%3A%22w-3%20h-3%22%7D",className:"w-3 h-3"}),w.jsxs(Mt,{"data-lov-id":"src/components/ControlPanel.tsx:218:12","data-lov-name":"Label","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"218","data-component-file":"ControlPanel.tsx","data-component-name":"Label","data-component-content":"%7B%22text%22%3A%22Left%3A%20px%22%7D",className:`text-xs ${a?"text-editor-text/70":"text-editor-text-light/70"}`,children:["Left: ",d,"px"]})]}),w.jsx(mi,{"data-lov-id":"src/components/ControlPanel.tsx:222:10","data-lov-name":"Slider","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"222","data-component-file":"ControlPanel.tsx","data-component-name":"Slider","data-component-content":"%7B%22className%22%3A%22w-full%22%7D",value:[d],onValueChange:I=>y(I[0]),min:0,max:200,step:4,className:"w-full"})]}),w.jsxs("div",{"data-lov-id":"src/components/ControlPanel.tsx:233:8","data-lov-name":"div","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"233","data-component-file":"ControlPanel.tsx","data-component-name":"div","data-component-content":"%7B%22className%22%3A%22space-y-2%22%7D",className:"space-y-2",children:[w.jsxs("div",{"data-lov-id":"src/components/ControlPanel.tsx:234:10","data-lov-name":"div","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"234","data-component-file":"ControlPanel.tsx","data-component-name":"div","data-component-content":"%7B%22className%22%3A%22flex%20items-center%20gap-2%22%7D",className:"flex items-center gap-2",children:[w.jsx(y1,{"data-lov-id":"src/components/ControlPanel.tsx:235:12","data-lov-name":"AlignRight","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"235","data-component-file":"ControlPanel.tsx","data-component-name":"AlignRight","data-component-content":"%7B%22className%22%3A%22w-3%20h-3%22%7D",className:"w-3 h-3"}),w.jsxs(Mt,{"data-lov-id":"src/components/ControlPanel.tsx:236:12","data-lov-name":"Label","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"236","data-component-file":"ControlPanel.tsx","data-component-name":"Label","data-component-content":"%7B%22text%22%3A%22Right%3A%20px%22%7D",className:`text-xs ${a?"text-editor-text/70":"text-editor-text-light/70"}`,children:["Right: ",u,"px"]})]}),w.jsx(mi,{"data-lov-id":"src/components/ControlPanel.tsx:240:10","data-lov-name":"Slider","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"240","data-component-file":"ControlPanel.tsx","data-component-name":"Slider","data-component-content":"%7B%22className%22%3A%22w-full%22%7D",value:[u],onValueChange:I=>S(I[0]),min:0,max:200,step:4,className:"w-full"})]})]}),w.jsx(vi,{"data-lov-id":"src/components/ControlPanel.tsx:251:6","data-lov-name":"Separator","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"251","data-component-file":"ControlPanel.tsx","data-component-name":"Separator","data-component-content":"%7B%7D",className:a?"bg-editor-text/20":"bg-editor-text-light/20"}),w.jsxs("div",{"data-lov-id":"src/components/ControlPanel.tsx:254:6","data-lov-name":"div","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"254","data-component-file":"ControlPanel.tsx","data-component-name":"div","data-component-content":"%7B%22className%22%3A%22flex%20items-center%20justify-between%20my-4%22%7D",className:"flex items-center justify-between my-4",children:[w.jsxs("div",{"data-lov-id":"src/components/ControlPanel.tsx:255:8","data-lov-name":"div","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"255","data-component-file":"ControlPanel.tsx","data-component-name":"div","data-component-content":"%7B%22className%22%3A%22flex%20items-center%20gap-2%22%7D",className:"flex items-center gap-2",children:[a?w.jsx(P1,{"data-lov-id":"src/components/ControlPanel.tsx:256:24","data-lov-name":"Moon","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"256","data-component-file":"ControlPanel.tsx","data-component-name":"Moon","data-component-content":"%7B%22className%22%3A%22w-4%20h-4%22%7D",className:"w-4 h-4"}):w.jsx(N1,{"data-lov-id":"src/components/ControlPanel.tsx:256:55","data-lov-name":"Sun","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"256","data-component-file":"ControlPanel.tsx","data-component-name":"Sun","data-component-content":"%7B%22className%22%3A%22w-4%20h-4%22%7D",className:"w-4 h-4"}),w.jsxs(Mt,{"data-lov-id":"src/components/ControlPanel.tsx:257:10","data-lov-name":"Label","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"257","data-component-file":"ControlPanel.tsx","data-component-name":"Label","data-component-content":"%7B%22text%22%3A%22Mode%22%7D",className:`text-sm ${a?"text-editor-text/80":"text-editor-text-light/80"}`,children:[a?"Dark":"Light"," Mode"]})]}),w.jsx(hi,{"data-lov-id":"src/components/ControlPanel.tsx:263:8","data-lov-name":"Switch","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"263","data-component-file":"ControlPanel.tsx","data-component-name":"Switch","data-component-content":"%7B%7D",checked:a,onCheckedChange:i})]}),w.jsxs("div",{"data-lov-id":"src/components/ControlPanel.tsx:267:6","data-lov-name":"div","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"267","data-component-file":"ControlPanel.tsx","data-component-name":"div","data-component-content":"%7B%22className%22%3A%22flex%20items-center%20justify-between%20mb-4%22%7D",className:"flex items-center justify-between mb-4",children:[w.jsxs("div",{"data-lov-id":"src/components/ControlPanel.tsx:268:8","data-lov-name":"div","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"268","data-component-file":"ControlPanel.tsx","data-component-name":"div","data-component-content":"%7B%22className%22%3A%22flex%20items-center%20gap-2%22%7D",className:"flex items-center gap-2",children:[c?w.jsx(S1,{"data-lov-id":"src/components/ControlPanel.tsx:269:30","data-lov-name":"Eye","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"269","data-component-file":"ControlPanel.tsx","data-component-name":"Eye","data-component-content":"%7B%22className%22%3A%22w-4%20h-4%22%7D",className:"w-4 h-4"}):w.jsx(w1,{"data-lov-id":"src/components/ControlPanel.tsx:269:60","data-lov-name":"EyeOff","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"269","data-component-file":"ControlPanel.tsx","data-component-name":"EyeOff","data-component-content":"%7B%22className%22%3A%22w-4%20h-4%22%7D",className:"w-4 h-4"}),w.jsx(Mt,{"data-lov-id":"src/components/ControlPanel.tsx:270:10","data-lov-name":"Label","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"270","data-component-file":"ControlPanel.tsx","data-component-name":"Label","data-component-content":"%7B%22text%22%3A%22Show%20Count%22%7D",className:`text-sm ${a?"text-editor-text/80":"text-editor-text-light/80"}`,children:"Show Count"})]}),w.jsx(hi,{"data-lov-id":"src/components/ControlPanel.tsx:276:8","data-lov-name":"Switch","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"276","data-component-file":"ControlPanel.tsx","data-component-name":"Switch","data-component-content":"%7B%7D",checked:c,onCheckedChange:f})]}),c&&w.jsxs("div",{"data-lov-id":"src/components/ControlPanel.tsx:281:8","data-lov-name":"div","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"281","data-component-file":"ControlPanel.tsx","data-component-name":"div","data-component-content":"%7B%22className%22%3A%22flex%20items-center%20justify-between%20mb-4%22%7D",className:"flex items-center justify-between mb-4",children:[w.jsxs("div",{"data-lov-id":"src/components/ControlPanel.tsx:282:10","data-lov-name":"div","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"282","data-component-file":"ControlPanel.tsx","data-component-name":"div","data-component-content":"%7B%22className%22%3A%22flex%20items-center%20gap-2%22%7D",className:"flex items-center gap-2",children:[s?w.jsx(D1,{"data-lov-id":"src/components/ControlPanel.tsx:283:29","data-lov-name":"Type","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"283","data-component-file":"ControlPanel.tsx","data-component-name":"Type","data-component-content":"%7B%22className%22%3A%22w-4%20h-4%22%7D",className:"w-4 h-4"}):w.jsx(E1,{"data-lov-id":"src/components/ControlPanel.tsx:283:60","data-lov-name":"Hash","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"283","data-component-file":"ControlPanel.tsx","data-component-name":"Hash","data-component-content":"%7B%22className%22%3A%22w-4%20h-4%22%7D",className:"w-4 h-4"}),w.jsxs(Mt,{"data-lov-id":"src/components/ControlPanel.tsx:284:12","data-lov-name":"Label","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"284","data-component-file":"ControlPanel.tsx","data-component-name":"Label","data-component-content":"%7B%22text%22%3A%22Count%22%7D",className:`text-sm ${a?"text-editor-text/80":"text-editor-text-light/80"}`,children:[s?"Word":"Character"," Count"]})]}),w.jsx(hi,{"data-lov-id":"src/components/ControlPanel.tsx:290:10","data-lov-name":"Switch","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"290","data-component-file":"ControlPanel.tsx","data-component-name":"Switch","data-component-content":"%7B%7D",checked:s,onCheckedChange:l})]}),w.jsx(vi,{"data-lov-id":"src/components/ControlPanel.tsx:294:6","data-lov-name":"Separator","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"294","data-component-file":"ControlPanel.tsx","data-component-name":"Separator","data-component-content":"%7B%7D",className:a?"bg-editor-text/20":"bg-editor-text-light/20"}),w.jsxs("div",{"data-lov-id":"src/components/ControlPanel.tsx:297:6","data-lov-name":"div","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"297","data-component-file":"ControlPanel.tsx","data-component-name":"div","data-component-content":"%7B%22className%22%3A%22space-y-2%20mt-4%22%7D",className:"space-y-2 mt-4",children:[w.jsx(Mt,{"data-lov-id":"src/components/ControlPanel.tsx:298:8","data-lov-name":"Label","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"298","data-component-file":"ControlPanel.tsx","data-component-name":"Label","data-component-content":"%7B%22text%22%3A%22File%20Operations%22%7D",className:`text-sm ${a?"text-editor-text/80":"text-editor-text-light/80"}`,children:"File Operations"}),w.jsxs("div",{"data-lov-id":"src/components/ControlPanel.tsx:301:8","data-lov-name":"div","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"301","data-component-file":"ControlPanel.tsx","data-component-name":"div","data-component-content":"%7B%22className%22%3A%22grid%20grid-cols-3%20gap-2%22%7D",className:"grid grid-cols-3 gap-2",children:[w.jsxs(Tn,{"data-lov-id":"src/components/ControlPanel.tsx:302:10","data-lov-name":"Button","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"302","data-component-file":"ControlPanel.tsx","data-component-name":"Button","data-component-content":"%7B%22text%22%3A%22New%22%7D",variant:"outline",size:"sm",onClick:h,className:`flex items-center gap-1 text-xs transition-colors duration-200 ${a?"border-editor-text/20 text-editor-text hover:bg-editor-text/10 hover:border-editor-text/40":"border-editor-text-light/20 text-editor-text-light hover:bg-editor-text-light/10 hover:border-editor-text-light/40"}`,children:[w.jsx(b1,{"data-lov-id":"src/components/ControlPanel.tsx:312:12","data-lov-name":"Plus","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"312","data-component-file":"ControlPanel.tsx","data-component-name":"Plus","data-component-content":"%7B%22className%22%3A%22w-3%20h-3%22%7D",className:"w-3 h-3"}),"New"]}),w.jsxs(Tn,{"data-lov-id":"src/components/ControlPanel.tsx:315:10","data-lov-name":"Button","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"315","data-component-file":"ControlPanel.tsx","data-component-name":"Button","data-component-content":"%7B%22text%22%3A%22Open%22%7D",variant:"outline",size:"sm",onClick:x,className:`flex items-center gap-1 text-xs transition-colors duration-200 ${a?"border-editor-text/20 text-editor-text hover:bg-editor-text/10 hover:border-editor-text/40":"border-editor-text-light/20 text-editor-text-light hover:bg-editor-text-light/10 hover:border-editor-text-light/40"}`,children:[w.jsx(A1,{"data-lov-id":"src/components/ControlPanel.tsx:325:12","data-lov-name":"Upload","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"325","data-component-file":"ControlPanel.tsx","data-component-name":"Upload","data-component-content":"%7B%22className%22%3A%22w-3%20h-3%22%7D",className:"w-3 h-3"}),"Open"]}),w.jsxs(Tn,{"data-lov-id":"src/components/ControlPanel.tsx:328:10","data-lov-name":"Button","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"328","data-component-file":"ControlPanel.tsx","data-component-name":"Button","data-component-content":"%7B%22text%22%3A%22Save%22%7D",variant:"outline",size:"sm",onClick:m,className:`flex items-center gap-1 text-xs transition-colors duration-200 ${a?"border-editor-text/20 text-editor-text hover:bg-editor-text/10 hover:border-editor-text/40":"border-editor-text-light/20 text-editor-text-light hover:bg-editor-text-light/10 hover:border-editor-text-light/40"}`,children:[w.jsx(x1,{"data-lov-id":"src/components/ControlPanel.tsx:338:12","data-lov-name":"Download","data-component-path":"src/components/ControlPanel.tsx","data-component-line":"338","data-component-file":"ControlPanel.tsx","data-component-name":"Download","data-component-content":"%7B%22className%22%3A%22w-3%20h-3%22%7D",className:"w-3 h-3"}),"Save"]})]})]})]}):null}const up=5*1024*1024,Po="type-b-editor-content",dp="type-b-editor-settings",Cb=3e3;function Eb(){const[e,t]=p.useState(""),[n,o]=p.useState(""),[r,a]=p.useState(!0),[i,s]=p.useState(0),[l,c]=p.useState(!0),[f,d]=p.useState(!1),[u,y]=p.useState(!0),[S,h]=p.useState(!1),[x,m]=p.useState(!1),[v,g]=p.useState("document.txt"),[C,E]=p.useState(!1),[P,k]=p.useState(null),[N,j]=p.useState(!1),[M,I]=p.useState(!0),[T,F]=p.useState({fontSize:16,isDarkMode:!0,showWordCount:!0,showCountDisplay:!0,currentFilename:"document.txt",leftMargin:72,rightMargin:72}),_=p.useRef(null),K=p.useRef(null),U=p.useRef(null),H=p.useRef(null),b="Welcome to type-B... to start just type anything";p.useEffect(()=>{const B=sessionStorage.getItem(Po),W=sessionStorage.getItem(dp);if(B&&(t(B),a(!1),c(!0)),W){const De=JSON.parse(W);F({fontSize:16,isDarkMode:!0,showWordCount:!0,showCountDisplay:!0,currentFilename:"document.txt",leftMargin:72,rightMargin:72,...De})}const oe=setTimeout(()=>I(!1),5e3);return()=>clearTimeout(oe)},[]),p.useEffect(()=>{_.current&&_.current.focus()},[]),p.useEffect(()=>{sessionStorage.setItem(dp,JSON.stringify(T))},[T]);const R=p.useCallback(()=>{if(!u||e.length===0)return;if(new Blob([e]).size>up){y(!1),console.warn("File size exceeds 5MB limit. Auto-save disabled.");return}d(!0);try{sessionStorage.setItem(Po,e),c(!0),setTimeout(()=>d(!1),500)}catch(W){console.error("Failed to auto-save:",W),d(!1)}},[e,u]);p.useEffect(()=>(H.current&&clearTimeout(H.current),!l&&e.length>0&&(H.current=setTimeout(R,Cb)),()=>{H.current&&clearTimeout(H.current)}),[e,l,R]),p.useEffect(()=>{const B=()=>{sessionStorage.removeItem(Po)};return window.addEventListener("beforeunload",B),()=>window.removeEventListener("beforeunload",B)},[]),p.useEffect(()=>{if(!r)return;let B=0;const W=setInterval(()=>{B<b.length?(o(b.slice(0,B+1)),B++):clearInterval(W)},80);return()=>clearInterval(W)},[r]);const $=B=>{r&&(a(!1),o("")),t(B.target.value),s(B.target.selectionStart),c(!1)},L=()=>{_.current&&s(_.current.selectionStart)},V=B=>{if(B.key==="Tab"){B.preventDefault();const W=B.currentTarget,oe=W.selectionStart,De=W.selectionEnd,vo=e.substring(0,oe)+"  "+e.substring(De);t(vo),setTimeout(()=>{W.selectionStart=W.selectionEnd=oe+2,s(oe+2)},0)}},X=()=>{!l&&e.length>0?(k(()=>()=>{t(""),a(!0),o(""),c(!0),F(B=>({...B,currentFilename:"document.txt"})),sessionStorage.removeItem(Po)}),m(!0)):(t(""),a(!0),o(""),c(!0),F(B=>({...B,currentFilename:"document.txt"})),sessionStorage.removeItem(Po))},le=()=>{var B;(B=K.current)==null||B.click()},je=B=>{var oe;const W=(oe=B.target.files)==null?void 0:oe[0];W&&J(W)},J=B=>{if(B.size>up){alert("File size exceeds 5MB limit.");return}const W=new FileReader;W.onload=oe=>{var vo;const De=(vo=oe.target)==null?void 0:vo.result;t(De),a(!1),c(!0),F(go=>({...go,currentFilename:B.name})),sessionStorage.setItem(Po,De)},W.onerror=()=>{console.error("Failed to read file")},W.readAsText(B)},Xe=()=>{g(T.currentFilename),h(!0)},Tt=()=>{const B=new Blob([e],{type:"text/plain"}),W=URL.createObjectURL(B),oe=document.createElement("a");oe.href=W,oe.download=v,document.body.appendChild(oe),oe.click(),document.body.removeChild(oe),URL.revokeObjectURL(W),h(!1),c(!0),F(De=>({...De,currentFilename:v}))},Dt=B=>{B.preventDefault(),E(!0)},At=B=>{B.preventDefault(),E(!1)},ho=B=>{B.preventDefault(),E(!1);const oe=Array.from(B.dataTransfer.files).find(De=>De.type==="text/plain"||De.name.endsWith(".txt")||De.name.endsWith(".md"));oe&&J(oe)},ln=()=>T.showWordCount?e.trim().split(/\s+/).filter(B=>B.length>0).length:e.length,Ht=()=>{if(!_.current)return{line:0,column:0};const W=e.substring(0,i).split(`
`),oe=W.length-1,De=W[W.length-1].length;return{line:oe,column:De}},{line:cn,column:Qn}=Ht(),ht=T.isDarkMode?"#2d3748":"#cbd5e1",Cr=T.isDarkMode?"#4a5568":"#94a3b8";return w.jsxs("div",{"data-lov-id":"src/pages/Index.tsx:334:4","data-lov-name":"div","data-component-path":"src/pages/Index.tsx","data-component-line":"334","data-component-file":"Index.tsx","data-component-name":"div","data-component-content":"%7B%7D",className:`h-screen overflow-hidden relative ${T.isDarkMode?"bg-editor-bg text-editor-text":"bg-editor-bg-light text-editor-text-light light-mode"}`,children:[w.jsx(Tn,{"data-lov-id":"src/pages/Index.tsx:340:6","data-lov-name":"Button","data-component-path":"src/pages/Index.tsx","data-component-line":"340","data-component-file":"Index.tsx","data-component-name":"Button","data-component-content":"%7B%7D",ref:U,variant:"ghost",size:"sm",onClick:()=>{j(!N),I(!1)},className:`absolute top-4 right-4 z-40 w-8 h-8 p-0 transition-all duration-200 ${M?"gear-pulse":""}`,style:{backgroundColor:ht,color:"white"},onMouseEnter:B=>{B.currentTarget.style.backgroundColor=Cr},onMouseLeave:B=>{B.currentTarget.style.backgroundColor=ht},children:w.jsx(k1,{"data-lov-id":"src/pages/Index.tsx:362:8","data-lov-name":"Settings","data-component-path":"src/pages/Index.tsx","data-component-line":"362","data-component-file":"Index.tsx","data-component-name":"Settings","data-component-content":"%7B%22className%22%3A%22w-4%20h-4%22%7D",className:"w-4 h-4"})}),w.jsx(Sb,{"data-lov-id":"src/pages/Index.tsx:366:6","data-lov-name":"ControlPanel","data-component-path":"src/pages/Index.tsx","data-component-line":"366","data-component-file":"Index.tsx","data-component-name":"ControlPanel","data-component-content":"%7B%7D",isVisible:N,onClose:()=>j(!1),gearButtonRef:U,fontSize:T.fontSize,onFontSizeChange:B=>F(W=>({...W,fontSize:B})),isDarkMode:T.isDarkMode,onThemeToggle:()=>F(B=>({...B,isDarkMode:!B.isDarkMode})),showWordCount:T.showWordCount,onWordCountToggle:()=>F(B=>({...B,showWordCount:!B.showWordCount})),showCountDisplay:T.showCountDisplay,onCountDisplayToggle:()=>F(B=>({...B,showCountDisplay:!B.showCountDisplay})),leftMargin:T.leftMargin,rightMargin:T.rightMargin,onLeftMarginChange:B=>F(W=>({...W,leftMargin:B})),onRightMarginChange:B=>F(W=>({...W,rightMargin:B})),onNew:X,onOpen:le,onSaveAs:Xe}),f&&w.jsxs("div",{"data-lov-id":"src/pages/Index.tsx:389:8","data-lov-name":"div","data-component-path":"src/pages/Index.tsx","data-component-line":"389","data-component-file":"Index.tsx","data-component-name":"div","data-component-content":"%7B%22text%22%3A%22Saving...%22%7D",className:`absolute top-4 left-4 text-sm flex items-center gap-2 z-30 ${T.isDarkMode?"text-editor-text/60":"text-editor-text-light/60"}`,children:[w.jsx("div",{"data-lov-id":"src/pages/Index.tsx:392:10","data-lov-name":"div","data-component-path":"src/pages/Index.tsx","data-component-line":"392","data-component-file":"Index.tsx","data-component-name":"div","data-component-content":"%7B%7D",className:`w-2 h-2 rounded-full animate-pulse ${T.isDarkMode?"bg-editor-text/60":"bg-editor-text-light/60"}`}),"Saving..."]}),!u&&w.jsxs("div",{"data-lov-id":"src/pages/Index.tsx:401:8","data-lov-name":"div","data-component-path":"src/pages/Index.tsx","data-component-line":"401","data-component-file":"Index.tsx","data-component-name":"div","data-component-content":"%7B%22text%22%3A%22File%20too%20large%20-%20auto-save%20disabled%22%2C%22className%22%3A%22absolute%20top-4%20left-1%2F2%20transform%20-translate-x-1%2F2%20text-yellow-400%20text-sm%20flex%20items-center%20gap-2%20bg-yellow-400%2F10%20px-3%20py-1%20rounded%20z-30%22%7D",className:"absolute top-4 left-1/2 transform -translate-x-1/2 text-yellow-400 text-sm flex items-center gap-2 bg-yellow-400/10 px-3 py-1 rounded z-30",children:[w.jsx(T1,{"data-lov-id":"src/pages/Index.tsx:402:10","data-lov-name":"AlertTriangle","data-component-path":"src/pages/Index.tsx","data-component-line":"402","data-component-file":"Index.tsx","data-component-name":"AlertTriangle","data-component-content":"%7B%22className%22%3A%22w-4%20h-4%22%7D",className:"w-4 h-4"}),"File too large - auto-save disabled"]}),w.jsx("div",{"data-lov-id":"src/pages/Index.tsx:408:6","data-lov-name":"div","data-component-path":"src/pages/Index.tsx","data-component-line":"408","data-component-file":"Index.tsx","data-component-name":"div","data-component-content":"%7B%22className%22%3A%22fixed%20bottom-4%20right-4%20z-30%20text-right%20text-xs%20font-mono%20transition-all%20duration-200%20ease-in-out%20opacity-30%20hover%3Aopacity-80%20pointer-events-none%20select-none%20max-w-48%22%7D",className:"fixed bottom-4 right-4 z-30 text-right text-xs font-mono transition-all duration-200 ease-in-out opacity-30 hover:opacity-80 pointer-events-none select-none max-w-48",children:w.jsxs("div",{"data-lov-id":"src/pages/Index.tsx:409:8","data-lov-name":"div","data-component-path":"src/pages/Index.tsx","data-component-line":"409","data-component-file":"Index.tsx","data-component-name":"div","data-component-content":"%7B%22className%22%3A%22text-%5B%234a5568%5D%20hover%3Atext-%5B%2364748b%5D%20transition-colors%20duration-200%20break-words%20hyphens-auto%22%7D",className:"text-[#4a5568] hover:text-[#64748b] transition-colors duration-200 break-words hyphens-auto",children:[w.jsx("div",{"data-lov-id":"src/pages/Index.tsx:410:10","data-lov-name":"div","data-component-path":"src/pages/Index.tsx","data-component-line":"410","data-component-file":"Index.tsx","data-component-name":"div","data-component-content":"%7B%22text%22%3A%22type-B%20v1.0%22%2C%22className%22%3A%22whitespace-nowrap%22%7D",className:"whitespace-nowrap",children:"type-B v1.0"}),w.jsx("div",{"data-lov-id":"src/pages/Index.tsx:411:10","data-lov-name":"div","data-component-path":"src/pages/Index.tsx","data-component-line":"411","data-component-file":"Index.tsx","data-component-name":"div","data-component-content":"%7B%22text%22%3A%22by%20Spencer%20Francisco%20%C3%97%20Von.dev%22%2C%22className%22%3A%22break-words%22%7D",className:"break-words",children:"by Spencer Francisco × Von.dev"}),w.jsx("div",{"data-lov-id":"src/pages/Index.tsx:412:10","data-lov-name":"div","data-component-path":"src/pages/Index.tsx","data-component-line":"412","data-component-file":"Index.tsx","data-component-name":"div","data-component-content":"%7B%22text%22%3A%22Forged%20in%20dark%20mode%20%F0%9F%8C%8C%20%2F%2F%205.27.2025%22%2C%22className%22%3A%22break-words%22%7D",className:"break-words",children:"Forged in dark mode 🌌 // 5.27.2025"})]})}),w.jsxs("div",{"data-lov-id":"src/pages/Index.tsx:417:6","data-lov-name":"div","data-component-path":"src/pages/Index.tsx","data-component-line":"417","data-component-file":"Index.tsx","data-component-name":"div","data-component-content":"%7B%7D",className:`h-full overflow-y-auto custom-scrollbar transition-all duration-200 ${C?T.isDarkMode?"bg-editor-text/5 border-2 border-dashed border-editor-text/30":"bg-editor-text-light/5 border-2 border-dashed border-editor-text-light/30":""}`,style:{paddingLeft:`${Math.max(32,T.leftMargin)}px`,paddingRight:`${Math.max(32,T.rightMargin+200)}px`,paddingTop:"32px",paddingBottom:"32px"},onDragOver:Dt,onDragLeave:At,onDrop:ho,children:[w.jsxs("div",{"data-lov-id":"src/pages/Index.tsx:432:8","data-lov-name":"div","data-component-path":"src/pages/Index.tsx","data-component-line":"432","data-component-file":"Index.tsx","data-component-name":"div","data-component-content":"%7B%22className%22%3A%22relative%20w-full%20min-h-full%22%7D",className:"relative w-full min-h-full",children:[w.jsx("textarea",{"data-lov-id":"src/pages/Index.tsx:433:10","data-lov-name":"textarea","data-component-path":"src/pages/Index.tsx","data-component-line":"433","data-component-file":"Index.tsx","data-component-name":"textarea","data-component-content":"%7B%22className%22%3A%22w-full%20bg-transparent%20resize-none%20border-none%20outline-none%20editor-textarea%20leading-relaxed%20overflow-hidden%22%7D",ref:_,value:e,onChange:$,onSelect:L,onKeyUp:L,onKeyDown:V,onClick:L,className:"w-full bg-transparent resize-none border-none outline-none editor-textarea leading-relaxed overflow-hidden",style:{fontSize:`${T.fontSize}px`,minHeight:"calc(100vh - 64px)",height:"auto"},placeholder:"",spellCheck:!1,autoComplete:"off",autoCorrect:"off",autoCapitalize:"off"}),r&&e.length===0&&w.jsxs("div",{"data-lov-id":"src/pages/Index.tsx:456:12","data-lov-name":"div","data-component-path":"src/pages/Index.tsx","data-component-line":"456","data-component-file":"Index.tsx","data-component-name":"div","data-component-content":"%7B%22className%22%3A%22absolute%20top-0%20left-0%20flex%20items-center%20pointer-events-none%22%7D",className:"absolute top-0 left-0 flex items-center pointer-events-none",children:[w.jsx("span",{"data-lov-id":"src/pages/Index.tsx:457:14","data-lov-name":"span","data-component-path":"src/pages/Index.tsx","data-component-line":"457","data-component-file":"Index.tsx","data-component-name":"span","data-component-content":"%7B%22className%22%3A%22text-base%22%7D",className:"text-base",children:n}),w.jsx("div",{"data-lov-id":"src/pages/Index.tsx:458:14","data-lov-name":"div","data-component-path":"src/pages/Index.tsx","data-component-line":"458","data-component-file":"Index.tsx","data-component-name":"div","data-component-content":"%7B%7D",className:`w-2 h-6 ml-0.5 terminal-blink ${T.isDarkMode?"bg-editor-text":"bg-editor-text-light"}`})]}),!r&&w.jsx("div",{"data-lov-id":"src/pages/Index.tsx:466:12","data-lov-name":"div","data-component-path":"src/pages/Index.tsx","data-component-line":"466","data-component-file":"Index.tsx","data-component-name":"div","data-component-content":"%7B%22className%22%3A%22absolute%20pointer-events-none%22%7D",className:"absolute pointer-events-none",style:{top:`${cn*(T.fontSize*1.5)}px`,left:`${Qn*(T.fontSize*.6)}px`},children:w.jsx("div",{"data-lov-id":"src/pages/Index.tsx:473:14","data-lov-name":"div","data-component-path":"src/pages/Index.tsx","data-component-line":"473","data-component-file":"Index.tsx","data-component-name":"div","data-component-content":"%7B%7D",className:`w-2 h-6 terminal-blink ${T.isDarkMode?"bg-editor-text":"bg-editor-text-light"}`})}),T.showCountDisplay&&e.length>0&&w.jsxs("div",{"data-lov-id":"src/pages/Index.tsx:481:12","data-lov-name":"div","data-component-path":"src/pages/Index.tsx","data-component-line":"481","data-component-file":"Index.tsx","data-component-name":"div","data-component-content":"%7B%22className%22%3A%22absolute%20ghost-count%20pointer-events-none%22%7D",className:"absolute ghost-count pointer-events-none",style:{top:`${cn*(T.fontSize*1.5)}px`,left:`${Qn*(T.fontSize*.6)+8}px`,fontSize:`${Math.max(12,T.fontSize-2)}px`,marginLeft:"8px"},children:[ln()," ",T.showWordCount?"words":"chars"]})]}),C&&w.jsx("div",{"data-lov-id":"src/pages/Index.tsx:497:10","data-lov-name":"div","data-component-path":"src/pages/Index.tsx","data-component-line":"497","data-component-file":"Index.tsx","data-component-name":"div","data-component-content":"%7B%22className%22%3A%22absolute%20inset-0%20flex%20items-center%20justify-center%20pointer-events-none%20z-20%22%7D",className:"absolute inset-0 flex items-center justify-center pointer-events-none z-20",children:w.jsxs("div",{"data-lov-id":"src/pages/Index.tsx:498:12","data-lov-name":"div","data-component-path":"src/pages/Index.tsx","data-component-line":"498","data-component-file":"Index.tsx","data-component-name":"div","data-component-content":"%7B%22text%22%3A%22Drop%20your%20file%20here%22%7D",className:`text-xl flex items-center gap-3 ${T.isDarkMode?"text-editor-text/60":"text-editor-text-light/60"}`,children:[w.jsx(C1,{"data-lov-id":"src/pages/Index.tsx:501:14","data-lov-name":"FileText","data-component-path":"src/pages/Index.tsx","data-component-line":"501","data-component-file":"Index.tsx","data-component-name":"FileText","data-component-content":"%7B%22className%22%3A%22w-8%20h-8%22%7D",className:"w-8 h-8"}),"Drop your file here"]})})]}),w.jsx("input",{"data-lov-id":"src/pages/Index.tsx:509:6","data-lov-name":"input","data-component-path":"src/pages/Index.tsx","data-component-line":"509","data-component-file":"Index.tsx","data-component-name":"input","data-component-content":"%7B%22className%22%3A%22hidden%22%7D",ref:K,type:"file",accept:".txt,.md",onChange:je,className:"hidden"}),w.jsx(DP,{"data-lov-id":"src/pages/Index.tsx:518:6","data-lov-name":"Dialog","data-component-path":"src/pages/Index.tsx","data-component-line":"518","data-component-file":"Index.tsx","data-component-name":"Dialog","data-component-content":"%7B%7D",open:S,onOpenChange:h,children:w.jsxs($g,{"data-lov-id":"src/pages/Index.tsx:519:8","data-lov-name":"DialogContent","data-component-path":"src/pages/Index.tsx","data-component-line":"519","data-component-file":"Index.tsx","data-component-name":"DialogContent","data-component-content":"%7B%7D",className:T.isDarkMode?"bg-editor-bg border-editor-text/20":"bg-white border-gray-200",children:[w.jsx(Ug,{"data-lov-id":"src/pages/Index.tsx:520:10","data-lov-name":"DialogHeader","data-component-path":"src/pages/Index.tsx","data-component-line":"520","data-component-file":"Index.tsx","data-component-name":"DialogHeader","data-component-content":"%7B%7D",children:w.jsx(Vg,{"data-lov-id":"src/pages/Index.tsx:521:12","data-lov-name":"DialogTitle","data-component-path":"src/pages/Index.tsx","data-component-line":"521","data-component-file":"Index.tsx","data-component-name":"DialogTitle","data-component-content":"%7B%22text%22%3A%22Save%20As%22%7D",className:T.isDarkMode?"text-editor-text":"text-gray-900",children:"Save As"})}),w.jsxs("div",{"data-lov-id":"src/pages/Index.tsx:523:10","data-lov-name":"div","data-component-path":"src/pages/Index.tsx","data-component-line":"523","data-component-file":"Index.tsx","data-component-name":"div","data-component-content":"%7B%22className%22%3A%22space-y-4%22%7D",className:"space-y-4",children:[w.jsxs("div",{"data-lov-id":"src/pages/Index.tsx:524:12","data-lov-name":"div","data-component-path":"src/pages/Index.tsx","data-component-line":"524","data-component-file":"Index.tsx","data-component-name":"div","data-component-content":"%7B%7D",children:[w.jsx(Mt,{"data-lov-id":"src/pages/Index.tsx:525:14","data-lov-name":"Label","data-component-path":"src/pages/Index.tsx","data-component-line":"525","data-component-file":"Index.tsx","data-component-name":"Label","data-component-content":"%7B%22text%22%3A%22Filename%22%7D",htmlFor:"filename",className:T.isDarkMode?"text-editor-text":"text-gray-700",children:"Filename"}),w.jsx(Wg,{"data-lov-id":"src/pages/Index.tsx:526:14","data-lov-name":"Input","data-component-path":"src/pages/Index.tsx","data-component-line":"526","data-component-file":"Index.tsx","data-component-name":"Input","data-component-content":"%7B%22placeholder%22%3A%22document.txt%22%7D",id:"filename",value:v,onChange:B=>g(B.target.value),className:T.isDarkMode?"bg-editor-bg border-editor-text/20 text-editor-text":"bg-white border-gray-200 text-gray-900",placeholder:"document.txt"})]}),w.jsxs("div",{"data-lov-id":"src/pages/Index.tsx:534:12","data-lov-name":"div","data-component-path":"src/pages/Index.tsx","data-component-line":"534","data-component-file":"Index.tsx","data-component-name":"div","data-component-content":"%7B%22className%22%3A%22flex%20justify-end%20gap-2%22%7D",className:"flex justify-end gap-2",children:[w.jsx(Tn,{"data-lov-id":"src/pages/Index.tsx:535:14","data-lov-name":"Button","data-component-path":"src/pages/Index.tsx","data-component-line":"535","data-component-file":"Index.tsx","data-component-name":"Button","data-component-content":"%7B%22text%22%3A%22Cancel%22%7D",variant:"ghost",onClick:()=>h(!1),className:T.isDarkMode?"text-editor-text hover:bg-editor-text/10":"text-gray-700 hover:bg-gray-100",children:"Cancel"}),w.jsx(Tn,{"data-lov-id":"src/pages/Index.tsx:542:14","data-lov-name":"Button","data-component-path":"src/pages/Index.tsx","data-component-line":"542","data-component-file":"Index.tsx","data-component-name":"Button","data-component-content":"%7B%22text%22%3A%22Save%22%7D",onClick:Tt,className:T.isDarkMode?"bg-editor-text text-editor-bg hover:bg-editor-text/90":"bg-gray-900 text-white hover:bg-gray-800",children:"Save"})]})]})]})}),w.jsx(HP,{"data-lov-id":"src/pages/Index.tsx:554:6","data-lov-name":"AlertDialog","data-component-path":"src/pages/Index.tsx","data-component-line":"554","data-component-file":"Index.tsx","data-component-name":"AlertDialog","data-component-content":"%7B%7D",open:x,onOpenChange:m,children:w.jsxs(f0,{"data-lov-id":"src/pages/Index.tsx:555:8","data-lov-name":"AlertDialogContent","data-component-path":"src/pages/Index.tsx","data-component-line":"555","data-component-file":"Index.tsx","data-component-name":"AlertDialogContent","data-component-content":"%7B%7D",className:T.isDarkMode?"bg-editor-bg border-editor-text/20":"bg-white border-gray-200",children:[w.jsxs(p0,{"data-lov-id":"src/pages/Index.tsx:556:10","data-lov-name":"AlertDialogHeader","data-component-path":"src/pages/Index.tsx","data-component-line":"556","data-component-file":"Index.tsx","data-component-name":"AlertDialogHeader","data-component-content":"%7B%7D",children:[w.jsx(h0,{"data-lov-id":"src/pages/Index.tsx:557:12","data-lov-name":"AlertDialogTitle","data-component-path":"src/pages/Index.tsx","data-component-line":"557","data-component-file":"Index.tsx","data-component-name":"AlertDialogTitle","data-component-content":"%7B%22text%22%3A%22Unsaved%20Changes%22%7D",className:T.isDarkMode?"text-editor-text":"text-gray-900",children:"Unsaved Changes"}),w.jsx(v0,{"data-lov-id":"src/pages/Index.tsx:558:12","data-lov-name":"AlertDialogDescription","data-component-path":"src/pages/Index.tsx","data-component-line":"558","data-component-file":"Index.tsx","data-component-name":"AlertDialogDescription","data-component-content":"%7B%22text%22%3A%22You%20have%20unsaved%20changes.%20Do%20you%20want%20to%20save%20before%20continuing%3F%22%7D",className:T.isDarkMode?"text-editor-text/70":"text-gray-600",children:"You have unsaved changes. Do you want to save before continuing?"})]}),w.jsxs(m0,{"data-lov-id":"src/pages/Index.tsx:562:10","data-lov-name":"AlertDialogFooter","data-component-path":"src/pages/Index.tsx","data-component-line":"562","data-component-file":"Index.tsx","data-component-name":"AlertDialogFooter","data-component-content":"%7B%7D",children:[w.jsx(y0,{"data-lov-id":"src/pages/Index.tsx:563:12","data-lov-name":"AlertDialogCancel","data-component-path":"src/pages/Index.tsx","data-component-line":"563","data-component-file":"Index.tsx","data-component-name":"AlertDialogCancel","data-component-content":"%7B%22text%22%3A%22Don't%20Save%22%7D",className:T.isDarkMode?"text-editor-text hover:bg-editor-text/10":"text-gray-700 hover:bg-gray-100",onClick:()=>{P&&(P(),k(null))},children:"Don't Save"}),w.jsx(g0,{"data-lov-id":"src/pages/Index.tsx:574:12","data-lov-name":"AlertDialogAction","data-component-path":"src/pages/Index.tsx","data-component-line":"574","data-component-file":"Index.tsx","data-component-name":"AlertDialogAction","data-component-content":"%7B%22text%22%3A%22Save%22%7D",className:T.isDarkMode?"bg-editor-text text-editor-bg hover:bg-editor-text/90":"bg-gray-900 text-white hover:bg-gray-800",onClick:()=>{R(),P&&setTimeout(()=>{P(),k(null)},100)},children:"Save"})]})]})})]})}const Pb=()=>{const e=cg();return p.useEffect(()=>{console.error("404 Error: User attempted to access non-existent route:",e.pathname)},[e.pathname]),w.jsx("div",{"data-lov-id":"src/pages/NotFound.tsx:15:4","data-lov-name":"div","data-component-path":"src/pages/NotFound.tsx","data-component-line":"15","data-component-file":"NotFound.tsx","data-component-name":"div","data-component-content":"%7B%22className%22%3A%22min-h-screen%20flex%20items-center%20justify-center%20bg-gray-100%22%7D",className:"min-h-screen flex items-center justify-center bg-gray-100",children:w.jsxs("div",{"data-lov-id":"src/pages/NotFound.tsx:16:6","data-lov-name":"div","data-component-path":"src/pages/NotFound.tsx","data-component-line":"16","data-component-file":"NotFound.tsx","data-component-name":"div","data-component-content":"%7B%22className%22%3A%22text-center%22%7D",className:"text-center",children:[w.jsx("h1",{"data-lov-id":"src/pages/NotFound.tsx:17:8","data-lov-name":"h1","data-component-path":"src/pages/NotFound.tsx","data-component-line":"17","data-component-file":"NotFound.tsx","data-component-name":"h1","data-component-content":"%7B%22text%22%3A%22404%22%2C%22className%22%3A%22text-4xl%20font-bold%20mb-4%22%7D",className:"text-4xl font-bold mb-4",children:"404"}),w.jsx("p",{"data-lov-id":"src/pages/NotFound.tsx:18:8","data-lov-name":"p","data-component-path":"src/pages/NotFound.tsx","data-component-line":"18","data-component-file":"NotFound.tsx","data-component-name":"p","data-component-content":"%7B%22text%22%3A%22Oops!%20Page%20not%20found%22%2C%22className%22%3A%22text-xl%20text-gray-600%20mb-4%22%7D",className:"text-xl text-gray-600 mb-4",children:"Oops! Page not found"}),w.jsx("a",{"data-lov-id":"src/pages/NotFound.tsx:19:8","data-lov-name":"a","data-component-path":"src/pages/NotFound.tsx","data-component-line":"19","data-component-file":"NotFound.tsx","data-component-name":"a","data-component-content":"%7B%22text%22%3A%22Return%20to%20Home%22%2C%22className%22%3A%22text-blue-500%20hover%3Atext-blue-700%20underline%22%7D",href:"/",className:"text-blue-500 hover:text-blue-700 underline",children:"Return to Home"})]})})},bb=new FC,kb=()=>w.jsx(zC,{"data-lov-id":"src/App.tsx:12:2","data-lov-name":"QueryClientProvider","data-component-path":"src/App.tsx","data-component-line":"12","data-component-file":"App.tsx","data-component-name":"QueryClientProvider","data-component-content":"%7B%7D",client:bb,children:w.jsxs(hC,{"data-lov-id":"src/App.tsx:13:4","data-lov-name":"TooltipProvider","data-component-path":"src/App.tsx","data-component-line":"13","data-component-file":"App.tsx","data-component-name":"TooltipProvider","data-component-content":"%7B%7D",children:[w.jsx(fw,{"data-lov-id":"src/App.tsx:14:6","data-lov-name":"Toaster","data-component-path":"src/App.tsx","data-component-line":"14","data-component-file":"App.tsx","data-component-name":"Toaster","data-component-content":"%7B%7D"}),w.jsx($w,{"data-lov-id":"src/App.tsx:15:6","data-lov-name":"Sonner","data-component-path":"src/App.tsx","data-component-line":"15","data-component-file":"App.tsx","data-component-name":"Sonner","data-component-content":"%7B%7D"}),w.jsx(PE,{"data-lov-id":"src/App.tsx:16:6","data-lov-name":"BrowserRouter","data-component-path":"src/App.tsx","data-component-line":"16","data-component-file":"App.tsx","data-component-name":"BrowserRouter","data-component-content":"%7B%7D",children:w.jsxs(SE,{"data-lov-id":"src/App.tsx:17:8","data-lov-name":"Routes","data-component-path":"src/App.tsx","data-component-line":"17","data-component-file":"App.tsx","data-component-name":"Routes","data-component-content":"%7B%7D",children:[w.jsx(bc,{"data-lov-id":"src/App.tsx:18:10","data-lov-name":"Route","data-component-path":"src/App.tsx","data-component-line":"18","data-component-file":"App.tsx","data-component-name":"Route","data-component-content":"%7B%7D",path:"/",element:w.jsx(Eb,{"data-lov-id":"src/App.tsx:18:35","data-lov-name":"Index","data-component-path":"src/App.tsx","data-component-line":"18","data-component-file":"App.tsx","data-component-name":"Index","data-component-content":"%7B%7D"})}),w.jsx(bc,{"data-lov-id":"src/App.tsx:20:10","data-lov-name":"Route","data-component-path":"src/App.tsx","data-component-line":"20","data-component-file":"App.tsx","data-component-name":"Route","data-component-content":"%7B%7D",path:"*",element:w.jsx(Pb,{"data-lov-id":"src/App.tsx:20:35","data-lov-name":"NotFound","data-component-path":"src/App.tsx","data-component-line":"20","data-component-file":"App.tsx","data-component-name":"NotFound","data-component-content":"%7B%7D"})})]})})]})});Mh(document.getElementById("root")).render(w.jsx(kb,{"data-lov-id":"src/main.tsx:5:52","data-lov-name":"App","data-component-path":"src/main.tsx","data-component-line":"5","data-component-file":"main.tsx","data-component-name":"App","data-component-content":"%7B%7D"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
